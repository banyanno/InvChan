'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSACCOUNTPAYABLE"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSACCOUNTPAYABLE
    Inherits Global.System.Data.DataSet
    
    Private tableACC_PAYABLE As ACC_PAYABLEDataTable
    
    Private tableACC_PAY_ABLE_DETAIL As ACC_PAY_ABLE_DETAILDataTable
    
    Private tableACC_PAYABLE_VIEW As ACC_PAYABLE_VIEWDataTable
    
    Private tableACC_PAYABLE_VIEW1 As ACC_PAYABLE_VIEW1DataTable
    
    Private tablePURCHASE_ORDER_MASTER_DETAIL_VIEW As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
    
    Private relationPurcasheDetail As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ACC_PAYABLE")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLEDataTable(ds.Tables("ACC_PAYABLE")))
            End If
            If (Not (ds.Tables("ACC_PAY_ABLE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAY_ABLE_DETAILDataTable(ds.Tables("ACC_PAY_ABLE_DETAIL")))
            End If
            If (Not (ds.Tables("ACC_PAYABLE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLE_VIEWDataTable(ds.Tables("ACC_PAYABLE_VIEW")))
            End If
            If (Not (ds.Tables("ACC_PAYABLE_VIEW1")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLE_VIEW1DataTable(ds.Tables("ACC_PAYABLE_VIEW1")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_PAYABLE() As ACC_PAYABLEDataTable
        Get
            Return Me.tableACC_PAYABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_PAY_ABLE_DETAIL() As ACC_PAY_ABLE_DETAILDataTable
        Get
            Return Me.tableACC_PAY_ABLE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_PAYABLE_VIEW() As ACC_PAYABLE_VIEWDataTable
        Get
            Return Me.tableACC_PAYABLE_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_PAYABLE_VIEW1() As ACC_PAYABLE_VIEW1DataTable
        Get
            Return Me.tableACC_PAYABLE_VIEW1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PURCHASE_ORDER_MASTER_DETAIL_VIEW() As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        Get
            Return Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSACCOUNTPAYABLE = CType(MyBase.Clone,DSACCOUNTPAYABLE)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ACC_PAYABLE")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLEDataTable(ds.Tables("ACC_PAYABLE")))
            End If
            If (Not (ds.Tables("ACC_PAY_ABLE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAY_ABLE_DETAILDataTable(ds.Tables("ACC_PAY_ABLE_DETAIL")))
            End If
            If (Not (ds.Tables("ACC_PAYABLE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLE_VIEWDataTable(ds.Tables("ACC_PAYABLE_VIEW")))
            End If
            If (Not (ds.Tables("ACC_PAYABLE_VIEW1")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_PAYABLE_VIEW1DataTable(ds.Tables("ACC_PAYABLE_VIEW1")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableACC_PAYABLE = CType(MyBase.Tables("ACC_PAYABLE"),ACC_PAYABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_PAYABLE) Is Nothing) Then
                Me.tableACC_PAYABLE.InitVars
            End If
        End If
        Me.tableACC_PAY_ABLE_DETAIL = CType(MyBase.Tables("ACC_PAY_ABLE_DETAIL"),ACC_PAY_ABLE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_PAY_ABLE_DETAIL) Is Nothing) Then
                Me.tableACC_PAY_ABLE_DETAIL.InitVars
            End If
        End If
        Me.tableACC_PAYABLE_VIEW = CType(MyBase.Tables("ACC_PAYABLE_VIEW"),ACC_PAYABLE_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_PAYABLE_VIEW) Is Nothing) Then
                Me.tableACC_PAYABLE_VIEW.InitVars
            End If
        End If
        Me.tableACC_PAYABLE_VIEW1 = CType(MyBase.Tables("ACC_PAYABLE_VIEW1"),ACC_PAYABLE_VIEW1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_PAYABLE_VIEW1) Is Nothing) Then
                Me.tableACC_PAYABLE_VIEW1.InitVars
            End If
        End If
        Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = CType(MyBase.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW"),PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW) Is Nothing) Then
                Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.InitVars
            End If
        End If
        Me.relationPurcasheDetail = Me.Relations("PurcasheDetail")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSACCOUNTPAYABLE"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSACCOUNTPAYABLE.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableACC_PAYABLE = New ACC_PAYABLEDataTable
        MyBase.Tables.Add(Me.tableACC_PAYABLE)
        Me.tableACC_PAY_ABLE_DETAIL = New ACC_PAY_ABLE_DETAILDataTable
        MyBase.Tables.Add(Me.tableACC_PAY_ABLE_DETAIL)
        Me.tableACC_PAYABLE_VIEW = New ACC_PAYABLE_VIEWDataTable
        MyBase.Tables.Add(Me.tableACC_PAYABLE_VIEW)
        Me.tableACC_PAYABLE_VIEW1 = New ACC_PAYABLE_VIEW1DataTable
        MyBase.Tables.Add(Me.tableACC_PAYABLE_VIEW1)
        Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        MyBase.Tables.Add(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW)
        Me.relationPurcasheDetail = New Global.System.Data.DataRelation("PurcasheDetail", New Global.System.Data.DataColumn() {Me.tableACC_PAYABLE.PURCHASE_NOColumn}, New Global.System.Data.DataColumn() {Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn}, false)
        Me.Relations.Add(Me.relationPurcasheDetail)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_PAYABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_PAY_ABLE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_PAYABLE_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_PAYABLE_VIEW1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePURCHASE_ORDER_MASTER_DETAIL_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ACC_PAYABLERowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_PAYABLERowChangeEvent)
    
    Public Delegate Sub ACC_PAY_ABLE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_PAY_ABLE_DETAILRowChangeEvent)
    
    Public Delegate Sub ACC_PAYABLE_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_PAYABLE_VIEWRowChangeEvent)
    
    Public Delegate Sub ACC_PAYABLE_VIEW1RowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_PAYABLE_VIEW1RowChangeEvent)
    
    Public Delegate Sub PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_PAYABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_PAY_ID As Global.System.Data.DataColumn
        
        Private columnPURCHASE_NO As Global.System.Data.DataColumn
        
        Private columnREFERREN_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NAME As Global.System.Data.DataColumn
        
        Private columnDATE_ORDER As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE As Global.System.Data.DataColumn
        
        Private columnACC_PAY_DESC As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_USD As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_KHR As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_THB As Global.System.Data.DataColumn
        
        Private columnACC_PAY_STATUS As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_PAYABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PURCHASE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPURCHASE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERREN_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERREN_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_ORDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_ORDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_DESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_KHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_KHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_PAYABLERow
            Get
                Return CType(Me.Rows(index),ACC_PAYABLERow)
            End Get
        End Property
        
        Public Event ACC_PAYABLERowChanging As ACC_PAYABLERowChangeEventHandler
        
        Public Event ACC_PAYABLERowChanged As ACC_PAYABLERowChangeEventHandler
        
        Public Event ACC_PAYABLERowDeleting As ACC_PAYABLERowChangeEventHandler
        
        Public Event ACC_PAYABLERowDeleted As ACC_PAYABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_PAYABLERow(ByVal row As ACC_PAYABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_PAYABLERow(ByVal PURCHASE_NO As Decimal, ByVal REFERREN_NO As String, ByVal SUPPLIER_NO As Decimal, ByVal SUPPLIER_NAME As String, ByVal DATE_ORDER As Date, ByVal CREATE_DATE As Date, ByVal ACC_PAY_DESC As String, ByVal TOTAL_AMOUNT_USD As Double, ByVal TOTAL_AMOUNT_KHR As Double, ByVal TOTAL_AMOUNT_THB As Double, ByVal ACC_PAY_STATUS As String) As ACC_PAYABLERow
            Dim rowACC_PAYABLERow As ACC_PAYABLERow = CType(Me.NewRow,ACC_PAYABLERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORDER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, ACC_PAY_STATUS}
            rowACC_PAYABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_PAYABLERow)
            Return rowACC_PAYABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_PAY_ID(ByVal ACC_PAY_ID As Decimal) As ACC_PAYABLERow
            Return CType(Me.Rows.Find(New Object() {ACC_PAY_ID}),ACC_PAYABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_PAYABLEDataTable = CType(MyBase.Clone,ACC_PAYABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_PAYABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_PAY_ID = MyBase.Columns("ACC_PAY_ID")
            Me.columnPURCHASE_NO = MyBase.Columns("PURCHASE_NO")
            Me.columnREFERREN_NO = MyBase.Columns("REFERREN_NO")
            Me.columnSUPPLIER_NO = MyBase.Columns("SUPPLIER_NO")
            Me.columnSUPPLIER_NAME = MyBase.Columns("SUPPLIER_NAME")
            Me.columnDATE_ORDER = MyBase.Columns("DATE_ORDER")
            Me.columnCREATE_DATE = MyBase.Columns("CREATE_DATE")
            Me.columnACC_PAY_DESC = MyBase.Columns("ACC_PAY_DESC")
            Me.columnTOTAL_AMOUNT_USD = MyBase.Columns("TOTAL_AMOUNT_USD")
            Me.columnTOTAL_AMOUNT_KHR = MyBase.Columns("TOTAL_AMOUNT_KHR")
            Me.columnTOTAL_AMOUNT_THB = MyBase.Columns("TOTAL_AMOUNT_THB")
            Me.columnACC_PAY_STATUS = MyBase.Columns("ACC_PAY_STATUS")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_PAY_ID = New Global.System.Data.DataColumn("ACC_PAY_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_ID)
            Me.columnPURCHASE_NO = New Global.System.Data.DataColumn("PURCHASE_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPURCHASE_NO)
            Me.columnREFERREN_NO = New Global.System.Data.DataColumn("REFERREN_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERREN_NO)
            Me.columnSUPPLIER_NO = New Global.System.Data.DataColumn("SUPPLIER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NO)
            Me.columnSUPPLIER_NAME = New Global.System.Data.DataColumn("SUPPLIER_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NAME)
            Me.columnDATE_ORDER = New Global.System.Data.DataColumn("DATE_ORDER", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_ORDER)
            Me.columnCREATE_DATE = New Global.System.Data.DataColumn("CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE)
            Me.columnACC_PAY_DESC = New Global.System.Data.DataColumn("ACC_PAY_DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_DESC)
            Me.columnTOTAL_AMOUNT_USD = New Global.System.Data.DataColumn("TOTAL_AMOUNT_USD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_USD)
            Me.columnTOTAL_AMOUNT_KHR = New Global.System.Data.DataColumn("TOTAL_AMOUNT_KHR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_KHR)
            Me.columnTOTAL_AMOUNT_THB = New Global.System.Data.DataColumn("TOTAL_AMOUNT_THB", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_THB)
            Me.columnACC_PAY_STATUS = New Global.System.Data.DataColumn("ACC_PAY_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_STATUS)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_PAY_ID}, true))
            Me.columnACC_PAY_ID.AutoIncrement = true
            Me.columnACC_PAY_ID.AutoIncrementSeed = -1
            Me.columnACC_PAY_ID.AutoIncrementStep = -1
            Me.columnACC_PAY_ID.AllowDBNull = false
            Me.columnACC_PAY_ID.ReadOnly = true
            Me.columnACC_PAY_ID.Unique = true
            Me.columnSUPPLIER_NAME.MaxLength = 50
            Me.columnACC_PAY_DESC.MaxLength = 100
            Me.columnACC_PAY_STATUS.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_PAYABLERow() As ACC_PAYABLERow
            Return CType(Me.NewRow,ACC_PAYABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_PAYABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_PAYABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_PAYABLERowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLERowChanged(Me, New ACC_PAYABLERowChangeEvent(CType(e.Row,ACC_PAYABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_PAYABLERowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLERowChanging(Me, New ACC_PAYABLERowChangeEvent(CType(e.Row,ACC_PAYABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_PAYABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLERowDeleted(Me, New ACC_PAYABLERowChangeEvent(CType(e.Row,ACC_PAYABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_PAYABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLERowDeleting(Me, New ACC_PAYABLERowChangeEvent(CType(e.Row,ACC_PAYABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_PAYABLERow(ByVal row As ACC_PAYABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_PAYABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_PAY_ABLE_DETAILDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACC_PAY_DETAIL_ID As Global.System.Data.DataColumn
        
        Private columnACC_PAY_ID As Global.System.Data.DataColumn
        
        Private columnPAY_DATE As Global.System.Data.DataColumn
        
        Private columnPAID_USD As Global.System.Data.DataColumn
        
        Private columnPAID_KHT As Global.System.Data.DataColumn
        
        Private columnPAID_THB As Global.System.Data.DataColumn
        
        Private columnPAID_NOTE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_PAY_ABLE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_DETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_DETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAY_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAY_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_KHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_KHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_PAY_ABLE_DETAILRow
            Get
                Return CType(Me.Rows(index),ACC_PAY_ABLE_DETAILRow)
            End Get
        End Property
        
        Public Event ACC_PAY_ABLE_DETAILRowChanging As ACC_PAY_ABLE_DETAILRowChangeEventHandler
        
        Public Event ACC_PAY_ABLE_DETAILRowChanged As ACC_PAY_ABLE_DETAILRowChangeEventHandler
        
        Public Event ACC_PAY_ABLE_DETAILRowDeleting As ACC_PAY_ABLE_DETAILRowChangeEventHandler
        
        Public Event ACC_PAY_ABLE_DETAILRowDeleted As ACC_PAY_ABLE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_PAY_ABLE_DETAILRow(ByVal row As ACC_PAY_ABLE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_PAY_ABLE_DETAILRow(ByVal ACC_PAY_ID As Decimal, ByVal PAY_DATE As Date, ByVal PAID_USD As Decimal, ByVal PAID_KHT As Decimal, ByVal PAID_THB As Decimal, ByVal PAID_NOTE As String) As ACC_PAY_ABLE_DETAILRow
            Dim rowACC_PAY_ABLE_DETAILRow As ACC_PAY_ABLE_DETAILRow = CType(Me.NewRow,ACC_PAY_ABLE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ACC_PAY_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAID_NOTE}
            rowACC_PAY_ABLE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_PAY_ABLE_DETAILRow)
            Return rowACC_PAY_ABLE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACC_PAY_DETAIL_ID(ByVal ACC_PAY_DETAIL_ID As Decimal) As ACC_PAY_ABLE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {ACC_PAY_DETAIL_ID}),ACC_PAY_ABLE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_PAY_ABLE_DETAILDataTable = CType(MyBase.Clone,ACC_PAY_ABLE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_PAY_ABLE_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACC_PAY_DETAIL_ID = MyBase.Columns("ACC_PAY_DETAIL_ID")
            Me.columnACC_PAY_ID = MyBase.Columns("ACC_PAY_ID")
            Me.columnPAY_DATE = MyBase.Columns("PAY_DATE")
            Me.columnPAID_USD = MyBase.Columns("PAID_USD")
            Me.columnPAID_KHT = MyBase.Columns("PAID_KHT")
            Me.columnPAID_THB = MyBase.Columns("PAID_THB")
            Me.columnPAID_NOTE = MyBase.Columns("PAID_NOTE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACC_PAY_DETAIL_ID = New Global.System.Data.DataColumn("ACC_PAY_DETAIL_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_DETAIL_ID)
            Me.columnACC_PAY_ID = New Global.System.Data.DataColumn("ACC_PAY_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_ID)
            Me.columnPAY_DATE = New Global.System.Data.DataColumn("PAY_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAY_DATE)
            Me.columnPAID_USD = New Global.System.Data.DataColumn("PAID_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_USD)
            Me.columnPAID_KHT = New Global.System.Data.DataColumn("PAID_KHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_KHT)
            Me.columnPAID_THB = New Global.System.Data.DataColumn("PAID_THB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_THB)
            Me.columnPAID_NOTE = New Global.System.Data.DataColumn("PAID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_NOTE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACC_PAY_DETAIL_ID}, true))
            Me.columnACC_PAY_DETAIL_ID.AutoIncrement = true
            Me.columnACC_PAY_DETAIL_ID.AutoIncrementSeed = -1
            Me.columnACC_PAY_DETAIL_ID.AutoIncrementStep = -1
            Me.columnACC_PAY_DETAIL_ID.AllowDBNull = false
            Me.columnACC_PAY_DETAIL_ID.ReadOnly = true
            Me.columnACC_PAY_DETAIL_ID.Unique = true
            Me.columnPAID_NOTE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_PAY_ABLE_DETAILRow() As ACC_PAY_ABLE_DETAILRow
            Return CType(Me.NewRow,ACC_PAY_ABLE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_PAY_ABLE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_PAY_ABLE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_PAY_ABLE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_PAY_ABLE_DETAILRowChanged(Me, New ACC_PAY_ABLE_DETAILRowChangeEvent(CType(e.Row,ACC_PAY_ABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_PAY_ABLE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_PAY_ABLE_DETAILRowChanging(Me, New ACC_PAY_ABLE_DETAILRowChangeEvent(CType(e.Row,ACC_PAY_ABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_PAY_ABLE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_PAY_ABLE_DETAILRowDeleted(Me, New ACC_PAY_ABLE_DETAILRowChangeEvent(CType(e.Row,ACC_PAY_ABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_PAY_ABLE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_PAY_ABLE_DETAILRowDeleting(Me, New ACC_PAY_ABLE_DETAILRowChangeEvent(CType(e.Row,ACC_PAY_ABLE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_PAY_ABLE_DETAILRow(ByVal row As ACC_PAY_ABLE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_PAY_ABLE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_PAYABLE_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSUPP_ID As Global.System.Data.DataColumn
        
        Private columnSUPP_NAME As Global.System.Data.DataColumn
        
        Private columnSUPP_GENDER As Global.System.Data.DataColumn
        
        Private columnSUPP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnSUPP_EMAIL As Global.System.Data.DataColumn
        
        Private columnACC_PAY_ID As Global.System.Data.DataColumn
        
        Private columnPURCHASE_NO As Global.System.Data.DataColumn
        
        Private columnREFERREN_NO As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_USD As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_KHR As Global.System.Data.DataColumn
        
        Private columnTOTAL_AMOUNT_THB As Global.System.Data.DataColumn
        
        Private columnACC_PAY_STATUS As Global.System.Data.DataColumn
        
        Private columnACC_PAY_DETAIL_ID As Global.System.Data.DataColumn
        
        Private columnPAY_DATE As Global.System.Data.DataColumn
        
        Private columnPAID_USD As Global.System.Data.DataColumn
        
        Private columnPAID_KHT As Global.System.Data.DataColumn
        
        Private columnPAID_THB As Global.System.Data.DataColumn
        
        Private columnPAID_NOTE As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_PAYABLE_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_GENDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_GENDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_EMAILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_EMAIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PURCHASE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPURCHASE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERREN_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERREN_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_KHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_KHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_AMOUNT_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_AMOUNT_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_DETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_DETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAY_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAY_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_KHTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_KHT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAID_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAID_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_PAYABLE_VIEWRow
            Get
                Return CType(Me.Rows(index),ACC_PAYABLE_VIEWRow)
            End Get
        End Property
        
        Public Event ACC_PAYABLE_VIEWRowChanging As ACC_PAYABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEWRowChanged As ACC_PAYABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEWRowDeleting As ACC_PAYABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEWRowDeleted As ACC_PAYABLE_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_PAYABLE_VIEWRow(ByVal row As ACC_PAYABLE_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_PAYABLE_VIEWRow( _
                    ByVal SUPP_ID As Long,  _
                    ByVal SUPP_NAME As String,  _
                    ByVal SUPP_GENDER As String,  _
                    ByVal SUPP_ADDRESS As String,  _
                    ByVal SUPP_EMAIL As String,  _
                    ByVal ACC_PAY_ID As Decimal,  _
                    ByVal PURCHASE_NO As Decimal,  _
                    ByVal REFERREN_NO As String,  _
                    ByVal TOTAL_AMOUNT_USD As Decimal,  _
                    ByVal TOTAL_AMOUNT_KHR As Decimal,  _
                    ByVal TOTAL_AMOUNT_THB As Decimal,  _
                    ByVal ACC_PAY_STATUS As String,  _
                    ByVal ACC_PAY_DETAIL_ID As Decimal,  _
                    ByVal PAY_DATE As Date,  _
                    ByVal PAID_USD As Decimal,  _
                    ByVal PAID_KHT As Decimal,  _
                    ByVal PAID_THB As Decimal,  _
                    ByVal PAID_NOTE As String,  _
                    ByVal CREATE_DATE As Date) As ACC_PAYABLE_VIEWRow
            Dim rowACC_PAYABLE_VIEWRow As ACC_PAYABLE_VIEWRow = CType(Me.NewRow,ACC_PAYABLE_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {SUPP_ID, SUPP_NAME, SUPP_GENDER, SUPP_ADDRESS, SUPP_EMAIL, ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, ACC_PAY_STATUS, ACC_PAY_DETAIL_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAID_NOTE, CREATE_DATE}
            rowACC_PAYABLE_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_PAYABLE_VIEWRow)
            Return rowACC_PAYABLE_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_PAYABLE_VIEWDataTable = CType(MyBase.Clone,ACC_PAYABLE_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_PAYABLE_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSUPP_ID = MyBase.Columns("SUPP_ID")
            Me.columnSUPP_NAME = MyBase.Columns("SUPP_NAME")
            Me.columnSUPP_GENDER = MyBase.Columns("SUPP_GENDER")
            Me.columnSUPP_ADDRESS = MyBase.Columns("SUPP_ADDRESS")
            Me.columnSUPP_EMAIL = MyBase.Columns("SUPP_EMAIL")
            Me.columnACC_PAY_ID = MyBase.Columns("ACC_PAY_ID")
            Me.columnPURCHASE_NO = MyBase.Columns("PURCHASE_NO")
            Me.columnREFERREN_NO = MyBase.Columns("REFERREN_NO")
            Me.columnTOTAL_AMOUNT_USD = MyBase.Columns("TOTAL_AMOUNT_USD")
            Me.columnTOTAL_AMOUNT_KHR = MyBase.Columns("TOTAL_AMOUNT_KHR")
            Me.columnTOTAL_AMOUNT_THB = MyBase.Columns("TOTAL_AMOUNT_THB")
            Me.columnACC_PAY_STATUS = MyBase.Columns("ACC_PAY_STATUS")
            Me.columnACC_PAY_DETAIL_ID = MyBase.Columns("ACC_PAY_DETAIL_ID")
            Me.columnPAY_DATE = MyBase.Columns("PAY_DATE")
            Me.columnPAID_USD = MyBase.Columns("PAID_USD")
            Me.columnPAID_KHT = MyBase.Columns("PAID_KHT")
            Me.columnPAID_THB = MyBase.Columns("PAID_THB")
            Me.columnPAID_NOTE = MyBase.Columns("PAID_NOTE")
            Me.columnCREATE_DATE = MyBase.Columns("CREATE_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSUPP_ID = New Global.System.Data.DataColumn("SUPP_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_ID)
            Me.columnSUPP_NAME = New Global.System.Data.DataColumn("SUPP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_NAME)
            Me.columnSUPP_GENDER = New Global.System.Data.DataColumn("SUPP_GENDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_GENDER)
            Me.columnSUPP_ADDRESS = New Global.System.Data.DataColumn("SUPP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_ADDRESS)
            Me.columnSUPP_EMAIL = New Global.System.Data.DataColumn("SUPP_EMAIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_EMAIL)
            Me.columnACC_PAY_ID = New Global.System.Data.DataColumn("ACC_PAY_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_ID)
            Me.columnPURCHASE_NO = New Global.System.Data.DataColumn("PURCHASE_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPURCHASE_NO)
            Me.columnREFERREN_NO = New Global.System.Data.DataColumn("REFERREN_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERREN_NO)
            Me.columnTOTAL_AMOUNT_USD = New Global.System.Data.DataColumn("TOTAL_AMOUNT_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_USD)
            Me.columnTOTAL_AMOUNT_KHR = New Global.System.Data.DataColumn("TOTAL_AMOUNT_KHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_KHR)
            Me.columnTOTAL_AMOUNT_THB = New Global.System.Data.DataColumn("TOTAL_AMOUNT_THB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_AMOUNT_THB)
            Me.columnACC_PAY_STATUS = New Global.System.Data.DataColumn("ACC_PAY_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_STATUS)
            Me.columnACC_PAY_DETAIL_ID = New Global.System.Data.DataColumn("ACC_PAY_DETAIL_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_DETAIL_ID)
            Me.columnPAY_DATE = New Global.System.Data.DataColumn("PAY_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAY_DATE)
            Me.columnPAID_USD = New Global.System.Data.DataColumn("PAID_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_USD)
            Me.columnPAID_KHT = New Global.System.Data.DataColumn("PAID_KHT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_KHT)
            Me.columnPAID_THB = New Global.System.Data.DataColumn("PAID_THB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_THB)
            Me.columnPAID_NOTE = New Global.System.Data.DataColumn("PAID_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAID_NOTE)
            Me.columnCREATE_DATE = New Global.System.Data.DataColumn("CREATE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE)
            Me.columnSUPP_ID.AllowDBNull = false
            Me.columnSUPP_NAME.MaxLength = 250
            Me.columnSUPP_GENDER.MaxLength = 50
            Me.columnSUPP_ADDRESS.MaxLength = 250
            Me.columnSUPP_EMAIL.MaxLength = 250
            Me.columnACC_PAY_ID.AllowDBNull = false
            Me.columnREFERREN_NO.MaxLength = 50
            Me.columnACC_PAY_STATUS.MaxLength = 50
            Me.columnPAID_NOTE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_PAYABLE_VIEWRow() As ACC_PAYABLE_VIEWRow
            Return CType(Me.NewRow,ACC_PAYABLE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_PAYABLE_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_PAYABLE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_PAYABLE_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEWRowChanged(Me, New ACC_PAYABLE_VIEWRowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_PAYABLE_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEWRowChanging(Me, New ACC_PAYABLE_VIEWRowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_PAYABLE_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEWRowDeleted(Me, New ACC_PAYABLE_VIEWRowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_PAYABLE_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEWRowDeleting(Me, New ACC_PAYABLE_VIEWRowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_PAYABLE_VIEWRow(ByVal row As ACC_PAYABLE_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_PAYABLE_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_PAYABLE_VIEW1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnsupp_id As Global.System.Data.DataColumn
        
        Private columnsupp_name As Global.System.Data.DataColumn
        
        Private columnacc_pay_id As Global.System.Data.DataColumn
        
        Private columnpurchase_no As Global.System.Data.DataColumn
        
        Private columnreferren_no As Global.System.Data.DataColumn
        
        Private columncreate_date As Global.System.Data.DataColumn
        
        Private columnACC_PAY_STATUS As Global.System.Data.DataColumn
        
        Private columnTotal_Amount_USD As Global.System.Data.DataColumn
        
        Private columnTotal_amount_KHR As Global.System.Data.DataColumn
        
        Private columnTotal_amount_thb As Global.System.Data.DataColumn
        
        Private columnPaidUSD As Global.System.Data.DataColumn
        
        Private columnPAIDKHR As Global.System.Data.DataColumn
        
        Private columnPAIDTHB As Global.System.Data.DataColumn
        
        Private columnREMAIN_USD As Global.System.Data.DataColumn
        
        Private columnREMAIN_KHR As Global.System.Data.DataColumn
        
        Private columnREMAIN_THB As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_PAYABLE_VIEW1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supp_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupp_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supp_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupp_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property acc_pay_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacc_pay_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property purchase_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpurchase_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property referren_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreferren_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property create_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreate_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACC_PAY_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACC_PAY_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_Amount_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_Amount_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_amount_KHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_amount_KHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Total_amount_thbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal_amount_thb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDKHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDKHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAIDTHBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAIDTHB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_KHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_KHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_PAYABLE_VIEW1Row
            Get
                Return CType(Me.Rows(index),ACC_PAYABLE_VIEW1Row)
            End Get
        End Property
        
        Public Event ACC_PAYABLE_VIEW1RowChanging As ACC_PAYABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEW1RowChanged As ACC_PAYABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEW1RowDeleting As ACC_PAYABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_PAYABLE_VIEW1RowDeleted As ACC_PAYABLE_VIEW1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_PAYABLE_VIEW1Row(ByVal row As ACC_PAYABLE_VIEW1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_PAYABLE_VIEW1Row( _
                    ByVal supp_id As Long,  _
                    ByVal supp_name As String,  _
                    ByVal acc_pay_id As Decimal,  _
                    ByVal purchase_no As Decimal,  _
                    ByVal referren_no As String,  _
                    ByVal create_date As Date,  _
                    ByVal ACC_PAY_STATUS As String,  _
                    ByVal Total_Amount_USD As Decimal,  _
                    ByVal Total_amount_KHR As Decimal,  _
                    ByVal Total_amount_thb As Decimal,  _
                    ByVal PaidUSD As Decimal,  _
                    ByVal PAIDKHR As Decimal,  _
                    ByVal PAIDTHB As Decimal,  _
                    ByVal REMAIN_USD As Decimal,  _
                    ByVal REMAIN_KHR As Decimal,  _
                    ByVal REMAIN_THB As Decimal) As ACC_PAYABLE_VIEW1Row
            Dim rowACC_PAYABLE_VIEW1Row As ACC_PAYABLE_VIEW1Row = CType(Me.NewRow,ACC_PAYABLE_VIEW1Row)
            Dim columnValuesArray() As Object = New Object() {supp_id, supp_name, acc_pay_id, purchase_no, referren_no, create_date, ACC_PAY_STATUS, Total_Amount_USD, Total_amount_KHR, Total_amount_thb, PaidUSD, PAIDKHR, PAIDTHB, REMAIN_USD, REMAIN_KHR, REMAIN_THB}
            rowACC_PAYABLE_VIEW1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_PAYABLE_VIEW1Row)
            Return rowACC_PAYABLE_VIEW1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_PAYABLE_VIEW1DataTable = CType(MyBase.Clone,ACC_PAYABLE_VIEW1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_PAYABLE_VIEW1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsupp_id = MyBase.Columns("supp_id")
            Me.columnsupp_name = MyBase.Columns("supp_name")
            Me.columnacc_pay_id = MyBase.Columns("acc_pay_id")
            Me.columnpurchase_no = MyBase.Columns("purchase_no")
            Me.columnreferren_no = MyBase.Columns("referren_no")
            Me.columncreate_date = MyBase.Columns("create_date")
            Me.columnACC_PAY_STATUS = MyBase.Columns("ACC_PAY_STATUS")
            Me.columnTotal_Amount_USD = MyBase.Columns("Total_Amount_USD")
            Me.columnTotal_amount_KHR = MyBase.Columns("Total_amount_KHR")
            Me.columnTotal_amount_thb = MyBase.Columns("Total_amount_thb")
            Me.columnPaidUSD = MyBase.Columns("PaidUSD")
            Me.columnPAIDKHR = MyBase.Columns("PAIDKHR")
            Me.columnPAIDTHB = MyBase.Columns("PAIDTHB")
            Me.columnREMAIN_USD = MyBase.Columns("REMAIN_USD")
            Me.columnREMAIN_KHR = MyBase.Columns("REMAIN_KHR")
            Me.columnREMAIN_THB = MyBase.Columns("REMAIN_THB")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsupp_id = New Global.System.Data.DataColumn("supp_id", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupp_id)
            Me.columnsupp_name = New Global.System.Data.DataColumn("supp_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupp_name)
            Me.columnacc_pay_id = New Global.System.Data.DataColumn("acc_pay_id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacc_pay_id)
            Me.columnpurchase_no = New Global.System.Data.DataColumn("purchase_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpurchase_no)
            Me.columnreferren_no = New Global.System.Data.DataColumn("referren_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreferren_no)
            Me.columncreate_date = New Global.System.Data.DataColumn("create_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreate_date)
            Me.columnACC_PAY_STATUS = New Global.System.Data.DataColumn("ACC_PAY_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACC_PAY_STATUS)
            Me.columnTotal_Amount_USD = New Global.System.Data.DataColumn("Total_Amount_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_Amount_USD)
            Me.columnTotal_amount_KHR = New Global.System.Data.DataColumn("Total_amount_KHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_amount_KHR)
            Me.columnTotal_amount_thb = New Global.System.Data.DataColumn("Total_amount_thb", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal_amount_thb)
            Me.columnPaidUSD = New Global.System.Data.DataColumn("PaidUSD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidUSD)
            Me.columnPAIDKHR = New Global.System.Data.DataColumn("PAIDKHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDKHR)
            Me.columnPAIDTHB = New Global.System.Data.DataColumn("PAIDTHB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAIDTHB)
            Me.columnREMAIN_USD = New Global.System.Data.DataColumn("REMAIN_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_USD)
            Me.columnREMAIN_KHR = New Global.System.Data.DataColumn("REMAIN_KHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_KHR)
            Me.columnREMAIN_THB = New Global.System.Data.DataColumn("REMAIN_THB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_THB)
            Me.columnsupp_id.AllowDBNull = false
            Me.columnsupp_name.MaxLength = 250
            Me.columnacc_pay_id.AllowDBNull = false
            Me.columnreferren_no.MaxLength = 50
            Me.columnACC_PAY_STATUS.MaxLength = 50
            Me.columnPaidUSD.ReadOnly = true
            Me.columnPAIDKHR.ReadOnly = true
            Me.columnPAIDTHB.ReadOnly = true
            Me.columnREMAIN_USD.ReadOnly = true
            Me.columnREMAIN_KHR.ReadOnly = true
            Me.columnREMAIN_THB.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_PAYABLE_VIEW1Row() As ACC_PAYABLE_VIEW1Row
            Return CType(Me.NewRow,ACC_PAYABLE_VIEW1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_PAYABLE_VIEW1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_PAYABLE_VIEW1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_PAYABLE_VIEW1RowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEW1RowChanged(Me, New ACC_PAYABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_PAYABLE_VIEW1RowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEW1RowChanging(Me, New ACC_PAYABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_PAYABLE_VIEW1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEW1RowDeleted(Me, New ACC_PAYABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_PAYABLE_VIEW1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_PAYABLE_VIEW1RowDeleting(Me, New ACC_PAYABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_PAYABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_PAYABLE_VIEW1Row(ByVal row As ACC_PAYABLE_VIEW1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_PAYABLE_VIEW1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDETA_ID As Global.System.Data.DataColumn
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnORDE_QTY As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_D As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_R As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_B As Global.System.Data.DataColumn
        
        Private columnRECEIVE_QTY As Global.System.Data.DataColumn
        
        Private columnIS_CURRENCY As Global.System.Data.DataColumn
        
        Private columnPROMOTION_QTY As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME_FREE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROMOTION_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROMOTION_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAME_FREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME_FREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Get
                Return CType(Me.Rows(index),PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            End Get
        End Property
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanging As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanged As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleting As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleted As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal DETA_ID As Long, ByVal parentACC_PAYABLERowByPurcasheDetail As ACC_PAYABLERow, ByVal ITEM_ID As Integer, ByVal ITEM_NAME As String, ByVal UNIT_NAME As String, ByVal ORDE_QTY As Double, ByVal COST As Double, ByVal ORDE_PRICE_D As Double, ByVal ORDE_PRICE_R As Double, ByVal ORDE_PRICE_B As Double, ByVal RECEIVE_QTY As Double, ByVal IS_CURRENCY As String, ByVal PROMOTION_QTY As Double, ByVal UNIT_NAME_FREE As String) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Dim rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow = CType(Me.NewRow,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {DETA_ID, Nothing, ITEM_ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY, UNIT_NAME_FREE}
            If (Not (parentACC_PAYABLERowByPurcasheDetail) Is Nothing) Then
                columnValuesArray(1) = parentACC_PAYABLERowByPurcasheDetail(1)
            End If
            rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Return rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDETA_ID(ByVal DETA_ID As Long) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Return CType(Me.Rows.Find(New Object() {DETA_ID}),PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable = CType(MyBase.Clone,PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDETA_ID = MyBase.Columns("DETA_ID")
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnORDE_QTY = MyBase.Columns("ORDE_QTY")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnORDE_PRICE_D = MyBase.Columns("ORDE_PRICE_D")
            Me.columnORDE_PRICE_R = MyBase.Columns("ORDE_PRICE_R")
            Me.columnORDE_PRICE_B = MyBase.Columns("ORDE_PRICE_B")
            Me.columnRECEIVE_QTY = MyBase.Columns("RECEIVE_QTY")
            Me.columnIS_CURRENCY = MyBase.Columns("IS_CURRENCY")
            Me.columnPROMOTION_QTY = MyBase.Columns("PROMOTION_QTY")
            Me.columnUNIT_NAME_FREE = MyBase.Columns("UNIT_NAME_FREE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDETA_ID = New Global.System.Data.DataColumn("DETA_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETA_ID)
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnORDE_QTY = New Global.System.Data.DataColumn("ORDE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_QTY)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnORDE_PRICE_D = New Global.System.Data.DataColumn("ORDE_PRICE_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_D)
            Me.columnORDE_PRICE_R = New Global.System.Data.DataColumn("ORDE_PRICE_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_R)
            Me.columnORDE_PRICE_B = New Global.System.Data.DataColumn("ORDE_PRICE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_B)
            Me.columnRECEIVE_QTY = New Global.System.Data.DataColumn("RECEIVE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_QTY)
            Me.columnIS_CURRENCY = New Global.System.Data.DataColumn("IS_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CURRENCY)
            Me.columnPROMOTION_QTY = New Global.System.Data.DataColumn("PROMOTION_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROMOTION_QTY)
            Me.columnUNIT_NAME_FREE = New Global.System.Data.DataColumn("UNIT_NAME_FREE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME_FREE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDETA_ID}, true))
            Me.columnDETA_ID.AllowDBNull = false
            Me.columnDETA_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 250
            Me.columnUNIT_NAME.MaxLength = 50
            Me.columnIS_CURRENCY.MaxLength = 50
            Me.columnUNIT_NAME_FREE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPURCHASE_ORDER_MASTER_DETAIL_VIEWRow() As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Return CType(Me.NewRow,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PURCHASE_ORDER_MASTER_DETAIL_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanged(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanging(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleted(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleting(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSACCOUNTPAYABLE = New DSACCOUNTPAYABLE
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_PAYABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableACC_PAYABLE As ACC_PAYABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_PAYABLE = CType(Me.Table,ACC_PAYABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_ID() As Decimal
            Get
                Return CType(Me(Me.tableACC_PAYABLE.ACC_PAY_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableACC_PAYABLE.ACC_PAY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PURCHASE_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.PURCHASE_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PURCHASE_NO' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.PURCHASE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERREN_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.REFERREN_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERREN_NO' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.REFERREN_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.SUPPLIER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NO' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.SUPPLIER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.SUPPLIER_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NAME' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.SUPPLIER_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_ORDER() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.DATE_ORDERColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_ORDER' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.DATE_ORDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.ACC_PAY_DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_DESC' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.ACC_PAY_DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_USD() As Double
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_USDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_USD' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_KHR() As Double
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_KHRColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_KHR' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_KHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_THB() As Double
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_THBColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_THB' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE.ACC_PAY_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_STATUS' in table 'ACC_PAYABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE.ACC_PAY_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPURCHASE_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.PURCHASE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPURCHASE_NONull()
            Me(Me.tableACC_PAYABLE.PURCHASE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERREN_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.REFERREN_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERREN_NONull()
            Me(Me.tableACC_PAYABLE.REFERREN_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.SUPPLIER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NONull()
            Me(Me.tableACC_PAYABLE.SUPPLIER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NAMENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.SUPPLIER_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NAMENull()
            Me(Me.tableACC_PAYABLE.SUPPLIER_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_ORDERNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.DATE_ORDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_ORDERNull()
            Me(Me.tableACC_PAYABLE.DATE_ORDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATE_DATENull()
            Me(Me.tableACC_PAYABLE.CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_DESCNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.ACC_PAY_DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_DESCNull()
            Me(Me.tableACC_PAYABLE.ACC_PAY_DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.TOTAL_AMOUNT_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_USDNull()
            Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_KHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.TOTAL_AMOUNT_KHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_KHRNull()
            Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_KHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.TOTAL_AMOUNT_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_THBNull()
            Me(Me.tableACC_PAYABLE.TOTAL_AMOUNT_THBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE.ACC_PAY_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_STATUSNull()
            Me(Me.tableACC_PAYABLE.ACC_PAY_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPURCHASE_ORDER_MASTER_DETAIL_VIEWRows() As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow()
            If (Me.Table.ChildRelations("PurcasheDetail") Is Nothing) Then
                Return New PURCHASE_ORDER_MASTER_DETAIL_VIEWRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PurcasheDetail")),PURCHASE_ORDER_MASTER_DETAIL_VIEWRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_PAY_ABLE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableACC_PAY_ABLE_DETAIL As ACC_PAY_ABLE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_PAY_ABLE_DETAIL = CType(Me.Table,ACC_PAY_ABLE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_DETAIL_ID() As Decimal
            Get
                Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_DETAIL_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_DETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_ID' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAY_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.PAY_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAY_DATE' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.PAY_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_USD' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_KHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_KHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_KHT' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_KHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_THB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_THBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_THB' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_NOTE' in table 'ACC_PAY_ABLE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_IDNull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.ACC_PAY_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAY_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.PAY_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAY_DATENull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.PAY_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.PAID_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_USDNull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_KHTNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.PAID_KHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_KHTNull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_KHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.PAID_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_THBNull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_THBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAY_ABLE_DETAIL.PAID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_NOTENull()
            Me(Me.tableACC_PAY_ABLE_DETAIL.PAID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_PAYABLE_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableACC_PAYABLE_VIEW As ACC_PAYABLE_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_PAYABLE_VIEW = CType(Me.Table,ACC_PAYABLE_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_ID() As Long
            Get
                Return CType(Me(Me.tableACC_PAYABLE_VIEW.SUPP_IDColumn),Long)
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.SUPP_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.SUPP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_NAME' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.SUPP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_GENDER() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.SUPP_GENDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_GENDER' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.SUPP_GENDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.SUPP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_ADDRESS' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.SUPP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_EMAIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.SUPP_EMAILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_EMAIL' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.SUPP_EMAILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_ID() As Decimal
            Get
                Return CType(Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PURCHASE_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PURCHASE_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PURCHASE_NO' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PURCHASE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERREN_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.REFERREN_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERREN_NO' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.REFERREN_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_USD' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_KHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_KHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_KHR' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_KHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_AMOUNT_THB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_THBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_AMOUNT_THB' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_STATUS' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_DETAIL_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_DETAIL_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_DETAIL_ID' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_DETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAY_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PAY_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAY_DATE' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PAY_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PAID_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_USD' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PAID_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_KHT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PAID_KHTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_KHT' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PAID_KHTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_THB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PAID_THBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_THB' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PAID_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAID_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.PAID_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAID_NOTE' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.PAID_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW.CREATE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE' in table 'ACC_PAYABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW.CREATE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_NAMENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.SUPP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_NAMENull()
            Me(Me.tableACC_PAYABLE_VIEW.SUPP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_GENDERNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.SUPP_GENDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_GENDERNull()
            Me(Me.tableACC_PAYABLE_VIEW.SUPP_GENDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.SUPP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_ADDRESSNull()
            Me(Me.tableACC_PAYABLE_VIEW.SUPP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_EMAILNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.SUPP_EMAILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_EMAILNull()
            Me(Me.tableACC_PAYABLE_VIEW.SUPP_EMAILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPURCHASE_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PURCHASE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPURCHASE_NONull()
            Me(Me.tableACC_PAYABLE_VIEW.PURCHASE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERREN_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.REFERREN_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERREN_NONull()
            Me(Me.tableACC_PAYABLE_VIEW.REFERREN_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_USDNull()
            Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_KHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_KHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_KHRNull()
            Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_KHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_AMOUNT_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_AMOUNT_THBNull()
            Me(Me.tableACC_PAYABLE_VIEW.TOTAL_AMOUNT_THBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.ACC_PAY_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_STATUSNull()
            Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_DETAIL_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.ACC_PAY_DETAIL_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_DETAIL_IDNull()
            Me(Me.tableACC_PAYABLE_VIEW.ACC_PAY_DETAIL_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAY_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PAY_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAY_DATENull()
            Me(Me.tableACC_PAYABLE_VIEW.PAY_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PAID_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_USDNull()
            Me(Me.tableACC_PAYABLE_VIEW.PAID_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_KHTNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PAID_KHTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_KHTNull()
            Me(Me.tableACC_PAYABLE_VIEW.PAID_KHTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PAID_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_THBNull()
            Me(Me.tableACC_PAYABLE_VIEW.PAID_THBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAID_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.PAID_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAID_NOTENull()
            Me(Me.tableACC_PAYABLE_VIEW.PAID_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATE_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW.CREATE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATE_DATENull()
            Me(Me.tableACC_PAYABLE_VIEW.CREATE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_PAYABLE_VIEW1Row
        Inherits Global.System.Data.DataRow
        
        Private tableACC_PAYABLE_VIEW1 As ACC_PAYABLE_VIEW1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_PAYABLE_VIEW1 = CType(Me.Table,ACC_PAYABLE_VIEW1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supp_id() As Long
            Get
                Return CType(Me(Me.tableACC_PAYABLE_VIEW1.supp_idColumn),Long)
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.supp_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supp_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.supp_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'supp_name' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.supp_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property acc_pay_id() As Decimal
            Get
                Return CType(Me(Me.tableACC_PAYABLE_VIEW1.acc_pay_idColumn),Decimal)
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.acc_pay_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property purchase_no() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.purchase_noColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'purchase_no' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.purchase_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property referren_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.referren_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'referren_no' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.referren_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property create_date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.create_dateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'create_date' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.create_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAY_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.ACC_PAY_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACC_PAY_STATUS' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.ACC_PAY_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_Amount_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.Total_Amount_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_Amount_USD' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.Total_Amount_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_amount_KHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_KHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_amount_KHR' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_KHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total_amount_thb() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_thbColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total_amount_thb' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_thbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidUSD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.PaidUSDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidUSD' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.PaidUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDKHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.PAIDKHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDKHR' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.PAIDKHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAIDTHB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.PAIDTHBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAIDTHB' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.PAIDTHBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_USD' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_KHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_KHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_KHR' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_KHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_THB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_THBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_THB' in table 'ACC_PAYABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issupp_nameNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.supp_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsupp_nameNull()
            Me(Me.tableACC_PAYABLE_VIEW1.supp_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispurchase_noNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.purchase_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpurchase_noNull()
            Me(Me.tableACC_PAYABLE_VIEW1.purchase_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isreferren_noNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.referren_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setreferren_noNull()
            Me(Me.tableACC_PAYABLE_VIEW1.referren_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscreate_dateNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.create_dateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcreate_dateNull()
            Me(Me.tableACC_PAYABLE_VIEW1.create_dateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACC_PAY_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.ACC_PAY_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACC_PAY_STATUSNull()
            Me(Me.tableACC_PAYABLE_VIEW1.ACC_PAY_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_Amount_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.Total_Amount_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_Amount_USDNull()
            Me(Me.tableACC_PAYABLE_VIEW1.Total_Amount_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_amount_KHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.Total_amount_KHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_amount_KHRNull()
            Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_KHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotal_amount_thbNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.Total_amount_thbColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotal_amount_thbNull()
            Me(Me.tableACC_PAYABLE_VIEW1.Total_amount_thbColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidUSDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.PaidUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidUSDNull()
            Me(Me.tableACC_PAYABLE_VIEW1.PaidUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDKHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.PAIDKHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDKHRNull()
            Me(Me.tableACC_PAYABLE_VIEW1.PAIDKHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAIDTHBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.PAIDTHBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAIDTHBNull()
            Me(Me.tableACC_PAYABLE_VIEW1.PAIDTHBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.REMAIN_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_USDNull()
            Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_KHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.REMAIN_KHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_KHRNull()
            Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_KHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_PAYABLE_VIEW1.REMAIN_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_THBNull()
            Me(Me.tableACC_PAYABLE_VIEW1.REMAIN_THBColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePURCHASE_ORDER_MASTER_DETAIL_VIEW As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = CType(Me.Table,PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETA_ID() As Long
            Get
                Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.DETA_IDColumn),Long)
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.DETA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_ID' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_D' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_R' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_B' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CURRENCY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROMOTION_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROMOTION_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME_FREE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME_FREE' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACC_PAYABLERow() As ACC_PAYABLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PurcasheDetail")),ACC_PAYABLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PurcasheDetail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_IDNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_DNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_DNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_RNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_RNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_BNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_BNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CURRENCYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROMOTION_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROMOTION_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAME_FREENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAME_FREENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_PAYABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_PAYABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_PAYABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_PAYABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_PAY_ABLE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_PAY_ABLE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_PAY_ABLE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_PAY_ABLE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_PAYABLE_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_PAYABLE_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_PAYABLE_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_PAYABLE_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_PAYABLE_VIEW1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_PAYABLE_VIEW1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_PAYABLE_VIEW1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_PAYABLE_VIEW1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSACCOUNTPAYABLETableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_PAYABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_PAYABLE"
            tableMapping.ColumnMappings.Add("ACC_PAY_ID", "ACC_PAY_ID")
            tableMapping.ColumnMappings.Add("PURCHASE_NO", "PURCHASE_NO")
            tableMapping.ColumnMappings.Add("REFERREN_NO", "REFERREN_NO")
            tableMapping.ColumnMappings.Add("SUPPLIER_NO", "SUPPLIER_NO")
            tableMapping.ColumnMappings.Add("SUPPLIER_NAME", "SUPPLIER_NAME")
            tableMapping.ColumnMappings.Add("DATE_ORDER", "DATE_ORDER")
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE")
            tableMapping.ColumnMappings.Add("ACC_PAY_DESC", "ACC_PAY_DESC")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_USD", "TOTAL_AMOUNT_USD")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_KHR", "TOTAL_AMOUNT_KHR")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_THB", "TOTAL_AMOUNT_THB")
            tableMapping.ColumnMappings.Add("ACC_PAY_STATUS", "ACC_PAY_STATUS")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ACC_PAYABLE] WHERE (([ACC_PAY_ID] = @Original_ACC_PAY_ID) AND "& _ 
                "((@IsNull_PURCHASE_NO = 1 AND [PURCHASE_NO] IS NULL) OR ([PURCHASE_NO] = @Origin"& _ 
                "al_PURCHASE_NO)) AND ((@IsNull_REFERREN_NO = 1 AND [REFERREN_NO] IS NULL) OR ([R"& _ 
                "EFERREN_NO] = @Original_REFERREN_NO)) AND ((@IsNull_SUPPLIER_NO = 1 AND [SUPPLIE"& _ 
                "R_NO] IS NULL) OR ([SUPPLIER_NO] = @Original_SUPPLIER_NO)) AND ((@IsNull_SUPPLIE"& _ 
                "R_NAME = 1 AND [SUPPLIER_NAME] IS NULL) OR ([SUPPLIER_NAME] = @Original_SUPPLIER"& _ 
                "_NAME)) AND ((@IsNull_DATE_ORDER = 1 AND [DATE_ORDER] IS NULL) OR ([DATE_ORDER] "& _ 
                "= @Original_DATE_ORDER)) AND ((@IsNull_CREATE_DATE = 1 AND [CREATE_DATE] IS NULL"& _ 
                ") OR ([CREATE_DATE] = @Original_CREATE_DATE)) AND ((@IsNull_ACC_PAY_DESC = 1 AND"& _ 
                " [ACC_PAY_DESC] IS NULL) OR ([ACC_PAY_DESC] = @Original_ACC_PAY_DESC)) AND ((@Is"& _ 
                "Null_TOTAL_AMOUNT_USD = 1 AND [TOTAL_AMOUNT_USD] IS NULL) OR ([TOTAL_AMOUNT_USD]"& _ 
                " = @Original_TOTAL_AMOUNT_USD)) AND ((@IsNull_TOTAL_AMOUNT_KHR = 1 AND [TOTAL_AM"& _ 
                "OUNT_KHR] IS NULL) OR ([TOTAL_AMOUNT_KHR] = @Original_TOTAL_AMOUNT_KHR)) AND ((@"& _ 
                "IsNull_TOTAL_AMOUNT_THB = 1 AND [TOTAL_AMOUNT_THB] IS NULL) OR ([TOTAL_AMOUNT_TH"& _ 
                "B] = @Original_TOTAL_AMOUNT_THB)) AND ((@IsNull_ACC_PAY_STATUS = 1 AND [ACC_PAY_"& _ 
                "STATUS] IS NULL) OR ([ACC_PAY_STATUS] = @Original_ACC_PAY_STATUS)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PURCHASE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERREN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATE_ORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATE_ORDER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ACC_PAYABLE] ([PURCHASE_NO], [REFERREN_NO], [SUPPLIER_NO], [SU"& _ 
                "PPLIER_NAME], [DATE_ORDER], [CREATE_DATE], [ACC_PAY_DESC], [TOTAL_AMOUNT_USD], ["& _ 
                "TOTAL_AMOUNT_KHR], [TOTAL_AMOUNT_THB], [ACC_PAY_STATUS]) VALUES (@PURCHASE_NO, @"& _ 
                "REFERREN_NO, @SUPPLIER_NO, @SUPPLIER_NAME, @DATE_ORDER, @CREATE_DATE, @ACC_PAY_D"& _ 
                "ESC, @TOTAL_AMOUNT_USD, @TOTAL_AMOUNT_KHR, @TOTAL_AMOUNT_THB, @ACC_PAY_STATUS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_O"& _ 
                "RDER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUN"& _ 
                "T_THB, ACC_PAY_STATUS FROM ACC_PAYABLE WHERE (ACC_PAY_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE_ORDER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ACC_PAYABLE] SET [PURCHASE_NO] = @PURCHASE_NO, [REFERREN_NO] = @REF"& _ 
                "ERREN_NO, [SUPPLIER_NO] = @SUPPLIER_NO, [SUPPLIER_NAME] = @SUPPLIER_NAME, [DATE_"& _ 
                "ORDER] = @DATE_ORDER, [CREATE_DATE] = @CREATE_DATE, [ACC_PAY_DESC] = @ACC_PAY_DE"& _ 
                "SC, [TOTAL_AMOUNT_USD] = @TOTAL_AMOUNT_USD, [TOTAL_AMOUNT_KHR] = @TOTAL_AMOUNT_K"& _ 
                "HR, [TOTAL_AMOUNT_THB] = @TOTAL_AMOUNT_THB, [ACC_PAY_STATUS] = @ACC_PAY_STATUS W"& _ 
                "HERE (([ACC_PAY_ID] = @Original_ACC_PAY_ID) AND ((@IsNull_PURCHASE_NO = 1 AND [P"& _ 
                "URCHASE_NO] IS NULL) OR ([PURCHASE_NO] = @Original_PURCHASE_NO)) AND ((@IsNull_R"& _ 
                "EFERREN_NO = 1 AND [REFERREN_NO] IS NULL) OR ([REFERREN_NO] = @Original_REFERREN"& _ 
                "_NO)) AND ((@IsNull_SUPPLIER_NO = 1 AND [SUPPLIER_NO] IS NULL) OR ([SUPPLIER_NO]"& _ 
                " = @Original_SUPPLIER_NO)) AND ((@IsNull_SUPPLIER_NAME = 1 AND [SUPPLIER_NAME] I"& _ 
                "S NULL) OR ([SUPPLIER_NAME] = @Original_SUPPLIER_NAME)) AND ((@IsNull_DATE_ORDER"& _ 
                " = 1 AND [DATE_ORDER] IS NULL) OR ([DATE_ORDER] = @Original_DATE_ORDER)) AND ((@"& _ 
                "IsNull_CREATE_DATE = 1 AND [CREATE_DATE] IS NULL) OR ([CREATE_DATE] = @Original_"& _ 
                "CREATE_DATE)) AND ((@IsNull_ACC_PAY_DESC = 1 AND [ACC_PAY_DESC] IS NULL) OR ([AC"& _ 
                "C_PAY_DESC] = @Original_ACC_PAY_DESC)) AND ((@IsNull_TOTAL_AMOUNT_USD = 1 AND [T"& _ 
                "OTAL_AMOUNT_USD] IS NULL) OR ([TOTAL_AMOUNT_USD] = @Original_TOTAL_AMOUNT_USD)) "& _ 
                "AND ((@IsNull_TOTAL_AMOUNT_KHR = 1 AND [TOTAL_AMOUNT_KHR] IS NULL) OR ([TOTAL_AM"& _ 
                "OUNT_KHR] = @Original_TOTAL_AMOUNT_KHR)) AND ((@IsNull_TOTAL_AMOUNT_THB = 1 AND "& _ 
                "[TOTAL_AMOUNT_THB] IS NULL) OR ([TOTAL_AMOUNT_THB] = @Original_TOTAL_AMOUNT_THB)"& _ 
                ") AND ((@IsNull_ACC_PAY_STATUS = 1 AND [ACC_PAY_STATUS] IS NULL) OR ([ACC_PAY_ST"& _ 
                "ATUS] = @Original_ACC_PAY_STATUS)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_N"& _ 
                "O, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORDER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOU"& _ 
                "NT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, ACC_PAY_STATUS FROM ACC_PAYABLE WHER"& _ 
                "E (ACC_PAY_ID = @ACC_PAY_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE_ORDER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PURCHASE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_REFERREN_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATE_ORDER", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATE_ORDER", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_DESC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, D"& _ 
                "ATE_ORDER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, ACC_PAY_STATUS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            ACC_PAYAB"& _ 
                "LE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (DATE_ORDER BETWEEN @DFrom AND @DTo) AND (ACC_PAY_STATUS = @ACC"& _ 
                "_PAY_STATUS)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE DATE_ORDER BETWEEN @DFrom AND @D"& _ 
                "TO"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTO", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE DATE_ORDER BETWEEN @DForm AND @D"& _ 
                "To AND ACC_PAY_STATUS=@ACC_PAY_STATUS AND SUPPLIER_NO=@SUPPLIER_NO"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DForm", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE PURCHASE_NO=@PURCHASE_NO"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE REFERREN_NO=@REFERREN_NO"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORD"& _ 
                "ER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_"& _ 
                "THB, ACC_PAY_STATUS FROM dbo.ACC_PAYABLE WHERE ACC_PAY_STATUS=@ACC_PAY_STATUS"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT MAX(ACC_PAY_ID) FROM ACC_PAYABLE"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "INSERT INTO [dbo].[ACC_PAYABLE] ([PURCHASE_NO], [REFERREN_NO], [SUPPLIER_NO], [SU"& _ 
                "PPLIER_NAME], [DATE_ORDER], [CREATE_DATE], [ACC_PAY_DESC], [TOTAL_AMOUNT_USD], ["& _ 
                "TOTAL_AMOUNT_KHR], [TOTAL_AMOUNT_THB], [ACC_PAY_STATUS]) VALUES (@PURCHASE_NO, @"& _ 
                "REFERREN_NO, @SUPPLIER_NO, @SUPPLIER_NAME, @DATE_ORDER, @CREATE_DATE, @ACC_PAY_D"& _ 
                "ESC, @TOTAL_AMOUNT_USD, @TOTAL_AMOUNT_KHR, @TOTAL_AMOUNT_THB, @ACC_PAY_STATUS);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PURCHASE_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PURCHASE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 9, Global.System.Data.ParameterDirection.Input, 18, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE_ORDER", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_ORDER", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_DESC", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_USD", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_KHR", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_KHR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_AMOUNT_THB", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "TOTAL_AMOUNT_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "UPDATE [dbo].[ACC_PAYABLE] SET [ACC_PAY_STATUS] = @ACC_PAY_STATUS WHERE (([ACC_PA"& _ 
                "Y_ID] = @Original_ACC_PAY_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAccountPayable() As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAccDateToDateWithStatus(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAccDateToDateWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAccPayable(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTO As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTO.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAccPayable(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTO As Global.System.Nullable(Of Date)) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTO.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAccWithSupplier(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal DForm As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DForm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DForm.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAccWithSupplier(ByVal DForm As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal)) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DForm.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DForm.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByPurchaseOrder(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PURCHASE_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByPurchaseOrder(ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal)) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PURCHASE_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByReferrentNo(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal REFERREN_NO As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (REFERREN_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REFERREN_NO,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByReferrentNo(ByVal REFERREN_NO As String) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (REFERREN_NO Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(REFERREN_NO,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByStatusPay(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable, ByVal ACC_PAY_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByStatusPay(ByVal ACC_PAY_STATUS As String) As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSACCOUNTPAYABLE) As Integer
            Return Me.Adapter.Update(dataSet, "ACC_PAYABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_PAY_ID As Decimal, ByVal Original_PURCHASE_NO As Global.System.Nullable(Of Decimal), ByVal Original_REFERREN_NO As String, ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal Original_SUPPLIER_NAME As String, ByVal Original_DATE_ORDER As Global.System.Nullable(Of Date), ByVal Original_CREATE_DATE As Global.System.Nullable(Of Date), ByVal Original_ACC_PAY_DESC As String, ByVal Original_TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal), ByVal Original_ACC_PAY_STATUS As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_PAY_ID,Decimal)
            If (Original_PURCHASE_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERREN_NO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_REFERREN_NO,String)
            End If
            If (Original_SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SUPPLIER_NAME,String)
            End If
            If (Original_DATE_ORDER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DATE_ORDER.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_PAY_DESC Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ACC_PAY_DESC,String)
            End If
            If (Original_TOTAL_AMOUNT_USD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TOTAL_AMOUNT_USD.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_KHR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_TOTAL_AMOUNT_KHR.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_THB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_TOTAL_AMOUNT_THB.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_ACC_PAY_STATUS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal), ByVal REFERREN_NO As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal SUPPLIER_NAME As String, ByVal DATE_ORDER As Global.System.Nullable(Of Date), ByVal CREATE_DATE As Global.System.Nullable(Of Date), ByVal ACC_PAY_DESC As String, ByVal TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal), ByVal TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal), ByVal ACC_PAY_STATUS As String) As Integer
            If (PURCHASE_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (REFERREN_NO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(REFERREN_NO,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SUPPLIER_NAME,String)
            End If
            If (DATE_ORDER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DATE_ORDER.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CREATE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_DESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ACC_PAY_DESC,String)
            End If
            If (TOTAL_AMOUNT_USD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TOTAL_AMOUNT_USD.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_KHR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TOTAL_AMOUNT_KHR.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_THB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TOTAL_AMOUNT_THB.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal REFERREN_NO As String,  _
                    ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER_NAME As String,  _
                    ByVal DATE_ORDER As Global.System.Nullable(Of Date),  _
                    ByVal CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal ACC_PAY_DESC As String,  _
                    ByVal TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal),  _
                    ByVal ACC_PAY_STATUS As String,  _
                    ByVal Original_ACC_PAY_ID As Decimal,  _
                    ByVal Original_PURCHASE_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_REFERREN_NO As String,  _
                    ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER_NAME As String,  _
                    ByVal Original_DATE_ORDER As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_ACC_PAY_DESC As String,  _
                    ByVal Original_TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ACC_PAY_STATUS As String,  _
                    ByVal ACC_PAY_ID As Decimal) As Integer
            If (PURCHASE_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (REFERREN_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(REFERREN_NO,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SUPPLIER_NAME,String)
            End If
            If (DATE_ORDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DATE_ORDER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ACC_PAY_DESC,String)
            End If
            If (TOTAL_AMOUNT_USD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TOTAL_AMOUNT_USD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_KHR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TOTAL_AMOUNT_KHR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_THB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(TOTAL_AMOUNT_THB.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ACC_PAY_STATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ACC_PAY_ID,Decimal)
            If (Original_PURCHASE_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_PURCHASE_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_REFERREN_NO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_REFERREN_NO,String)
            End If
            If (Original_SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_SUPPLIER_NAME,String)
            End If
            If (Original_DATE_ORDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_DATE_ORDER.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_CREATE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_PAY_DESC Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ACC_PAY_DESC,String)
            End If
            If (Original_TOTAL_AMOUNT_USD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_TOTAL_AMOUNT_USD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_KHR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_TOTAL_AMOUNT_KHR.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_AMOUNT_THB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_TOTAL_AMOUNT_THB.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_ACC_PAY_STATUS,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ACC_PAY_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal REFERREN_NO As String,  _
                    ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER_NAME As String,  _
                    ByVal DATE_ORDER As Global.System.Nullable(Of Date),  _
                    ByVal CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal ACC_PAY_DESC As String,  _
                    ByVal TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal),  _
                    ByVal ACC_PAY_STATUS As String,  _
                    ByVal Original_ACC_PAY_ID As Decimal,  _
                    ByVal Original_PURCHASE_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_REFERREN_NO As String,  _
                    ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER_NAME As String,  _
                    ByVal Original_DATE_ORDER As Global.System.Nullable(Of Date),  _
                    ByVal Original_CREATE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_ACC_PAY_DESC As String,  _
                    ByVal Original_TOTAL_AMOUNT_USD As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_AMOUNT_THB As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ACC_PAY_STATUS As String) As Integer
            Return Me.Update(PURCHASE_NO, REFERREN_NO, SUPPLIER_NO, SUPPLIER_NAME, DATE_ORDER, CREATE_DATE, ACC_PAY_DESC, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, ACC_PAY_STATUS, Original_ACC_PAY_ID, Original_PURCHASE_NO, Original_REFERREN_NO, Original_SUPPLIER_NO, Original_SUPPLIER_NAME, Original_DATE_ORDER, Original_CREATE_DATE, Original_ACC_PAY_DESC, Original_TOTAL_AMOUNT_USD, Original_TOTAL_AMOUNT_KHR, Original_TOTAL_AMOUNT_THB, Original_ACC_PAY_STATUS, Original_ACC_PAY_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxAccPayable() As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewAccountPayable(ByVal PURCHASE_NO As Global.System.Nullable(Of Decimal), ByVal REFERREN_NO As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal SUPPLIER_NAME As String, ByVal DATE_ORDER As Global.System.Nullable(Of Date), ByVal CREATE_DATE As Global.System.Nullable(Of Date), ByVal ACC_PAY_DESC As String, ByVal TOTAL_AMOUNT_USD As Global.System.Nullable(Of Double), ByVal TOTAL_AMOUNT_KHR As Global.System.Nullable(Of Double), ByVal TOTAL_AMOUNT_THB As Global.System.Nullable(Of Double), ByVal ACC_PAY_STATUS As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            If (PURCHASE_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(PURCHASE_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (REFERREN_NO Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(REFERREN_NO,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                command.Parameters(2).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NAME Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(SUPPLIER_NAME,String)
            End If
            If (DATE_ORDER.HasValue = true) Then
                command.Parameters(4).Value = CType(DATE_ORDER.Value,Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE.HasValue = true) Then
                command.Parameters(5).Value = CType(CREATE_DATE.Value,Date)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_DESC Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(ACC_PAY_DESC,String)
            End If
            If (TOTAL_AMOUNT_USD.HasValue = true) Then
                command.Parameters(7).Value = CType(TOTAL_AMOUNT_USD.Value,Double)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_KHR.HasValue = true) Then
                command.Parameters(8).Value = CType(TOTAL_AMOUNT_KHR.Value,Double)
            Else
                command.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_AMOUNT_THB.HasValue = true) Then
                command.Parameters(9).Value = CType(TOTAL_AMOUNT_THB.Value,Double)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateAccountPayable(ByVal ACC_PAY_STATUS As String, ByVal Original_ACC_PAY_ID As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            If (ACC_PAY_STATUS Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ACC_PAY_STATUS,String)
            End If
            command.Parameters(1).Value = CType(Original_ACC_PAY_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_PAY_ABLE_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_PAY_ABLE_DETAIL"
            tableMapping.ColumnMappings.Add("ACC_PAY_DETAIL_ID", "ACC_PAY_DETAIL_ID")
            tableMapping.ColumnMappings.Add("ACC_PAY_ID", "ACC_PAY_ID")
            tableMapping.ColumnMappings.Add("PAY_DATE", "PAY_DATE")
            tableMapping.ColumnMappings.Add("PAID_USD", "PAID_USD")
            tableMapping.ColumnMappings.Add("PAID_KHT", "PAID_KHT")
            tableMapping.ColumnMappings.Add("PAID_THB", "PAID_THB")
            tableMapping.ColumnMappings.Add("PAID_NOTE", "PAID_NOTE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ACC_PAY_ABLE_DETAIL] WHERE (([ACC_PAY_DETAIL_ID] = @Original_ACC_PAY"& _ 
                "_DETAIL_ID) AND ((@IsNull_ACC_PAY_ID = 1 AND [ACC_PAY_ID] IS NULL) OR ([ACC_PAY_"& _ 
                "ID] = @Original_ACC_PAY_ID)) AND ((@IsNull_PAY_DATE = 1 AND [PAY_DATE] IS NULL) "& _ 
                "OR ([PAY_DATE] = @Original_PAY_DATE)) AND ((@IsNull_PAID_USD = 1 AND [PAID_USD] "& _ 
                "IS NULL) OR ([PAID_USD] = @Original_PAID_USD)) AND ((@IsNull_PAID_KHT = 1 AND [P"& _ 
                "AID_KHT] IS NULL) OR ([PAID_KHT] = @Original_PAID_KHT)) AND ((@IsNull_PAID_THB ="& _ 
                " 1 AND [PAID_THB] IS NULL) OR ([PAID_THB] = @Original_PAID_THB)) AND ((@IsNull_P"& _ 
                "AID_NOTE = 1 AND [PAID_NOTE] IS NULL) OR ([PAID_NOTE] = @Original_PAID_NOTE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAY_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_USD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_USD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_USD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_KHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_KHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_KHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_KHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_THB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_THB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_THB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ACC_PAY_ABLE_DETAIL] ([ACC_PAY_ID], [PAY_DATE], [PAID_USD], [PAID_KH"& _ 
                "T], [PAID_THB], [PAID_NOTE]) VALUES (@ACC_PAY_ID, @PAY_DATE, @PAID_USD, @PAID_KH"& _ 
                "T, @PAID_THB, @PAID_NOTE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, PAY_DATE, PAID"& _ 
                "_USD, PAID_KHT, PAID_THB, PAID_NOTE FROM ACC_PAY_ABLE_DETAIL WHERE (ACC_PAY_DETA"& _ 
                "IL_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_KHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_KHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ACC_PAY_ABLE_DETAIL] SET [ACC_PAY_ID] = @ACC_PAY_ID, [PAY_DATE] = @PAY_DA"& _ 
                "TE, [PAID_USD] = @PAID_USD, [PAID_KHT] = @PAID_KHT, [PAID_THB] = @PAID_THB, [PAI"& _ 
                "D_NOTE] = @PAID_NOTE WHERE (([ACC_PAY_DETAIL_ID] = @Original_ACC_PAY_DETAIL_ID) "& _ 
                "AND ((@IsNull_ACC_PAY_ID = 1 AND [ACC_PAY_ID] IS NULL) OR ([ACC_PAY_ID] = @Origi"& _ 
                "nal_ACC_PAY_ID)) AND ((@IsNull_PAY_DATE = 1 AND [PAY_DATE] IS NULL) OR ([PAY_DAT"& _ 
                "E] = @Original_PAY_DATE)) AND ((@IsNull_PAID_USD = 1 AND [PAID_USD] IS NULL) OR "& _ 
                "([PAID_USD] = @Original_PAID_USD)) AND ((@IsNull_PAID_KHT = 1 AND [PAID_KHT] IS "& _ 
                "NULL) OR ([PAID_KHT] = @Original_PAID_KHT)) AND ((@IsNull_PAID_THB = 1 AND [PAID"& _ 
                "_THB] IS NULL) OR ([PAID_THB] = @Original_PAID_THB)) AND ((@IsNull_PAID_NOTE = 1"& _ 
                " AND [PAID_NOTE] IS NULL) OR ([PAID_NOTE] = @Original_PAID_NOTE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACC_"& _ 
                "PAY_DETAIL_ID, ACC_PAY_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAID_NOTE FRO"& _ 
                "M ACC_PAY_ABLE_DETAIL WHERE (ACC_PAY_DETAIL_ID = @ACC_PAY_DETAIL_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_KHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_KHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACC_PAY_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAY_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAY_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_USD", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_USD", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_USD", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_USD", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_KHT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_KHT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_KHT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_KHT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_THB", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_THB", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_THB", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PAID_THB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAID_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAID_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_DETAIL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAI"& _ 
                "D_NOTE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAY_ABLE_DETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [ACC_PAY_ABLE_DETAIL] WHERE (([ACC_PAY_DETAIL_ID] = @Original_ACC_PAY"& _ 
                "_DETAIL_ID))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACC_PAY_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAI"& _ 
                "D_NOTE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAY_ABLE_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ACC_PAY_ID=@ACC_PAY_ID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO ACC_PAY_ABLE_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (ACC_PAY_ID, PAY_DATE, PAID_US"& _ 
                "D, PAID_KHT, PAID_THB, PAID_NOTE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@ACC_PAY_ID,@PAY_DATE,@PAID_USD,@PAID"& _ 
                "_KHT,@PAID_THB,@PAID_NOTE); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ACC_PAY_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_USD", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "PAID_USD", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_KHT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "PAID_KHT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_THB", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "PAID_THB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAID_NOTE", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PAID_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable = New DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable, ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByAccountPayID(ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal)) As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable = New DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAY_ABLE_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSACCOUNTPAYABLE) As Integer
            Return Me.Adapter.Update(dataSet, "ACC_PAY_ABLE_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACC_PAY_DETAIL_ID As Decimal, ByVal Original_ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal Original_PAY_DATE As Global.System.Nullable(Of Date), ByVal Original_PAID_USD As Global.System.Nullable(Of Decimal), ByVal Original_PAID_KHT As Global.System.Nullable(Of Decimal), ByVal Original_PAID_THB As Global.System.Nullable(Of Decimal), ByVal Original_PAID_NOTE As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACC_PAY_DETAIL_ID,Decimal)
            If (Original_ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PAY_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PAY_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_USD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PAID_USD.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_KHT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PAID_KHT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_THB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PAID_THB.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PAID_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal PAY_DATE As Global.System.Nullable(Of Date), ByVal PAID_USD As Global.System.Nullable(Of Decimal), ByVal PAID_KHT As Global.System.Nullable(Of Decimal), ByVal PAID_THB As Global.System.Nullable(Of Decimal), ByVal PAID_NOTE As String) As Integer
            If (ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PAY_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PAID_USD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PAID_USD.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PAID_KHT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PAID_KHT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAID_THB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PAID_THB.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAID_NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PAID_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal PAY_DATE As Global.System.Nullable(Of Date), ByVal PAID_USD As Global.System.Nullable(Of Decimal), ByVal PAID_KHT As Global.System.Nullable(Of Decimal), ByVal PAID_THB As Global.System.Nullable(Of Decimal), ByVal PAID_NOTE As String, ByVal Original_ACC_PAY_DETAIL_ID As Decimal, ByVal Original_ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal Original_PAY_DATE As Global.System.Nullable(Of Date), ByVal Original_PAID_USD As Global.System.Nullable(Of Decimal), ByVal Original_PAID_KHT As Global.System.Nullable(Of Decimal), ByVal Original_PAID_THB As Global.System.Nullable(Of Decimal), ByVal Original_PAID_NOTE As String, ByVal ACC_PAY_DETAIL_ID As Decimal) As Integer
            If (ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PAY_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PAID_USD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PAID_USD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PAID_KHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PAID_KHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAID_THB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PAID_THB.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAID_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PAID_NOTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ACC_PAY_DETAIL_ID,Decimal)
            If (Original_ACC_PAY_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ACC_PAY_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PAY_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PAY_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_USD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_PAID_USD.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_KHT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PAID_KHT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_THB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PAID_THB.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_PAID_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_PAID_NOTE,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ACC_PAY_DETAIL_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal PAY_DATE As Global.System.Nullable(Of Date), ByVal PAID_USD As Global.System.Nullable(Of Decimal), ByVal PAID_KHT As Global.System.Nullable(Of Decimal), ByVal PAID_THB As Global.System.Nullable(Of Decimal), ByVal PAID_NOTE As String, ByVal Original_ACC_PAY_DETAIL_ID As Decimal, ByVal Original_ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal Original_PAY_DATE As Global.System.Nullable(Of Date), ByVal Original_PAID_USD As Global.System.Nullable(Of Decimal), ByVal Original_PAID_KHT As Global.System.Nullable(Of Decimal), ByVal Original_PAID_THB As Global.System.Nullable(Of Decimal), ByVal Original_PAID_NOTE As String) As Integer
            Return Me.Update(ACC_PAY_ID, PAY_DATE, PAID_USD, PAID_KHT, PAID_THB, PAID_NOTE, Original_ACC_PAY_DETAIL_ID, Original_ACC_PAY_ID, Original_PAY_DATE, Original_PAID_USD, Original_PAID_KHT, Original_PAID_THB, Original_PAID_NOTE, Original_ACC_PAY_DETAIL_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteAccountPayable(ByVal Original_ACC_PAY_DETAIL_ID As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_ACC_PAY_DETAIL_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewPayable(ByVal ACC_PAY_ID As Global.System.Nullable(Of Decimal), ByVal PAY_DATE As Global.System.Nullable(Of Date), ByVal PAID_USD As Global.System.Nullable(Of Double), ByVal PAID_KHT As Global.System.Nullable(Of Double), ByVal PAID_THB As Global.System.Nullable(Of Double), ByVal PAID_NOTE As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ACC_PAY_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ACC_PAY_ID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_DATE.HasValue = true) Then
                command.Parameters(1).Value = CType(PAY_DATE.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PAID_USD.HasValue = true) Then
                command.Parameters(2).Value = CType(PAID_USD.Value,Double)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (PAID_KHT.HasValue = true) Then
                command.Parameters(3).Value = CType(PAID_KHT.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAID_THB.HasValue = true) Then
                command.Parameters(4).Value = CType(PAID_THB.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAID_NOTE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(PAID_NOTE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_PAYABLE_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_PAYABLE_VIEW"
            tableMapping.ColumnMappings.Add("SUPP_ID", "SUPP_ID")
            tableMapping.ColumnMappings.Add("SUPP_NAME", "SUPP_NAME")
            tableMapping.ColumnMappings.Add("SUPP_GENDER", "SUPP_GENDER")
            tableMapping.ColumnMappings.Add("SUPP_ADDRESS", "SUPP_ADDRESS")
            tableMapping.ColumnMappings.Add("SUPP_EMAIL", "SUPP_EMAIL")
            tableMapping.ColumnMappings.Add("ACC_PAY_ID", "ACC_PAY_ID")
            tableMapping.ColumnMappings.Add("PURCHASE_NO", "PURCHASE_NO")
            tableMapping.ColumnMappings.Add("REFERREN_NO", "REFERREN_NO")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_USD", "TOTAL_AMOUNT_USD")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_KHR", "TOTAL_AMOUNT_KHR")
            tableMapping.ColumnMappings.Add("TOTAL_AMOUNT_THB", "TOTAL_AMOUNT_THB")
            tableMapping.ColumnMappings.Add("ACC_PAY_STATUS", "ACC_PAY_STATUS")
            tableMapping.ColumnMappings.Add("ACC_PAY_DETAIL_ID", "ACC_PAY_DETAIL_ID")
            tableMapping.ColumnMappings.Add("PAY_DATE", "PAY_DATE")
            tableMapping.ColumnMappings.Add("PAID_USD", "PAID_USD")
            tableMapping.ColumnMappings.Add("PAID_KHT", "PAID_KHT")
            tableMapping.ColumnMappings.Add("PAID_THB", "PAID_THB")
            tableMapping.ColumnMappings.Add("PAID_NOTE", "PAID_NOTE")
            tableMapping.ColumnMappings.Add("CREATE_DATE", "CREATE_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SUPP_ID, SUPP_NAME, SUPP_GENDER, SUPP_ADDRESS, SUPP_EMAIL, ACC_PAY_ID, PUR"& _ 
                "CHASE_NO, REFERREN_NO, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  T"& _ 
                "OTAL_AMOUNT_THB, ACC_PAY_STATUS, ACC_PAY_DETAIL_ID, PAY_DATE, PAID_USD, PAID_KHT"& _ 
                ", PAID_THB, PAID_NOTE, CREATE_DATE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAYABLE_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, ACC_PAY_STATUS, CREATE_DATE, PAID_KHT, PAID"& _ 
                "_NOTE, PAID_THB, PAID_USD, PAY_DATE, PURCHASE_NO, REFERREN_NO, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "   SUPP_ADDRESS, SUPP_EMAIL, SUPP_GENDER, SUPP_ID, SUPP_NAME, TOTAL_AMOUNT_KHR, "& _ 
                "TOTAL_AMOUNT_THB, TOTAL_AMOUNT_USD"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (CREATE_DA"& _ 
                "TE BETWEEN @DFrom AND @DTo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, ACC_PAY_STATUS, CREATE_DATE, PAID_KHT, PAID"& _ 
                "_NOTE, PAID_THB, PAID_USD, PAY_DATE, PURCHASE_NO, REFERREN_NO, SUPP_ADDRESS, SUP"& _ 
                "P_EMAIL, SUPP_GENDER, SUPP_ID, SUPP_NAME, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, TO"& _ 
                "TAL_AMOUNT_USD FROM ACC_PAYABLE_VIEW WHERE (ACC_PAY_STATUS = @ACC_PAY_STATUS) AN"& _ 
                "D (CREATE_DATE BETWEEN @DFROM AND @DTo) AND (SUPP_ID = @SUPP_ID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFROM", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPP_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, ACC_PAY_STATUS, CREATE_DATE, PAID_KHT, PAID"& _ 
                "_NOTE, PAID_THB, PAID_USD, PAY_DATE, PURCHASE_NO, REFERREN_NO, SUPP_ADDRESS, SUP"& _ 
                "P_EMAIL, SUPP_GENDER, SUPP_ID, SUPP_NAME, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, TO"& _ 
                "TAL_AMOUNT_USD FROM ACC_PAYABLE_VIEW WHERE (CREATE_DATE BETWEEN @DFROM AND @DTo)"& _ 
                " AND (SUPP_ID = @SUPP_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFROM", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPP_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, ACC_PAY_STATUS, CREATE_DATE, PAID_KHT, PAID"& _ 
                "_NOTE, PAID_THB, PAID_USD, PAY_DATE, PURCHASE_NO, REFERREN_NO, SUPP_ADDRESS, SUP"& _ 
                "P_EMAIL, SUPP_GENDER, SUPP_ID, SUPP_NAME, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, TO"& _ 
                "TAL_AMOUNT_USD FROM ACC_PAYABLE_VIEW WHERE (CREATE_DATE BETWEEN @DFrom AND @DTo)"& _ 
                " AND (ACC_PAY_STATUS = @ACC_PAY_STATUS)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT ACC_PAY_DETAIL_ID, ACC_PAY_ID, ACC_PAY_STATUS, CREATE_DATE, PAID_KHT, PAID"& _ 
                "_NOTE, PAID_THB, PAID_USD, PAY_DATE, PURCHASE_NO, REFERREN_NO, SUPP_ADDRESS, SUP"& _ 
                "P_EMAIL, SUPP_GENDER, SUPP_ID, SUPP_NAME, TOTAL_AMOUNT_KHR, TOTAL_AMOUNT_THB, TO"& _ 
                "TAL_AMOUNT_USD FROM ACC_PAYABLE_VIEW WHERE (SUPP_ID = @SUPP_ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPP_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable, ByVal ACC_PAY_STATUS As String, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal SUPP_ID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPP_ID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithSupplier(ByVal ACC_PAY_STATUS As String, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal SUPP_ID As Long) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPP_ID,Long)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal SUPP_ID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUPP_ID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllPaidWithSupplier(ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal SUPP_ID As Long) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(SUPP_ID,Long)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectBySupplierID(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable, ByVal SUPP_ID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SUPP_ID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectBySupplierID(ByVal SUPP_ID As Long) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SUPP_ID,Long)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_PAYABLE_VIEW1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_PAYABLE_VIEW1"
            tableMapping.ColumnMappings.Add("supp_id", "supp_id")
            tableMapping.ColumnMappings.Add("supp_name", "supp_name")
            tableMapping.ColumnMappings.Add("acc_pay_id", "acc_pay_id")
            tableMapping.ColumnMappings.Add("purchase_no", "purchase_no")
            tableMapping.ColumnMappings.Add("referren_no", "referren_no")
            tableMapping.ColumnMappings.Add("create_date", "create_date")
            tableMapping.ColumnMappings.Add("ACC_PAY_STATUS", "ACC_PAY_STATUS")
            tableMapping.ColumnMappings.Add("Total_Amount_USD", "Total_Amount_USD")
            tableMapping.ColumnMappings.Add("Total_amount_KHR", "Total_amount_KHR")
            tableMapping.ColumnMappings.Add("Total_amount_thb", "Total_amount_thb")
            tableMapping.ColumnMappings.Add("PaidUSD", "PaidUSD")
            tableMapping.ColumnMappings.Add("PAIDKHR", "PAIDKHR")
            tableMapping.ColumnMappings.Add("PAIDTHB", "PAIDTHB")
            tableMapping.ColumnMappings.Add("REMAIN_USD", "REMAIN_USD")
            tableMapping.ColumnMappings.Add("REMAIN_KHR", "REMAIN_KHR")
            tableMapping.ColumnMappings.Add("REMAIN_THB", "REMAIN_THB")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select supp_id,supp_name,acc_pay_id,purchase_no,referren_no,create_date,ACC_PAY_S"& _ 
                "TATUS,Total_Amount_USD,Total_amount_KHR,Total_amount_thb,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(paid_usd,0"& _ 
                ")) as PaidUSD,sum(isnull(paid_kht,0)) as PAIDKHR ,SUM(isnull(Paid_THb,0)) AS PAI"& _ 
                "DTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_Amount_USD- sum(isnull(paid_usd,0))) as REMAIN_USD,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount"& _ 
                "_KHR-sum(isnull(paid_kht,0))) as REMAIN_KHR,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount_thb-SUM(isnull(Paid_"& _ 
                "THb,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by supp_id,supp_name,acc_pa"& _ 
                "y_id,purchase_no,referren_no,create_date,ACC_PAY_STATUS,Total_Amount_USD,Total_a"& _ 
                "mount_KHR,Total_amount_thb"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "select supp_id,supp_name,acc_pay_id,purchase_no,referren_no,create_date,ACC_PAY_S"& _ 
                "TATUS,Total_Amount_USD,Total_amount_KHR,Total_amount_thb,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(paid_usd,0"& _ 
                ")) as PaidUSD,sum(isnull(paid_kht,0)) as PAIDKHR ,SUM(isnull(Paid_THb,0)) AS PAI"& _ 
                "DTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_Amount_USD- sum(isnull(paid_usd,0))) as REMAIN_USD,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount"& _ 
                "_KHR-sum(isnull(paid_kht,0))) as REMAIN_KHR,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount_thb-SUM(isnull(Paid_"& _ 
                "THb,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(supp_id=@supp_id) AND (c"& _ 
                "reate_date BETWEEN @DFROM AND @DTo) AND (ACC_PAY_STATUS=@ACC_PAY_STATUS)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group "& _ 
                "by supp_id,supp_name,acc_pay_id,purchase_no,referren_no,create_date,ACC_PAY_STAT"& _ 
                "US,Total_Amount_USD,Total_amount_KHR,Total_amount_thb"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supp_id", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFROM", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT SUPP_ID, SUPP_NAME, ACC_PAY_ID, PURCHASE_NO, REFERREN_NO, CREATE_DATE, ACC"& _ 
                "_PAY_STATUS, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUN"& _ 
                "T_THB, SUM(ISNULL(PAID_USD, 0)) AS PaidUSD, SUM(ISNULL(PAID_KHT, 0)) AS PAIDKHR,"& _ 
                " SUM(ISNULL(PAID_THB, 0)) AS PAIDTHB, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUNT_USD - SUM"& _ 
                "(ISNULL(PAID_USD, 0)) AS REMAIN_USD, TOTAL_AMOUNT_KHR - SUM(ISNULL(PAID_KHT, 0))"& _ 
                " AS REMAIN_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUNT_THB - SUM(ISNULL(PAID_THB, 0)) "& _ 
                "AS REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (CREATE_DATE BETWEEN @DFROM AND"& _ 
                " @DTo) AND (ACC_PAY_STATUS = @ACC_PAY_STATUS)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY SUPP_ID, SUPP_NAME, ACC_"& _ 
                "PAY_ID, PURCHASE_NO, REFERREN_NO, CREATE_DATE, ACC_PAY_STATUS, TOTAL_AMOUNT_USD,"& _ 
                " TOTAL_AMOUNT_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUNT_THB"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFROM", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACC_PAY_STATUS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ACC_PAY_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "select supp_id,supp_name,acc_pay_id,purchase_no,referren_no,create_date,ACC_PAY_S"& _ 
                "TATUS,Total_Amount_USD,Total_amount_KHR,Total_amount_thb,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(paid_usd,0"& _ 
                ")) as PaidUSD,sum(isnull(paid_kht,0)) as PAIDKHR ,SUM(isnull(Paid_THb,0)) AS PAI"& _ 
                "DTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_Amount_USD- sum(isnull(paid_usd,0))) as REMAIN_USD,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount"& _ 
                "_KHR-sum(isnull(paid_kht,0))) as REMAIN_KHR,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(Total_amount_thb-SUM(isnull(Paid_"& _ 
                "THb,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(supp_id=@supp_id) AND (cr"& _ 
                "eate_date BETWEEN @DFROM AND @DTo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by supp_id,supp_name,acc_pay_id,purcha"& _ 
                "se_no,referren_no,create_date,ACC_PAY_STATUS,Total_Amount_USD,Total_amount_KHR,T"& _ 
                "otal_amount_thb"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supp_id", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFROM", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT SUPP_ID, SUPP_NAME, ACC_PAY_ID, PURCHASE_NO, REFERREN_NO,create_date,  ACC"& _ 
                "_PAY_STATUS, TOTAL_AMOUNT_USD, TOTAL_AMOUNT_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUN"& _ 
                "T_THB, SUM(ISNULL(PAID_USD, 0)) AS PaidUSD, SUM(ISNULL(PAID_KHT, 0)) AS PAIDKHR,"& _ 
                " SUM(ISNULL(PAID_THB, 0)) AS PAIDTHB, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUNT_USD - SUM"& _ 
                "(ISNULL(PAID_USD, 0)) AS REMAIN_USD, TOTAL_AMOUNT_KHR - SUM(ISNULL(PAID_KHT, 0))"& _ 
                " AS REMAIN_KHR, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  TOTAL_AMOUNT_THB - SUM(ISNULL(PAID_THB, 0)) "& _ 
                "AS REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_PAYABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"--month(PAY_DATE)='8' and yea"& _ 
                "r(PAY_DATE)='2014'  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(PAY_DATE BETWEEN @DFrom AND @DTo)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY SUPP_ID, SUPP"& _ 
                "_NAME, ACC_PAY_ID, PURCHASE_NO, REFERREN_NO,create_date,  ACC_PAY_STATUS, TOTAL_"& _ 
                "AMOUNT_USD, TOTAL_AMOUNT_KHR,TOTAL_AMOUNT_THB"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable, ByVal supp_id As Long, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(supp_id,Long)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateToDaySupplierWithStatus(ByVal supp_id As Long, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(supp_id,Long)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateAllSupplyWithStatus(ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ACC_PAY_STATUS As String) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ACC_PAY_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ACC_PAY_STATUS,String)
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable, ByVal supp_id As Long, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(supp_id,Long)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByDateToDateSupplyAllStatus(ByVal supp_id As Long, ByVal DFROM As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(supp_id,Long)
            If (DFROM.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFROM.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectBySupplierID(ByVal dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByDateToDateSupplierWithAllStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable = New DSACCOUNTPAYABLE.ACC_PAYABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            tableMapping.ColumnMappings.Add("DETA_ID", "DETA_ID")
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("ORDE_QTY", "ORDE_QTY")
            tableMapping.ColumnMappings.Add("COST", "COST")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_D", "ORDE_PRICE_D")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_R", "ORDE_PRICE_R")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_B", "ORDE_PRICE_B")
            tableMapping.ColumnMappings.Add("RECEIVE_QTY", "RECEIVE_QTY")
            tableMapping.ColumnMappings.Add("IS_CURRENCY", "IS_CURRENCY")
            tableMapping.ColumnMappings.Add("PROMOTION_QTY", "PROMOTION_QTY")
            tableMapping.ColumnMappings.Add("UNIT_NAME_FREE", "UNIT_NAME_FREE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DETA_ID, ORDE_ID, ITEM_ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRIC"& _ 
                "E_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY, UNIT_N"& _ 
                "AME_FREE FROM dbo.PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSACCOUNTPAYABLE.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSACCOUNTPAYABLE.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSACCOUNTPAYABLE.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable = New DSACCOUNTPAYABLE.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aCC_PAYABLETableAdapter As ACC_PAYABLETableAdapter
        
        Private _aCC_PAY_ABLE_DETAILTableAdapter As ACC_PAY_ABLE_DETAILTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACC_PAYABLETableAdapter() As ACC_PAYABLETableAdapter
            Get
                Return Me._aCC_PAYABLETableAdapter
            End Get
            Set
                Me._aCC_PAYABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACC_PAY_ABLE_DETAILTableAdapter() As ACC_PAY_ABLE_DETAILTableAdapter
            Get
                Return Me._aCC_PAY_ABLE_DETAILTableAdapter
            End Get
            Set
                Me._aCC_PAY_ABLE_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aCC_PAYABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCC_PAYABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCC_PAYABLETableAdapter.Connection
                End If
                If ((Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSACCOUNTPAYABLE, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACC_PAYABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCC_PAYABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACC_PAY_ABLE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCC_PAY_ABLE_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSACCOUNTPAYABLE, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACC_PAYABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCC_PAYABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACC_PAY_ABLE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCC_PAY_ABLE_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSACCOUNTPAYABLE, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACC_PAY_ABLE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCC_PAY_ABLE_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACC_PAYABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCC_PAYABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSACCOUNTPAYABLE) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aCC_PAYABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCC_PAYABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCC_PAYABLETableAdapter, Me._aCC_PAYABLETableAdapter.Connection)
                    Me._aCC_PAYABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCC_PAYABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCC_PAYABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCC_PAYABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCC_PAYABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCC_PAY_ABLE_DETAILTableAdapter, Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection)
                    Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCC_PAY_ABLE_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCC_PAY_ABLE_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCC_PAY_ABLE_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCC_PAY_ABLE_DETAILTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aCC_PAYABLETableAdapter) Is Nothing) Then
                    Me._aCC_PAYABLETableAdapter.Connection = CType(revertConnections(Me._aCC_PAYABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCC_PAYABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aCC_PAY_ABLE_DETAILTableAdapter) Is Nothing) Then
                    Me._aCC_PAY_ABLE_DETAILTableAdapter.Connection = CType(revertConnections(Me._aCC_PAY_ABLE_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCC_PAY_ABLE_DETAILTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
