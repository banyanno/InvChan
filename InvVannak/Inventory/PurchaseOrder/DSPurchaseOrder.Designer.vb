'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSPurchaseOrder"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSPurchaseOrder
    Inherits Global.System.Data.DataSet
    
    Private tableORDER_DETAILS_TEM As ORDER_DETAILS_TEMDataTable
    
    Private tableITEM_BALANCE As ITEM_BALANCEDataTable
    
    Private tableORDERS As ORDERSDataTable
    
    Private tableORDER_DETAILS As ORDER_DETAILSDataTable
    
    Private tablePURCAHSE_ORDER_MAIN_VIEW As PURCAHSE_ORDER_MAIN_VIEWDataTable
    
    Private tablePURCHASE_ORDER_MASTER_DETAIL_VIEW As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
    
    Private tablePURCHASE_ORDER_MASTER_VIEW As PURCHASE_ORDER_MASTER_VIEWDataTable
    
    Private tableITEM_COSTS As ITEM_COSTSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ORDER_DETAILS_TEM")) Is Nothing) Then
                MyBase.Tables.Add(New ORDER_DETAILS_TEMDataTable(ds.Tables("ORDER_DETAILS_TEM")))
            End If
            If (Not (ds.Tables("ITEM_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_BALANCEDataTable(ds.Tables("ITEM_BALANCE")))
            End If
            If (Not (ds.Tables("ORDERS")) Is Nothing) Then
                MyBase.Tables.Add(New ORDERSDataTable(ds.Tables("ORDERS")))
            End If
            If (Not (ds.Tables("ORDER_DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New ORDER_DETAILSDataTable(ds.Tables("ORDER_DETAILS")))
            End If
            If (Not (ds.Tables("PURCAHSE_ORDER_MAIN_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCAHSE_ORDER_MAIN_VIEWDataTable(ds.Tables("PURCAHSE_ORDER_MAIN_VIEW")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_VIEW")))
            End If
            If (Not (ds.Tables("ITEM_COSTS")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_COSTSDataTable(ds.Tables("ITEM_COSTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDER_DETAILS_TEM() As ORDER_DETAILS_TEMDataTable
        Get
            Return Me.tableORDER_DETAILS_TEM
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEM_BALANCE() As ITEM_BALANCEDataTable
        Get
            Return Me.tableITEM_BALANCE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDERS() As ORDERSDataTable
        Get
            Return Me.tableORDERS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ORDER_DETAILS() As ORDER_DETAILSDataTable
        Get
            Return Me.tableORDER_DETAILS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PURCAHSE_ORDER_MAIN_VIEW() As PURCAHSE_ORDER_MAIN_VIEWDataTable
        Get
            Return Me.tablePURCAHSE_ORDER_MAIN_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PURCHASE_ORDER_MASTER_DETAIL_VIEW() As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        Get
            Return Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PURCHASE_ORDER_MASTER_VIEW() As PURCHASE_ORDER_MASTER_VIEWDataTable
        Get
            Return Me.tablePURCHASE_ORDER_MASTER_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ITEM_COSTS() As ITEM_COSTSDataTable
        Get
            Return Me.tableITEM_COSTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSPurchaseOrder = CType(MyBase.Clone,DSPurchaseOrder)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ORDER_DETAILS_TEM")) Is Nothing) Then
                MyBase.Tables.Add(New ORDER_DETAILS_TEMDataTable(ds.Tables("ORDER_DETAILS_TEM")))
            End If
            If (Not (ds.Tables("ITEM_BALANCE")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_BALANCEDataTable(ds.Tables("ITEM_BALANCE")))
            End If
            If (Not (ds.Tables("ORDERS")) Is Nothing) Then
                MyBase.Tables.Add(New ORDERSDataTable(ds.Tables("ORDERS")))
            End If
            If (Not (ds.Tables("ORDER_DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New ORDER_DETAILSDataTable(ds.Tables("ORDER_DETAILS")))
            End If
            If (Not (ds.Tables("PURCAHSE_ORDER_MAIN_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCAHSE_ORDER_MAIN_VIEWDataTable(ds.Tables("PURCAHSE_ORDER_MAIN_VIEW")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW")))
            End If
            If (Not (ds.Tables("PURCHASE_ORDER_MASTER_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New PURCHASE_ORDER_MASTER_VIEWDataTable(ds.Tables("PURCHASE_ORDER_MASTER_VIEW")))
            End If
            If (Not (ds.Tables("ITEM_COSTS")) Is Nothing) Then
                MyBase.Tables.Add(New ITEM_COSTSDataTable(ds.Tables("ITEM_COSTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableORDER_DETAILS_TEM = CType(MyBase.Tables("ORDER_DETAILS_TEM"),ORDER_DETAILS_TEMDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDER_DETAILS_TEM) Is Nothing) Then
                Me.tableORDER_DETAILS_TEM.InitVars
            End If
        End If
        Me.tableITEM_BALANCE = CType(MyBase.Tables("ITEM_BALANCE"),ITEM_BALANCEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEM_BALANCE) Is Nothing) Then
                Me.tableITEM_BALANCE.InitVars
            End If
        End If
        Me.tableORDERS = CType(MyBase.Tables("ORDERS"),ORDERSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDERS) Is Nothing) Then
                Me.tableORDERS.InitVars
            End If
        End If
        Me.tableORDER_DETAILS = CType(MyBase.Tables("ORDER_DETAILS"),ORDER_DETAILSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableORDER_DETAILS) Is Nothing) Then
                Me.tableORDER_DETAILS.InitVars
            End If
        End If
        Me.tablePURCAHSE_ORDER_MAIN_VIEW = CType(MyBase.Tables("PURCAHSE_ORDER_MAIN_VIEW"),PURCAHSE_ORDER_MAIN_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePURCAHSE_ORDER_MAIN_VIEW) Is Nothing) Then
                Me.tablePURCAHSE_ORDER_MAIN_VIEW.InitVars
            End If
        End If
        Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = CType(MyBase.Tables("PURCHASE_ORDER_MASTER_DETAIL_VIEW"),PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW) Is Nothing) Then
                Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.InitVars
            End If
        End If
        Me.tablePURCHASE_ORDER_MASTER_VIEW = CType(MyBase.Tables("PURCHASE_ORDER_MASTER_VIEW"),PURCHASE_ORDER_MASTER_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePURCHASE_ORDER_MASTER_VIEW) Is Nothing) Then
                Me.tablePURCHASE_ORDER_MASTER_VIEW.InitVars
            End If
        End If
        Me.tableITEM_COSTS = CType(MyBase.Tables("ITEM_COSTS"),ITEM_COSTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableITEM_COSTS) Is Nothing) Then
                Me.tableITEM_COSTS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSPurchaseOrder"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSPurchaseOrder.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableORDER_DETAILS_TEM = New ORDER_DETAILS_TEMDataTable
        MyBase.Tables.Add(Me.tableORDER_DETAILS_TEM)
        Me.tableITEM_BALANCE = New ITEM_BALANCEDataTable
        MyBase.Tables.Add(Me.tableITEM_BALANCE)
        Me.tableORDERS = New ORDERSDataTable
        MyBase.Tables.Add(Me.tableORDERS)
        Me.tableORDER_DETAILS = New ORDER_DETAILSDataTable
        MyBase.Tables.Add(Me.tableORDER_DETAILS)
        Me.tablePURCAHSE_ORDER_MAIN_VIEW = New PURCAHSE_ORDER_MAIN_VIEWDataTable
        MyBase.Tables.Add(Me.tablePURCAHSE_ORDER_MAIN_VIEW)
        Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        MyBase.Tables.Add(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW)
        Me.tablePURCHASE_ORDER_MASTER_VIEW = New PURCHASE_ORDER_MASTER_VIEWDataTable
        MyBase.Tables.Add(Me.tablePURCHASE_ORDER_MASTER_VIEW)
        Me.tableITEM_COSTS = New ITEM_COSTSDataTable
        MyBase.Tables.Add(Me.tableITEM_COSTS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDER_DETAILS_TEM() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeITEM_BALANCE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDERS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeORDER_DETAILS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePURCAHSE_ORDER_MAIN_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePURCHASE_ORDER_MASTER_DETAIL_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePURCHASE_ORDER_MASTER_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeITEM_COSTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSPurchaseOrder = New DSPurchaseOrder
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ORDER_DETAILS_TEMRowChangeEventHandler(ByVal sender As Object, ByVal e As ORDER_DETAILS_TEMRowChangeEvent)
    
    Public Delegate Sub ITEM_BALANCERowChangeEventHandler(ByVal sender As Object, ByVal e As ITEM_BALANCERowChangeEvent)
    
    Public Delegate Sub ORDERSRowChangeEventHandler(ByVal sender As Object, ByVal e As ORDERSRowChangeEvent)
    
    Public Delegate Sub ORDER_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As ORDER_DETAILSRowChangeEvent)
    
    Public Delegate Sub PURCAHSE_ORDER_MAIN_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent)
    
    Public Delegate Sub PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent)
    
    Public Delegate Sub PURCHASE_ORDER_MASTER_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PURCHASE_ORDER_MASTER_VIEWRowChangeEvent)
    
    Public Delegate Sub ITEM_COSTSRowChangeEventHandler(ByVal sender As Object, ByVal e As ITEM_COSTSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDER_DETAILS_TEMDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDETA_ID As Global.System.Data.DataColumn
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnORDE_QTY As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_D As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_R As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_B As Global.System.Data.DataColumn
        
        Private columnORDER_QTY_PROM As Global.System.Data.DataColumn
        
        Private columnIS_CURRENCY As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME_FREE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDER_DETAILS_TEM"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_QTY_PROMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_QTY_PROM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAME_FREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME_FREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDER_DETAILS_TEMRow
            Get
                Return CType(Me.Rows(index),ORDER_DETAILS_TEMRow)
            End Get
        End Property
        
        Public Event ORDER_DETAILS_TEMRowChanging As ORDER_DETAILS_TEMRowChangeEventHandler
        
        Public Event ORDER_DETAILS_TEMRowChanged As ORDER_DETAILS_TEMRowChangeEventHandler
        
        Public Event ORDER_DETAILS_TEMRowDeleting As ORDER_DETAILS_TEMRowChangeEventHandler
        
        Public Event ORDER_DETAILS_TEMRowDeleted As ORDER_DETAILS_TEMRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDER_DETAILS_TEMRow(ByVal row As ORDER_DETAILS_TEMRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDER_DETAILS_TEMRow(ByVal ORDE_ID As Long, ByVal ITEM_ID As Integer, ByVal ORDE_QTY As Double, ByVal COST As Double, ByVal ORDE_PRICE_D As Double, ByVal ORDE_PRICE_R As Double, ByVal ITEM_NAME As String, ByVal UNIT_NAME As String, ByVal ORDE_PRICE_B As Double, ByVal ORDER_QTY_PROM As Double, ByVal IS_CURRENCY As String, ByVal UNIT_NAME_FREE As String) As ORDER_DETAILS_TEMRow
            Dim rowORDER_DETAILS_TEMRow As ORDER_DETAILS_TEMRow = CType(Me.NewRow,ORDER_DETAILS_TEMRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ORDE_ID, ITEM_ID, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ITEM_NAME, UNIT_NAME, ORDE_PRICE_B, ORDER_QTY_PROM, IS_CURRENCY, UNIT_NAME_FREE}
            rowORDER_DETAILS_TEMRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDER_DETAILS_TEMRow)
            Return rowORDER_DETAILS_TEMRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDETA_ID(ByVal DETA_ID As Long) As ORDER_DETAILS_TEMRow
            Return CType(Me.Rows.Find(New Object() {DETA_ID}),ORDER_DETAILS_TEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDER_DETAILS_TEMDataTable = CType(MyBase.Clone,ORDER_DETAILS_TEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDER_DETAILS_TEMDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDETA_ID = MyBase.Columns("DETA_ID")
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnORDE_QTY = MyBase.Columns("ORDE_QTY")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnORDE_PRICE_D = MyBase.Columns("ORDE_PRICE_D")
            Me.columnORDE_PRICE_R = MyBase.Columns("ORDE_PRICE_R")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnORDE_PRICE_B = MyBase.Columns("ORDE_PRICE_B")
            Me.columnORDER_QTY_PROM = MyBase.Columns("ORDER_QTY_PROM")
            Me.columnIS_CURRENCY = MyBase.Columns("IS_CURRENCY")
            Me.columnUNIT_NAME_FREE = MyBase.Columns("UNIT_NAME_FREE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDETA_ID = New Global.System.Data.DataColumn("DETA_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETA_ID)
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnORDE_QTY = New Global.System.Data.DataColumn("ORDE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_QTY)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnORDE_PRICE_D = New Global.System.Data.DataColumn("ORDE_PRICE_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_D)
            Me.columnORDE_PRICE_R = New Global.System.Data.DataColumn("ORDE_PRICE_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_R)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnORDE_PRICE_B = New Global.System.Data.DataColumn("ORDE_PRICE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_B)
            Me.columnORDER_QTY_PROM = New Global.System.Data.DataColumn("ORDER_QTY_PROM", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_QTY_PROM)
            Me.columnIS_CURRENCY = New Global.System.Data.DataColumn("IS_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CURRENCY)
            Me.columnUNIT_NAME_FREE = New Global.System.Data.DataColumn("UNIT_NAME_FREE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME_FREE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDETA_ID}, true))
            Me.columnDETA_ID.AutoIncrement = true
            Me.columnDETA_ID.AutoIncrementSeed = -1
            Me.columnDETA_ID.AutoIncrementStep = -1
            Me.columnDETA_ID.AllowDBNull = false
            Me.columnDETA_ID.ReadOnly = true
            Me.columnDETA_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 250
            Me.columnUNIT_NAME.MaxLength = 50
            Me.columnIS_CURRENCY.MaxLength = 50
            Me.columnUNIT_NAME_FREE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDER_DETAILS_TEMRow() As ORDER_DETAILS_TEMRow
            Return CType(Me.NewRow,ORDER_DETAILS_TEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDER_DETAILS_TEMRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDER_DETAILS_TEMRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDER_DETAILS_TEMRowChangedEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILS_TEMRowChanged(Me, New ORDER_DETAILS_TEMRowChangeEvent(CType(e.Row,ORDER_DETAILS_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDER_DETAILS_TEMRowChangingEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILS_TEMRowChanging(Me, New ORDER_DETAILS_TEMRowChangeEvent(CType(e.Row,ORDER_DETAILS_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDER_DETAILS_TEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILS_TEMRowDeleted(Me, New ORDER_DETAILS_TEMRowChangeEvent(CType(e.Row,ORDER_DETAILS_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDER_DETAILS_TEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILS_TEMRowDeleting(Me, New ORDER_DETAILS_TEMRowChangeEvent(CType(e.Row,ORDER_DETAILS_TEMRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDER_DETAILS_TEMRow(ByVal row As ORDER_DETAILS_TEMRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDER_DETAILS_TEMDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEM_BALANCEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSTORE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnUNIT_TYPE As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnRATIO_QTY As Global.System.Data.DataColumn
        
        Private columnBALANCE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ITEM_BALANCE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STORE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTORE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RATIO_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRATIO_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BALANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBALANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEM_BALANCERow
            Get
                Return CType(Me.Rows(index),ITEM_BALANCERow)
            End Get
        End Property
        
        Public Event ITEM_BALANCERowChanging As ITEM_BALANCERowChangeEventHandler
        
        Public Event ITEM_BALANCERowChanged As ITEM_BALANCERowChangeEventHandler
        
        Public Event ITEM_BALANCERowDeleting As ITEM_BALANCERowChangeEventHandler
        
        Public Event ITEM_BALANCERowDeleted As ITEM_BALANCERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddITEM_BALANCERow(ByVal row As ITEM_BALANCERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddITEM_BALANCERow(ByVal ITEM_ID As Integer, ByVal UNIT_TYPE As String, ByVal UNIT_NAME As String, ByVal RATIO_QTY As Integer, ByVal BALANCE As Integer) As ITEM_BALANCERow
            Dim rowITEM_BALANCERow As ITEM_BALANCERow = CType(Me.NewRow,ITEM_BALANCERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE}
            rowITEM_BALANCERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEM_BALANCERow)
            Return rowITEM_BALANCERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySTORE_ID(ByVal STORE_ID As Integer) As ITEM_BALANCERow
            Return CType(Me.Rows.Find(New Object() {STORE_ID}),ITEM_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEM_BALANCEDataTable = CType(MyBase.Clone,ITEM_BALANCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEM_BALANCEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSTORE_ID = MyBase.Columns("STORE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnUNIT_TYPE = MyBase.Columns("UNIT_TYPE")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnRATIO_QTY = MyBase.Columns("RATIO_QTY")
            Me.columnBALANCE = MyBase.Columns("BALANCE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSTORE_ID = New Global.System.Data.DataColumn("STORE_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTORE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnUNIT_TYPE = New Global.System.Data.DataColumn("UNIT_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_TYPE)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnRATIO_QTY = New Global.System.Data.DataColumn("RATIO_QTY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRATIO_QTY)
            Me.columnBALANCE = New Global.System.Data.DataColumn("BALANCE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBALANCE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSTORE_ID}, true))
            Me.columnSTORE_ID.AutoIncrement = true
            Me.columnSTORE_ID.AutoIncrementSeed = -1
            Me.columnSTORE_ID.AutoIncrementStep = -1
            Me.columnSTORE_ID.AllowDBNull = false
            Me.columnSTORE_ID.ReadOnly = true
            Me.columnSTORE_ID.Unique = true
            Me.columnUNIT_TYPE.MaxLength = 50
            Me.columnUNIT_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewITEM_BALANCERow() As ITEM_BALANCERow
            Return CType(Me.NewRow,ITEM_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEM_BALANCERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEM_BALANCERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEM_BALANCERowChangedEvent) Is Nothing) Then
                RaiseEvent ITEM_BALANCERowChanged(Me, New ITEM_BALANCERowChangeEvent(CType(e.Row,ITEM_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEM_BALANCERowChangingEvent) Is Nothing) Then
                RaiseEvent ITEM_BALANCERowChanging(Me, New ITEM_BALANCERowChangeEvent(CType(e.Row,ITEM_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEM_BALANCERowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEM_BALANCERowDeleted(Me, New ITEM_BALANCERowChangeEvent(CType(e.Row,ITEM_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEM_BALANCERowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEM_BALANCERowDeleting(Me, New ITEM_BALANCERowChangeEvent(CType(e.Row,ITEM_BALANCERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveITEM_BALANCERow(ByVal row As ITEM_BALANCERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEM_BALANCEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDERSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NO As Global.System.Data.DataColumn
        
        Private columnORDE_DATE As Global.System.Data.DataColumn
        
        Private columnTOTAL_R As Global.System.Data.DataColumn
        
        Private columnTOTAL_D As Global.System.Data.DataColumn
        
        Private columnTOTAL_B As Global.System.Data.DataColumn
        
        Private columnORDER_NOTE As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnORDE_STATUS As Global.System.Data.DataColumn
        
        Private columnYEARS As Global.System.Data.DataColumn
        
        Private columnSTATUS_PAY As Global.System.Data.DataColumn
        
        Private columnRECEIVED_DATE As Global.System.Data.DataColumn
        
        Private columnIS_DEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDERS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEARSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEARS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_PAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_PAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDERSRow
            Get
                Return CType(Me.Rows(index),ORDERSRow)
            End Get
        End Property
        
        Public Event ORDERSRowChanging As ORDERSRowChangeEventHandler
        
        Public Event ORDERSRowChanged As ORDERSRowChangeEventHandler
        
        Public Event ORDERSRowDeleting As ORDERSRowChangeEventHandler
        
        Public Event ORDERSRowDeleted As ORDERSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDERSRow(ByVal row As ORDERSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDERSRow(ByVal ORDER_NO As Decimal, ByVal SUPPLIER_NO As Decimal, ByVal ORDE_DATE As Date, ByVal TOTAL_R As Double, ByVal TOTAL_D As Double, ByVal TOTAL_B As Double, ByVal ORDER_NOTE As String, ByVal USER_ID As Integer, ByVal ORDE_STATUS As String, ByVal YEARS As Integer, ByVal STATUS_PAY As String, ByVal RECEIVED_DATE As Date, ByVal IS_DEL As Integer) As ORDERSRow
            Dim rowORDERSRow As ORDERSRow = CType(Me.NewRow,ORDERSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, RECEIVED_DATE, IS_DEL}
            rowORDERSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDERSRow)
            Return rowORDERSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDE_ID(ByVal ORDE_ID As Long) As ORDERSRow
            Return CType(Me.Rows.Find(New Object() {ORDE_ID}),ORDERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDERSDataTable = CType(MyBase.Clone,ORDERSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDERSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnSUPPLIER_NO = MyBase.Columns("SUPPLIER_NO")
            Me.columnORDE_DATE = MyBase.Columns("ORDE_DATE")
            Me.columnTOTAL_R = MyBase.Columns("TOTAL_R")
            Me.columnTOTAL_D = MyBase.Columns("TOTAL_D")
            Me.columnTOTAL_B = MyBase.Columns("TOTAL_B")
            Me.columnORDER_NOTE = MyBase.Columns("ORDER_NOTE")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnORDE_STATUS = MyBase.Columns("ORDE_STATUS")
            Me.columnYEARS = MyBase.Columns("YEARS")
            Me.columnSTATUS_PAY = MyBase.Columns("STATUS_PAY")
            Me.columnRECEIVED_DATE = MyBase.Columns("RECEIVED_DATE")
            Me.columnIS_DEL = MyBase.Columns("IS_DEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnSUPPLIER_NO = New Global.System.Data.DataColumn("SUPPLIER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NO)
            Me.columnORDE_DATE = New Global.System.Data.DataColumn("ORDE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_DATE)
            Me.columnTOTAL_R = New Global.System.Data.DataColumn("TOTAL_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_R)
            Me.columnTOTAL_D = New Global.System.Data.DataColumn("TOTAL_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_D)
            Me.columnTOTAL_B = New Global.System.Data.DataColumn("TOTAL_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_B)
            Me.columnORDER_NOTE = New Global.System.Data.DataColumn("ORDER_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NOTE)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnORDE_STATUS = New Global.System.Data.DataColumn("ORDE_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_STATUS)
            Me.columnYEARS = New Global.System.Data.DataColumn("YEARS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEARS)
            Me.columnSTATUS_PAY = New Global.System.Data.DataColumn("STATUS_PAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_PAY)
            Me.columnRECEIVED_DATE = New Global.System.Data.DataColumn("RECEIVED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_DATE)
            Me.columnIS_DEL = New Global.System.Data.DataColumn("IS_DEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDE_ID}, true))
            Me.columnORDE_ID.AutoIncrement = true
            Me.columnORDE_ID.AutoIncrementSeed = -1
            Me.columnORDE_ID.AutoIncrementStep = -1
            Me.columnORDE_ID.AllowDBNull = false
            Me.columnORDE_ID.ReadOnly = true
            Me.columnORDE_ID.Unique = true
            Me.columnORDER_NOTE.MaxLength = 150
            Me.columnORDE_STATUS.MaxLength = 50
            Me.columnSTATUS_PAY.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDERSRow() As ORDERSRow
            Return CType(Me.NewRow,ORDERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDERSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDERSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDERSRowChangedEvent) Is Nothing) Then
                RaiseEvent ORDERSRowChanged(Me, New ORDERSRowChangeEvent(CType(e.Row,ORDERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDERSRowChangingEvent) Is Nothing) Then
                RaiseEvent ORDERSRowChanging(Me, New ORDERSRowChangeEvent(CType(e.Row,ORDERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDERSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDERSRowDeleted(Me, New ORDERSRowChangeEvent(CType(e.Row,ORDERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDERSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDERSRowDeleting(Me, New ORDERSRowChangeEvent(CType(e.Row,ORDERSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDERSRow(ByVal row As ORDERSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDERSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ORDER_DETAILSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDETA_ID As Global.System.Data.DataColumn
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnORDE_QTY As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_D As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_R As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_B As Global.System.Data.DataColumn
        
        Private columnRECEIVE_QTY As Global.System.Data.DataColumn
        
        Private columnIS_CURRENCY As Global.System.Data.DataColumn
        
        Private columnPROMOTION_QTY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ORDER_DETAILS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROMOTION_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROMOTION_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ORDER_DETAILSRow
            Get
                Return CType(Me.Rows(index),ORDER_DETAILSRow)
            End Get
        End Property
        
        Public Event ORDER_DETAILSRowChanging As ORDER_DETAILSRowChangeEventHandler
        
        Public Event ORDER_DETAILSRowChanged As ORDER_DETAILSRowChangeEventHandler
        
        Public Event ORDER_DETAILSRowDeleting As ORDER_DETAILSRowChangeEventHandler
        
        Public Event ORDER_DETAILSRowDeleted As ORDER_DETAILSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddORDER_DETAILSRow(ByVal row As ORDER_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddORDER_DETAILSRow(ByVal ORDE_ID As Long, ByVal ITEM_ID As Integer, ByVal UNIT_NAME As String, ByVal ORDE_QTY As Double, ByVal COST As Double, ByVal ORDE_PRICE_D As Double, ByVal ORDE_PRICE_R As Double, ByVal ORDE_PRICE_B As Double, ByVal RECEIVE_QTY As Double, ByVal IS_CURRENCY As String, ByVal PROMOTION_QTY As Double) As ORDER_DETAILSRow
            Dim rowORDER_DETAILSRow As ORDER_DETAILSRow = CType(Me.NewRow,ORDER_DETAILSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ORDE_ID, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY}
            rowORDER_DETAILSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowORDER_DETAILSRow)
            Return rowORDER_DETAILSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDETA_ID(ByVal DETA_ID As Long) As ORDER_DETAILSRow
            Return CType(Me.Rows.Find(New Object() {DETA_ID}),ORDER_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ORDER_DETAILSDataTable = CType(MyBase.Clone,ORDER_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ORDER_DETAILSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDETA_ID = MyBase.Columns("DETA_ID")
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnORDE_QTY = MyBase.Columns("ORDE_QTY")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnORDE_PRICE_D = MyBase.Columns("ORDE_PRICE_D")
            Me.columnORDE_PRICE_R = MyBase.Columns("ORDE_PRICE_R")
            Me.columnORDE_PRICE_B = MyBase.Columns("ORDE_PRICE_B")
            Me.columnRECEIVE_QTY = MyBase.Columns("RECEIVE_QTY")
            Me.columnIS_CURRENCY = MyBase.Columns("IS_CURRENCY")
            Me.columnPROMOTION_QTY = MyBase.Columns("PROMOTION_QTY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDETA_ID = New Global.System.Data.DataColumn("DETA_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETA_ID)
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnORDE_QTY = New Global.System.Data.DataColumn("ORDE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_QTY)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnORDE_PRICE_D = New Global.System.Data.DataColumn("ORDE_PRICE_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_D)
            Me.columnORDE_PRICE_R = New Global.System.Data.DataColumn("ORDE_PRICE_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_R)
            Me.columnORDE_PRICE_B = New Global.System.Data.DataColumn("ORDE_PRICE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_B)
            Me.columnRECEIVE_QTY = New Global.System.Data.DataColumn("RECEIVE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_QTY)
            Me.columnIS_CURRENCY = New Global.System.Data.DataColumn("IS_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CURRENCY)
            Me.columnPROMOTION_QTY = New Global.System.Data.DataColumn("PROMOTION_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROMOTION_QTY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDETA_ID}, true))
            Me.columnDETA_ID.AutoIncrement = true
            Me.columnDETA_ID.AutoIncrementSeed = -1
            Me.columnDETA_ID.AutoIncrementStep = -1
            Me.columnDETA_ID.AllowDBNull = false
            Me.columnDETA_ID.ReadOnly = true
            Me.columnDETA_ID.Unique = true
            Me.columnUNIT_NAME.MaxLength = 50
            Me.columnIS_CURRENCY.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewORDER_DETAILSRow() As ORDER_DETAILSRow
            Return CType(Me.NewRow,ORDER_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ORDER_DETAILSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ORDER_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ORDER_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILSRowChanged(Me, New ORDER_DETAILSRowChangeEvent(CType(e.Row,ORDER_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ORDER_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILSRowChanging(Me, New ORDER_DETAILSRowChangeEvent(CType(e.Row,ORDER_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ORDER_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILSRowDeleted(Me, New ORDER_DETAILSRowChangeEvent(CType(e.Row,ORDER_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ORDER_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ORDER_DETAILSRowDeleting(Me, New ORDER_DETAILSRowChangeEvent(CType(e.Row,ORDER_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveORDER_DETAILSRow(ByVal row As ORDER_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ORDER_DETAILSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PURCAHSE_ORDER_MAIN_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NO As Global.System.Data.DataColumn
        
        Private columnSUPP_NAME As Global.System.Data.DataColumn
        
        Private columnSUPP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnSUPP_PHONE As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnORDE_QTY As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_D As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_B As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_R As Global.System.Data.DataColumn
        
        Private columnRECEIVE_QTY As Global.System.Data.DataColumn
        
        Private columnPROMOTION_QTY As Global.System.Data.DataColumn
        
        Private columnIS_DEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PURCAHSE_ORDER_MAIN_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROMOTION_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROMOTION_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PURCAHSE_ORDER_MAIN_VIEWRow
            Get
                Return CType(Me.Rows(index),PURCAHSE_ORDER_MAIN_VIEWRow)
            End Get
        End Property
        
        Public Event PURCAHSE_ORDER_MAIN_VIEWRowChanging As PURCAHSE_ORDER_MAIN_VIEWRowChangeEventHandler
        
        Public Event PURCAHSE_ORDER_MAIN_VIEWRowChanged As PURCAHSE_ORDER_MAIN_VIEWRowChangeEventHandler
        
        Public Event PURCAHSE_ORDER_MAIN_VIEWRowDeleting As PURCAHSE_ORDER_MAIN_VIEWRowChangeEventHandler
        
        Public Event PURCAHSE_ORDER_MAIN_VIEWRowDeleted As PURCAHSE_ORDER_MAIN_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPURCAHSE_ORDER_MAIN_VIEWRow(ByVal row As PURCAHSE_ORDER_MAIN_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPURCAHSE_ORDER_MAIN_VIEWRow( _
                    ByVal ORDE_ID As Long,  _
                    ByVal ORDER_NO As Decimal,  _
                    ByVal SUPPLIER_NO As Decimal,  _
                    ByVal SUPP_NAME As String,  _
                    ByVal SUPP_ADDRESS As String,  _
                    ByVal SUPP_PHONE As String,  _
                    ByVal ITEM_ID As Integer,  _
                    ByVal ITEM_NAME As String,  _
                    ByVal UNIT_NAME As String,  _
                    ByVal ORDE_QTY As Double,  _
                    ByVal COST As Double,  _
                    ByVal ORDE_PRICE_D As Double,  _
                    ByVal ORDE_PRICE_B As Double,  _
                    ByVal ORDE_PRICE_R As Double,  _
                    ByVal RECEIVE_QTY As Double,  _
                    ByVal PROMOTION_QTY As Double,  _
                    ByVal IS_DEL As Integer) As PURCAHSE_ORDER_MAIN_VIEWRow
            Dim rowPURCAHSE_ORDER_MAIN_VIEWRow As PURCAHSE_ORDER_MAIN_VIEWRow = CType(Me.NewRow,PURCAHSE_ORDER_MAIN_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {ORDE_ID, ORDER_NO, SUPPLIER_NO, SUPP_NAME, SUPP_ADDRESS, SUPP_PHONE, ITEM_ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_B, ORDE_PRICE_R, RECEIVE_QTY, PROMOTION_QTY, IS_DEL}
            rowPURCAHSE_ORDER_MAIN_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPURCAHSE_ORDER_MAIN_VIEWRow)
            Return rowPURCAHSE_ORDER_MAIN_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDE_ID(ByVal ORDE_ID As Long) As PURCAHSE_ORDER_MAIN_VIEWRow
            Return CType(Me.Rows.Find(New Object() {ORDE_ID}),PURCAHSE_ORDER_MAIN_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PURCAHSE_ORDER_MAIN_VIEWDataTable = CType(MyBase.Clone,PURCAHSE_ORDER_MAIN_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PURCAHSE_ORDER_MAIN_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnSUPPLIER_NO = MyBase.Columns("SUPPLIER_NO")
            Me.columnSUPP_NAME = MyBase.Columns("SUPP_NAME")
            Me.columnSUPP_ADDRESS = MyBase.Columns("SUPP_ADDRESS")
            Me.columnSUPP_PHONE = MyBase.Columns("SUPP_PHONE")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnORDE_QTY = MyBase.Columns("ORDE_QTY")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnORDE_PRICE_D = MyBase.Columns("ORDE_PRICE_D")
            Me.columnORDE_PRICE_B = MyBase.Columns("ORDE_PRICE_B")
            Me.columnORDE_PRICE_R = MyBase.Columns("ORDE_PRICE_R")
            Me.columnRECEIVE_QTY = MyBase.Columns("RECEIVE_QTY")
            Me.columnPROMOTION_QTY = MyBase.Columns("PROMOTION_QTY")
            Me.columnIS_DEL = MyBase.Columns("IS_DEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnSUPPLIER_NO = New Global.System.Data.DataColumn("SUPPLIER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NO)
            Me.columnSUPP_NAME = New Global.System.Data.DataColumn("SUPP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_NAME)
            Me.columnSUPP_ADDRESS = New Global.System.Data.DataColumn("SUPP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_ADDRESS)
            Me.columnSUPP_PHONE = New Global.System.Data.DataColumn("SUPP_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_PHONE)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnORDE_QTY = New Global.System.Data.DataColumn("ORDE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_QTY)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnORDE_PRICE_D = New Global.System.Data.DataColumn("ORDE_PRICE_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_D)
            Me.columnORDE_PRICE_B = New Global.System.Data.DataColumn("ORDE_PRICE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_B)
            Me.columnORDE_PRICE_R = New Global.System.Data.DataColumn("ORDE_PRICE_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_R)
            Me.columnRECEIVE_QTY = New Global.System.Data.DataColumn("RECEIVE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_QTY)
            Me.columnPROMOTION_QTY = New Global.System.Data.DataColumn("PROMOTION_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROMOTION_QTY)
            Me.columnIS_DEL = New Global.System.Data.DataColumn("IS_DEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDE_ID}, true))
            Me.columnORDE_ID.AllowDBNull = false
            Me.columnORDE_ID.Unique = true
            Me.columnSUPP_NAME.MaxLength = 250
            Me.columnSUPP_ADDRESS.MaxLength = 250
            Me.columnSUPP_PHONE.MaxLength = 250
            Me.columnITEM_NAME.MaxLength = 250
            Me.columnUNIT_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPURCAHSE_ORDER_MAIN_VIEWRow() As PURCAHSE_ORDER_MAIN_VIEWRow
            Return CType(Me.NewRow,PURCAHSE_ORDER_MAIN_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PURCAHSE_ORDER_MAIN_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PURCAHSE_ORDER_MAIN_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PURCAHSE_ORDER_MAIN_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PURCAHSE_ORDER_MAIN_VIEWRowChanged(Me, New PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent(CType(e.Row,PURCAHSE_ORDER_MAIN_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PURCAHSE_ORDER_MAIN_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PURCAHSE_ORDER_MAIN_VIEWRowChanging(Me, New PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent(CType(e.Row,PURCAHSE_ORDER_MAIN_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PURCAHSE_ORDER_MAIN_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PURCAHSE_ORDER_MAIN_VIEWRowDeleted(Me, New PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent(CType(e.Row,PURCAHSE_ORDER_MAIN_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PURCAHSE_ORDER_MAIN_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PURCAHSE_ORDER_MAIN_VIEWRowDeleting(Me, New PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent(CType(e.Row,PURCAHSE_ORDER_MAIN_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePURCAHSE_ORDER_MAIN_VIEWRow(ByVal row As PURCAHSE_ORDER_MAIN_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PURCAHSE_ORDER_MAIN_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDETA_ID As Global.System.Data.DataColumn
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnORDE_QTY As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_D As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_R As Global.System.Data.DataColumn
        
        Private columnORDE_PRICE_B As Global.System.Data.DataColumn
        
        Private columnRECEIVE_QTY As Global.System.Data.DataColumn
        
        Private columnIS_CURRENCY As Global.System.Data.DataColumn
        
        Private columnPROMOTION_QTY As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME_FREE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_PRICE_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_PRICE_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_CURRENCYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_CURRENCY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROMOTION_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROMOTION_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAME_FREEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME_FREE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Get
                Return CType(Me.Rows(index),PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            End Get
        End Property
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanging As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanged As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleting As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleted As PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal DETA_ID As Long, ByVal ORDE_ID As Long, ByVal ITEM_ID As Integer, ByVal ITEM_NAME As String, ByVal UNIT_NAME As String, ByVal ORDE_QTY As Double, ByVal COST As Double, ByVal ORDE_PRICE_D As Double, ByVal ORDE_PRICE_R As Double, ByVal ORDE_PRICE_B As Double, ByVal RECEIVE_QTY As Double, ByVal IS_CURRENCY As String, ByVal PROMOTION_QTY As Double, ByVal UNIT_NAME_FREE As String) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Dim rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow = CType(Me.NewRow,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {DETA_ID, ORDE_ID, ITEM_ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY, UNIT_NAME_FREE}
            rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Return rowPURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDETA_ID(ByVal DETA_ID As Long) As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Return CType(Me.Rows.Find(New Object() {DETA_ID}),PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable = CType(MyBase.Clone,PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDETA_ID = MyBase.Columns("DETA_ID")
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnORDE_QTY = MyBase.Columns("ORDE_QTY")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnORDE_PRICE_D = MyBase.Columns("ORDE_PRICE_D")
            Me.columnORDE_PRICE_R = MyBase.Columns("ORDE_PRICE_R")
            Me.columnORDE_PRICE_B = MyBase.Columns("ORDE_PRICE_B")
            Me.columnRECEIVE_QTY = MyBase.Columns("RECEIVE_QTY")
            Me.columnIS_CURRENCY = MyBase.Columns("IS_CURRENCY")
            Me.columnPROMOTION_QTY = MyBase.Columns("PROMOTION_QTY")
            Me.columnUNIT_NAME_FREE = MyBase.Columns("UNIT_NAME_FREE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDETA_ID = New Global.System.Data.DataColumn("DETA_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETA_ID)
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnORDE_QTY = New Global.System.Data.DataColumn("ORDE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_QTY)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnORDE_PRICE_D = New Global.System.Data.DataColumn("ORDE_PRICE_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_D)
            Me.columnORDE_PRICE_R = New Global.System.Data.DataColumn("ORDE_PRICE_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_R)
            Me.columnORDE_PRICE_B = New Global.System.Data.DataColumn("ORDE_PRICE_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_PRICE_B)
            Me.columnRECEIVE_QTY = New Global.System.Data.DataColumn("RECEIVE_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVE_QTY)
            Me.columnIS_CURRENCY = New Global.System.Data.DataColumn("IS_CURRENCY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_CURRENCY)
            Me.columnPROMOTION_QTY = New Global.System.Data.DataColumn("PROMOTION_QTY", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROMOTION_QTY)
            Me.columnUNIT_NAME_FREE = New Global.System.Data.DataColumn("UNIT_NAME_FREE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME_FREE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDETA_ID}, true))
            Me.columnDETA_ID.AllowDBNull = false
            Me.columnDETA_ID.Unique = true
            Me.columnITEM_NAME.MaxLength = 250
            Me.columnUNIT_NAME.MaxLength = 50
            Me.columnIS_CURRENCY.MaxLength = 50
            Me.columnUNIT_NAME_FREE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPURCHASE_ORDER_MASTER_DETAIL_VIEWRow() As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Return CType(Me.NewRow,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PURCHASE_ORDER_MASTER_DETAIL_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanged(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChanging(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleted(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_DETAIL_VIEWRowDeleting(Me, New PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_DETAIL_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePURCHASE_ORDER_MASTER_DETAIL_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnORDE_ID As Global.System.Data.DataColumn
        
        Private columnORDER_NO As Global.System.Data.DataColumn
        
        Private columnSUPPLIER_NO As Global.System.Data.DataColumn
        
        Private columnORDE_DATE As Global.System.Data.DataColumn
        
        Private columnTOTAL_R As Global.System.Data.DataColumn
        
        Private columnTOTAL_D As Global.System.Data.DataColumn
        
        Private columnTOTAL_B As Global.System.Data.DataColumn
        
        Private columnORDER_NOTE As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnORDE_STATUS As Global.System.Data.DataColumn
        
        Private columnYEARS As Global.System.Data.DataColumn
        
        Private columnSTATUS_PAY As Global.System.Data.DataColumn
        
        Private columnSUPP_NAME As Global.System.Data.DataColumn
        
        Private columnSUPP_PHONE As Global.System.Data.DataColumn
        
        Private columnSUPP_ADDRESS As Global.System.Data.DataColumn
        
        Private columnRECEIVED_DATE As Global.System.Data.DataColumn
        
        Private columnREFERREN_NO As Global.System.Data.DataColumn
        
        Private columnIS_DEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PURCHASE_ORDER_MASTER_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPPLIER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPPLIER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_RColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_R
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_D
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_BColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_B
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDER_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDER_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDE_STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDE_STATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YEARSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYEARS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STATUS_PAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS_PAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUPP_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUPP_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REFERREN_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREFERREN_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PURCHASE_ORDER_MASTER_VIEWRow
            Get
                Return CType(Me.Rows(index),PURCHASE_ORDER_MASTER_VIEWRow)
            End Get
        End Property
        
        Public Event PURCHASE_ORDER_MASTER_VIEWRowChanging As PURCHASE_ORDER_MASTER_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_VIEWRowChanged As PURCHASE_ORDER_MASTER_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_VIEWRowDeleting As PURCHASE_ORDER_MASTER_VIEWRowChangeEventHandler
        
        Public Event PURCHASE_ORDER_MASTER_VIEWRowDeleted As PURCHASE_ORDER_MASTER_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPURCHASE_ORDER_MASTER_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPURCHASE_ORDER_MASTER_VIEWRow( _
                    ByVal ORDE_ID As Long,  _
                    ByVal ORDER_NO As Decimal,  _
                    ByVal SUPPLIER_NO As Decimal,  _
                    ByVal ORDE_DATE As Date,  _
                    ByVal TOTAL_R As Double,  _
                    ByVal TOTAL_D As Double,  _
                    ByVal TOTAL_B As Double,  _
                    ByVal ORDER_NOTE As String,  _
                    ByVal USER_ID As Integer,  _
                    ByVal ORDE_STATUS As String,  _
                    ByVal YEARS As Integer,  _
                    ByVal STATUS_PAY As String,  _
                    ByVal SUPP_NAME As String,  _
                    ByVal SUPP_PHONE As String,  _
                    ByVal SUPP_ADDRESS As String,  _
                    ByVal RECEIVED_DATE As Date,  _
                    ByVal REFERREN_NO As String,  _
                    ByVal IS_DEL As Integer) As PURCHASE_ORDER_MASTER_VIEWRow
            Dim rowPURCHASE_ORDER_MASTER_VIEWRow As PURCHASE_ORDER_MASTER_VIEWRow = CType(Me.NewRow,PURCHASE_ORDER_MASTER_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {ORDE_ID, ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, SUPP_NAME, SUPP_PHONE, SUPP_ADDRESS, RECEIVED_DATE, REFERREN_NO, IS_DEL}
            rowPURCHASE_ORDER_MASTER_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPURCHASE_ORDER_MASTER_VIEWRow)
            Return rowPURCHASE_ORDER_MASTER_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDE_ID(ByVal ORDE_ID As Long) As PURCHASE_ORDER_MASTER_VIEWRow
            Return CType(Me.Rows.Find(New Object() {ORDE_ID}),PURCHASE_ORDER_MASTER_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PURCHASE_ORDER_MASTER_VIEWDataTable = CType(MyBase.Clone,PURCHASE_ORDER_MASTER_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PURCHASE_ORDER_MASTER_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDE_ID = MyBase.Columns("ORDE_ID")
            Me.columnORDER_NO = MyBase.Columns("ORDER_NO")
            Me.columnSUPPLIER_NO = MyBase.Columns("SUPPLIER_NO")
            Me.columnORDE_DATE = MyBase.Columns("ORDE_DATE")
            Me.columnTOTAL_R = MyBase.Columns("TOTAL_R")
            Me.columnTOTAL_D = MyBase.Columns("TOTAL_D")
            Me.columnTOTAL_B = MyBase.Columns("TOTAL_B")
            Me.columnORDER_NOTE = MyBase.Columns("ORDER_NOTE")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnORDE_STATUS = MyBase.Columns("ORDE_STATUS")
            Me.columnYEARS = MyBase.Columns("YEARS")
            Me.columnSTATUS_PAY = MyBase.Columns("STATUS_PAY")
            Me.columnSUPP_NAME = MyBase.Columns("SUPP_NAME")
            Me.columnSUPP_PHONE = MyBase.Columns("SUPP_PHONE")
            Me.columnSUPP_ADDRESS = MyBase.Columns("SUPP_ADDRESS")
            Me.columnRECEIVED_DATE = MyBase.Columns("RECEIVED_DATE")
            Me.columnREFERREN_NO = MyBase.Columns("REFERREN_NO")
            Me.columnIS_DEL = MyBase.Columns("IS_DEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDE_ID = New Global.System.Data.DataColumn("ORDE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_ID)
            Me.columnORDER_NO = New Global.System.Data.DataColumn("ORDER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NO)
            Me.columnSUPPLIER_NO = New Global.System.Data.DataColumn("SUPPLIER_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPPLIER_NO)
            Me.columnORDE_DATE = New Global.System.Data.DataColumn("ORDE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_DATE)
            Me.columnTOTAL_R = New Global.System.Data.DataColumn("TOTAL_R", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_R)
            Me.columnTOTAL_D = New Global.System.Data.DataColumn("TOTAL_D", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_D)
            Me.columnTOTAL_B = New Global.System.Data.DataColumn("TOTAL_B", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_B)
            Me.columnORDER_NOTE = New Global.System.Data.DataColumn("ORDER_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDER_NOTE)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnORDE_STATUS = New Global.System.Data.DataColumn("ORDE_STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDE_STATUS)
            Me.columnYEARS = New Global.System.Data.DataColumn("YEARS", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYEARS)
            Me.columnSTATUS_PAY = New Global.System.Data.DataColumn("STATUS_PAY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS_PAY)
            Me.columnSUPP_NAME = New Global.System.Data.DataColumn("SUPP_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_NAME)
            Me.columnSUPP_PHONE = New Global.System.Data.DataColumn("SUPP_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_PHONE)
            Me.columnSUPP_ADDRESS = New Global.System.Data.DataColumn("SUPP_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUPP_ADDRESS)
            Me.columnRECEIVED_DATE = New Global.System.Data.DataColumn("RECEIVED_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_DATE)
            Me.columnREFERREN_NO = New Global.System.Data.DataColumn("REFERREN_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREFERREN_NO)
            Me.columnIS_DEL = New Global.System.Data.DataColumn("IS_DEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDE_ID}, true))
            Me.columnORDE_ID.AllowDBNull = false
            Me.columnORDE_ID.Unique = true
            Me.columnORDER_NOTE.MaxLength = 150
            Me.columnORDE_STATUS.MaxLength = 50
            Me.columnSTATUS_PAY.MaxLength = 50
            Me.columnSUPP_NAME.MaxLength = 250
            Me.columnSUPP_PHONE.MaxLength = 250
            Me.columnSUPP_ADDRESS.MaxLength = 250
            Me.columnREFERREN_NO.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPURCHASE_ORDER_MASTER_VIEWRow() As PURCHASE_ORDER_MASTER_VIEWRow
            Return CType(Me.NewRow,PURCHASE_ORDER_MASTER_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PURCHASE_ORDER_MASTER_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PURCHASE_ORDER_MASTER_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_VIEWRowChanged(Me, New PURCHASE_ORDER_MASTER_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_VIEWRowChanging(Me, New PURCHASE_ORDER_MASTER_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_VIEWRowDeleted(Me, New PURCHASE_ORDER_MASTER_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PURCHASE_ORDER_MASTER_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PURCHASE_ORDER_MASTER_VIEWRowDeleting(Me, New PURCHASE_ORDER_MASTER_VIEWRowChangeEvent(CType(e.Row,PURCHASE_ORDER_MASTER_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePURCHASE_ORDER_MASTER_VIEWRow(ByVal row As PURCHASE_ORDER_MASTER_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PURCHASE_ORDER_MASTER_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ITEM_COSTSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCOST_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnUSD_COST As Global.System.Data.DataColumn
        
        Private columnKHR_COST As Global.System.Data.DataColumn
        
        Private columnTHB_COST As Global.System.Data.DataColumn
        
        Private columnIS_LAST As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnDATE_CREATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ITEM_COSTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_COST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_LASTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_LAST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_CREATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_CREATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ITEM_COSTSRow
            Get
                Return CType(Me.Rows(index),ITEM_COSTSRow)
            End Get
        End Property
        
        Public Event ITEM_COSTSRowChanging As ITEM_COSTSRowChangeEventHandler
        
        Public Event ITEM_COSTSRowChanged As ITEM_COSTSRowChangeEventHandler
        
        Public Event ITEM_COSTSRowDeleting As ITEM_COSTSRowChangeEventHandler
        
        Public Event ITEM_COSTSRowDeleted As ITEM_COSTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddITEM_COSTSRow(ByVal row As ITEM_COSTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddITEM_COSTSRow(ByVal ITEM_ID As Integer, ByVal USD_COST As Decimal, ByVal KHR_COST As Decimal, ByVal THB_COST As Decimal, ByVal IS_LAST As Integer, ByVal USER_ID As Integer, ByVal DATE_CREATE As Date) As ITEM_COSTSRow
            Dim rowITEM_COSTSRow As ITEM_COSTSRow = CType(Me.NewRow,ITEM_COSTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ITEM_ID, USD_COST, KHR_COST, THB_COST, IS_LAST, USER_ID, DATE_CREATE}
            rowITEM_COSTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowITEM_COSTSRow)
            Return rowITEM_COSTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCOST_ID(ByVal COST_ID As Long) As ITEM_COSTSRow
            Return CType(Me.Rows.Find(New Object() {COST_ID}),ITEM_COSTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ITEM_COSTSDataTable = CType(MyBase.Clone,ITEM_COSTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ITEM_COSTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCOST_ID = MyBase.Columns("COST_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnUSD_COST = MyBase.Columns("USD_COST")
            Me.columnKHR_COST = MyBase.Columns("KHR_COST")
            Me.columnTHB_COST = MyBase.Columns("THB_COST")
            Me.columnIS_LAST = MyBase.Columns("IS_LAST")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnDATE_CREATE = MyBase.Columns("DATE_CREATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCOST_ID = New Global.System.Data.DataColumn("COST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnUSD_COST = New Global.System.Data.DataColumn("USD_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_COST)
            Me.columnKHR_COST = New Global.System.Data.DataColumn("KHR_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_COST)
            Me.columnTHB_COST = New Global.System.Data.DataColumn("THB_COST", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_COST)
            Me.columnIS_LAST = New Global.System.Data.DataColumn("IS_LAST", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_LAST)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnDATE_CREATE = New Global.System.Data.DataColumn("DATE_CREATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_CREATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCOST_ID}, true))
            Me.columnCOST_ID.AutoIncrement = true
            Me.columnCOST_ID.AutoIncrementSeed = -1
            Me.columnCOST_ID.AutoIncrementStep = -1
            Me.columnCOST_ID.AllowDBNull = false
            Me.columnCOST_ID.ReadOnly = true
            Me.columnCOST_ID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewITEM_COSTSRow() As ITEM_COSTSRow
            Return CType(Me.NewRow,ITEM_COSTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ITEM_COSTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ITEM_COSTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ITEM_COSTSRowChangedEvent) Is Nothing) Then
                RaiseEvent ITEM_COSTSRowChanged(Me, New ITEM_COSTSRowChangeEvent(CType(e.Row,ITEM_COSTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ITEM_COSTSRowChangingEvent) Is Nothing) Then
                RaiseEvent ITEM_COSTSRowChanging(Me, New ITEM_COSTSRowChangeEvent(CType(e.Row,ITEM_COSTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ITEM_COSTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ITEM_COSTSRowDeleted(Me, New ITEM_COSTSRowChangeEvent(CType(e.Row,ITEM_COSTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ITEM_COSTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ITEM_COSTSRowDeleting(Me, New ITEM_COSTSRowChangeEvent(CType(e.Row,ITEM_COSTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveITEM_COSTSRow(ByVal row As ITEM_COSTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPurchaseOrder = New DSPurchaseOrder
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ITEM_COSTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDER_DETAILS_TEMRow
        Inherits Global.System.Data.DataRow
        
        Private tableORDER_DETAILS_TEM As ORDER_DETAILS_TEMDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDER_DETAILS_TEM = CType(Me.Table,ORDER_DETAILS_TEMDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETA_ID() As Long
            Get
                Return CType(Me(Me.tableORDER_DETAILS_TEM.DETA_IDColumn),Long)
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.DETA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_ID' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_QTY' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_D' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_R' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_B' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_QTY_PROM() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.ORDER_QTY_PROMColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_QTY_PROM' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.ORDER_QTY_PROMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.IS_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CURRENCY' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.IS_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME_FREE() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS_TEM.UNIT_NAME_FREEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME_FREE' in table 'ORDER_DETAILS_TEM' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS_TEM.UNIT_NAME_FREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_IDNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_IDNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableORDER_DETAILS_TEM.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_QTYNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableORDER_DETAILS_TEM.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_DNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_DNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_RNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_RNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableORDER_DETAILS_TEM.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tableORDER_DETAILS_TEM.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_BNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_BNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDE_PRICE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_QTY_PROMNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.ORDER_QTY_PROMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_QTY_PROMNull()
            Me(Me.tableORDER_DETAILS_TEM.ORDER_QTY_PROMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.IS_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CURRENCYNull()
            Me(Me.tableORDER_DETAILS_TEM.IS_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAME_FREENull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS_TEM.UNIT_NAME_FREEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAME_FREENull()
            Me(Me.tableORDER_DETAILS_TEM.UNIT_NAME_FREEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ITEM_BALANCERow
        Inherits Global.System.Data.DataRow
        
        Private tableITEM_BALANCE As ITEM_BALANCEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEM_BALANCE = CType(Me.Table,ITEM_BALANCEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STORE_ID() As Integer
            Get
                Return CType(Me(Me.tableITEM_BALANCE.STORE_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableITEM_BALANCE.STORE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_BALANCE.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'ITEM_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_BALANCE.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_TYPE() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_BALANCE.UNIT_TYPEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_TYPE' in table 'ITEM_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_BALANCE.UNIT_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableITEM_BALANCE.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'ITEM_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_BALANCE.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RATIO_QTY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_BALANCE.RATIO_QTYColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RATIO_QTY' in table 'ITEM_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_BALANCE.RATIO_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BALANCE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_BALANCE.BALANCEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BALANCE' in table 'ITEM_BALANCE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_BALANCE.BALANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableITEM_BALANCE.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableITEM_BALANCE.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_TYPENull() As Boolean
            Return Me.IsNull(Me.tableITEM_BALANCE.UNIT_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_TYPENull()
            Me(Me.tableITEM_BALANCE.UNIT_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableITEM_BALANCE.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tableITEM_BALANCE.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRATIO_QTYNull() As Boolean
            Return Me.IsNull(Me.tableITEM_BALANCE.RATIO_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRATIO_QTYNull()
            Me(Me.tableITEM_BALANCE.RATIO_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBALANCENull() As Boolean
            Return Me.IsNull(Me.tableITEM_BALANCE.BALANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBALANCENull()
            Me(Me.tableITEM_BALANCE.BALANCEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDERSRow
        Inherits Global.System.Data.DataRow
        
        Private tableORDERS As ORDERSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDERS = CType(Me.Table,ORDERSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Return CType(Me(Me.tableORDERS.ORDE_IDColumn),Long)
            End Get
            Set
                Me(Me.tableORDERS.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.ORDER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.SUPPLIER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NO' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.SUPPLIER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.ORDE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_DATE' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.ORDE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.TOTAL_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_R' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.TOTAL_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.TOTAL_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_D' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.TOTAL_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.TOTAL_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_B' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.TOTAL_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.ORDER_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NOTE' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.ORDER_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.USER_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.ORDE_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_STATUS' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.ORDE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEARS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.YEARSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YEARS' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.YEARSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_PAY() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.STATUS_PAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS_PAY' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.STATUS_PAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.RECEIVED_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVED_DATE' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.RECEIVED_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDERS.IS_DELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEL' in table 'ORDERS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDERS.IS_DELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableORDERS.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tableORDERS.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NONull() As Boolean
            Return Me.IsNull(Me.tableORDERS.SUPPLIER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NONull()
            Me(Me.tableORDERS.SUPPLIER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_DATENull() As Boolean
            Return Me.IsNull(Me.tableORDERS.ORDE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_DATENull()
            Me(Me.tableORDERS.ORDE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_RNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.TOTAL_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_RNull()
            Me(Me.tableORDERS.TOTAL_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.TOTAL_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DNull()
            Me(Me.tableORDERS.TOTAL_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_BNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.TOTAL_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_BNull()
            Me(Me.tableORDERS.TOTAL_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NOTENull() As Boolean
            Return Me.IsNull(Me.tableORDERS.ORDER_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NOTENull()
            Me(Me.tableORDERS.ORDER_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tableORDERS.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.ORDE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_STATUSNull()
            Me(Me.tableORDERS.ORDE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEARSNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.YEARSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEARSNull()
            Me(Me.tableORDERS.YEARSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_PAYNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.STATUS_PAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_PAYNull()
            Me(Me.tableORDERS.STATUS_PAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVED_DATENull() As Boolean
            Return Me.IsNull(Me.tableORDERS.RECEIVED_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVED_DATENull()
            Me(Me.tableORDERS.RECEIVED_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELNull() As Boolean
            Return Me.IsNull(Me.tableORDERS.IS_DELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELNull()
            Me(Me.tableORDERS.IS_DELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ORDER_DETAILSRow
        Inherits Global.System.Data.DataRow
        
        Private tableORDER_DETAILS As ORDER_DETAILSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableORDER_DETAILS = CType(Me.Table,ORDER_DETAILSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETA_ID() As Long
            Get
                Return CType(Me(Me.tableORDER_DETAILS.DETA_IDColumn),Long)
            End Get
            Set
                Me(Me.tableORDER_DETAILS.DETA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ORDE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_ID' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ORDE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_QTY' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ORDE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ORDE_PRICE_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_D' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ORDE_PRICE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ORDE_PRICE_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_R' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ORDE_PRICE_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.ORDE_PRICE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_B' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.ORDE_PRICE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.RECEIVE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_QTY' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.RECEIVE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.IS_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CURRENCY' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.IS_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROMOTION_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tableORDER_DETAILS.PROMOTION_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROMOTION_QTY' in table 'ORDER_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableORDER_DETAILS.PROMOTION_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_IDNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ORDE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_IDNull()
            Me(Me.tableORDER_DETAILS.ORDE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableORDER_DETAILS.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tableORDER_DETAILS.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ORDE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_QTYNull()
            Me(Me.tableORDER_DETAILS.ORDE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableORDER_DETAILS.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_DNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ORDE_PRICE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_DNull()
            Me(Me.tableORDER_DETAILS.ORDE_PRICE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_RNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ORDE_PRICE_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_RNull()
            Me(Me.tableORDER_DETAILS.ORDE_PRICE_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_BNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.ORDE_PRICE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_BNull()
            Me(Me.tableORDER_DETAILS.ORDE_PRICE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.RECEIVE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_QTYNull()
            Me(Me.tableORDER_DETAILS.RECEIVE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.IS_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CURRENCYNull()
            Me(Me.tableORDER_DETAILS.IS_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROMOTION_QTYNull() As Boolean
            Return Me.IsNull(Me.tableORDER_DETAILS.PROMOTION_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROMOTION_QTYNull()
            Me(Me.tableORDER_DETAILS.PROMOTION_QTYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PURCAHSE_ORDER_MAIN_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePURCAHSE_ORDER_MAIN_VIEW As PURCAHSE_ORDER_MAIN_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePURCAHSE_ORDER_MAIN_VIEW = CType(Me.Table,PURCAHSE_ORDER_MAIN_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_IDColumn),Long)
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPPLIER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NO' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPPLIER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_NAME' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_ADDRESS' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_PHONE' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_QTY' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_D' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_B' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_R' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.RECEIVE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_QTY' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.RECEIVE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROMOTION_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.PROMOTION_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROMOTION_QTY' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.PROMOTION_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.IS_DELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEL' in table 'PURCAHSE_ORDER_MAIN_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.IS_DELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NONull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPPLIER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NONull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPPLIER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_NAMENull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_ADDRESSNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_PHONENull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_PHONENull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.SUPP_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_QTYNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_DNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_DNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_BNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_BNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_RNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_RNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.ORDE_PRICE_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.RECEIVE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_QTYNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.RECEIVE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROMOTION_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.PROMOTION_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROMOTION_QTYNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.PROMOTION_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELNull() As Boolean
            Return Me.IsNull(Me.tablePURCAHSE_ORDER_MAIN_VIEW.IS_DELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELNull()
            Me(Me.tablePURCAHSE_ORDER_MAIN_VIEW.IS_DELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePURCHASE_ORDER_MASTER_DETAIL_VIEW As PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW = CType(Me.Table,PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETA_ID() As Long
            Get
                Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.DETA_IDColumn),Long)
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.DETA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_ID' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_D' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_R' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_PRICE_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_PRICE_B' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVE_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVE_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_CURRENCY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_CURRENCY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROMOTION_QTY() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROMOTION_QTY' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME_FREE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME_FREE' in table 'PURCHASE_ORDER_MASTER_DETAIL_VIEW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_IDNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_DNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_DNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_RNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_RNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_PRICE_BNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_PRICE_BNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.ORDE_PRICE_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVE_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVE_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.RECEIVE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_CURRENCYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_CURRENCYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.IS_CURRENCYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROMOTION_QTYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROMOTION_QTYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.PROMOTION_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAME_FREENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAME_FREENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_DETAIL_VIEW.UNIT_NAME_FREEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePURCHASE_ORDER_MASTER_VIEW As PURCHASE_ORDER_MASTER_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePURCHASE_ORDER_MASTER_VIEW = CType(Me.Table,PURCHASE_ORDER_MASTER_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_ID() As Long
            Get
                Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_IDColumn),Long)
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NO' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPPLIER_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPPLIER_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPPLIER_NO' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPPLIER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_DATE' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_R() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_RColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_R' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_RColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_D() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_DColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_D' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_DColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_B() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_BColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_B' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_BColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDER_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDER_NOTE' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.USER_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDE_STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDE_STATUS' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YEARS() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.YEARSColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'YEARS' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.YEARSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property STATUS_PAY() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.STATUS_PAYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS_PAY' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.STATUS_PAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_NAME' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_PHONE' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUPP_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUPP_ADDRESS' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.RECEIVED_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVED_DATE' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.RECEIVED_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REFERREN_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.REFERREN_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REFERREN_NO' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.REFERREN_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.IS_DELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEL' in table 'PURCHASE_ORDER_MASTER_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.IS_DELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NONull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NONull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPPLIER_NONull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPPLIER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPPLIER_NONull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPPLIER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_DATENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_DATENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_RNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_RColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_RNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_RColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_DColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_DColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_BNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_BColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_BNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.TOTAL_BColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDER_NOTENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDER_NOTENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDER_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDE_STATUSNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDE_STATUSNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.ORDE_STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYEARSNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.YEARSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYEARSNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.YEARSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTATUS_PAYNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.STATUS_PAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTATUS_PAYNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.STATUS_PAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_NAMENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_NAMENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_PHONENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_PHONENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUPP_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUPP_ADDRESSNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.SUPP_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVED_DATENull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.RECEIVED_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVED_DATENull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.RECEIVED_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREFERREN_NONull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.REFERREN_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREFERREN_NONull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.REFERREN_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELNull() As Boolean
            Return Me.IsNull(Me.tablePURCHASE_ORDER_MASTER_VIEW.IS_DELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELNull()
            Me(Me.tablePURCHASE_ORDER_MASTER_VIEW.IS_DELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ITEM_COSTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableITEM_COSTS As ITEM_COSTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableITEM_COSTS = CType(Me.Table,ITEM_COSTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST_ID() As Long
            Get
                Return CType(Me(Me.tableITEM_COSTS.COST_IDColumn),Long)
            End Get
            Set
                Me(Me.tableITEM_COSTS.COST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.USD_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_COST' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.USD_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.KHR_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_COST' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.KHR_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_COST() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.THB_COSTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_COST' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.THB_COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_LAST() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.IS_LASTColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_LAST' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.IS_LASTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.USER_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_CREATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableITEM_COSTS.DATE_CREATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_CREATE' in table 'ITEM_COSTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableITEM_COSTS.DATE_CREATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableITEM_COSTS.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_COSTNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.USD_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_COSTNull()
            Me(Me.tableITEM_COSTS.USD_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_COSTNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.KHR_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_COSTNull()
            Me(Me.tableITEM_COSTS.KHR_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_COSTNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.THB_COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_COSTNull()
            Me(Me.tableITEM_COSTS.THB_COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_LASTNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.IS_LASTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_LASTNull()
            Me(Me.tableITEM_COSTS.IS_LASTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tableITEM_COSTS.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_CREATENull() As Boolean
            Return Me.IsNull(Me.tableITEM_COSTS.DATE_CREATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_CREATENull()
            Me(Me.tableITEM_COSTS.DATE_CREATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDER_DETAILS_TEMRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDER_DETAILS_TEMRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDER_DETAILS_TEMRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDER_DETAILS_TEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ITEM_BALANCERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEM_BALANCERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ITEM_BALANCERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ITEM_BALANCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDERSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDERSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDERSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDERSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ORDER_DETAILSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ORDER_DETAILSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ORDER_DETAILSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ORDER_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PURCAHSE_ORDER_MAIN_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PURCAHSE_ORDER_MAIN_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PURCAHSE_ORDER_MAIN_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PURCAHSE_ORDER_MAIN_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PURCHASE_ORDER_MASTER_DETAIL_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PURCHASE_ORDER_MASTER_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PURCHASE_ORDER_MASTER_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PURCHASE_ORDER_MASTER_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PURCHASE_ORDER_MASTER_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ITEM_COSTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ITEM_COSTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ITEM_COSTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ITEM_COSTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSPurchaseOrderTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ORDER_DETAILS_TEMTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ORDER_DETAILS_TEM"
            tableMapping.ColumnMappings.Add("DETA_ID", "DETA_ID")
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ORDE_QTY", "ORDE_QTY")
            tableMapping.ColumnMappings.Add("COST", "COST")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_D", "ORDE_PRICE_D")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_R", "ORDE_PRICE_R")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_B", "ORDE_PRICE_B")
            tableMapping.ColumnMappings.Add("ORDER_QTY_PROM", "ORDER_QTY_PROM")
            tableMapping.ColumnMappings.Add("IS_CURRENCY", "IS_CURRENCY")
            tableMapping.ColumnMappings.Add("UNIT_NAME_FREE", "UNIT_NAME_FREE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(6) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ORDER_DETAILS_TEM.DETA_ID, ORDER_DETAILS_TEM.ORDE_ID, ORDER_DETAILS_TEM.IT"& _ 
                "EM_ID, ORDER_DETAILS_TEM.UNIT_NAME, ORDER_DETAILS_TEM.ORDE_QTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "    ORDER_DETAILS_TEM.COST, ORDER_DETAILS_TEM.ORDE_PRICE_D, ORDER_DETAILS_TEM.OR"& _ 
                "DE_PRICE_R, ORDER_DETAILS_TEM.ORDE_PRICE_B, ITEMS.ITEM_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                " ORDER_DETAILS_TEM.ORDER_QTY_PROM, ORDER_DETAILS_TEM.IS_CURRENCY, ORDER_DETAILS_"& _ 
                "TEM.UNIT_NAME_FREE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ORDER_DETAILS_TEM INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ITE"& _ 
                "MS ON ORDER_DETAILS_TEM.ITEM_ID = ITEMS.ITEM_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM ORDER_DETAILS_TEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (DETA_ID = @DETA_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETA_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "DELETE FROM ORDER_DETAILS_TEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ORDE_ID = @ITEM_ID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "DELETE FROM ORDER_DETAILS_TEM WHERE ORDE_ID=@ORDE_ID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ORDER_DETAILS_TEM.DETA_ID, ORDER_DETAILS_TEM.ORDE_ID, ORDER_DETAILS_TEM.IT"& _ 
                "EM_ID, ORDER_DETAILS_TEM.UNIT_NAME, ORDER_DETAILS_TEM.ORDE_QTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "    ORDER_DETAILS_TEM.COST, ORDER_DETAILS_TEM.ORDE_PRICE_D, ORDER_DETAILS_TEM.OR"& _ 
                "DE_PRICE_R, ORDER_DETAILS_TEM.ORDE_PRICE_B, ITEMS.ITEM_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                " ORDER_DETAILS_TEM.IS_CURRENCY, ORDER_DETAILS_TEM.ORDER_QTY_PROM, ORDER_DETAILS_"& _ 
                "TEM.UNIT_NAME_FREE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ORDER_DETAILS_TEM INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ITE"& _ 
                "MS ON ORDER_DETAILS_TEM.ITEM_ID = ITEMS.ITEM_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ORDER_DETAILS_TEM.ORDE_"& _ 
                "ID = @ORDE_ID)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT DETA_ID, ORDE_ID, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_P"& _ 
                "RICE_R, ORDE_PRICE_B"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ORDER_DETAILS_TEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ORDE_ID = @ORDE_ID) AN"& _ 
                "D (ITEM_ID = @ITEM_ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "INSERT INTO ORDER_DETAILS_TEM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (ORDE_ID, ITEM_ID, UNIT_NAME, OR"& _ 
                "DE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, IS_CURRENCY, ORDER_QTY_P"& _ 
                "ROM, UNIT_NAME_FREE)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@ORDE_ID,@ITEM_ID,@UNIT_NAME,@ORDE_QTY,@COST,@ORDE"& _ 
                "_PRICE_D,@ORDE_PRICE_R,@ORDER_PRICE_B,@IS_CURRENCY,@ORDER_QTY_PROM,@UNIT_NAME_FR"& _ 
                "EE);     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COST", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_PRICE_B", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_QTY_PROM", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_QTY_PROM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME_FREE", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME_FREE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable = New DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable, ByVal ORDE_ID As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByOrderNo(ByVal ORDE_ID As Global.System.Nullable(Of Long)) As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable = New DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable, ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function CheckExitingItem(ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.ORDER_DETAILS_TEMDataTable = New DSPurchaseOrder.ORDER_DETAILS_TEMDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteByDetailID(ByVal DETA_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(DETA_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteByOrderNo(ByVal ITEM_ID As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ITEM_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteOrderItem(ByVal ORDE_ID As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ORDE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertPreOrder(ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_NAME As String, ByVal ORDE_QTY As Global.System.Nullable(Of Double), ByVal COST As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_D As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_R As Global.System.Nullable(Of Double), ByVal ORDER_PRICE_B As Global.System.Nullable(Of Double), ByVal IS_CURRENCY As String, ByVal ORDER_QTY_PROM As Global.System.Nullable(Of Double), ByVal UNIT_NAME_FREE As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (ORDE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (ORDE_QTY.HasValue = true) Then
                command.Parameters(3).Value = CType(ORDE_QTY.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (COST.HasValue = true) Then
                command.Parameters(4).Value = CType(COST.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_D.HasValue = true) Then
                command.Parameters(5).Value = CType(ORDE_PRICE_D.Value,Double)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_R.HasValue = true) Then
                command.Parameters(6).Value = CType(ORDE_PRICE_R.Value,Double)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ORDER_PRICE_B.HasValue = true) Then
                command.Parameters(7).Value = CType(ORDER_PRICE_B.Value,Double)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IS_CURRENCY Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IS_CURRENCY,String)
            End If
            If (ORDER_QTY_PROM.HasValue = true) Then
                command.Parameters(9).Value = CType(ORDER_QTY_PROM.Value,Double)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME_FREE Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(UNIT_NAME_FREE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ITEM_BALANCETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ITEM_BALANCE"
            tableMapping.ColumnMappings.Add("STORE_ID", "STORE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("UNIT_TYPE", "UNIT_TYPE")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("RATIO_QTY", "RATIO_QTY")
            tableMapping.ColumnMappings.Add("BALANCE", "BALANCE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ITEM_BALANCE] WHERE (([STORE_ID] = @Original_STORE_ID) AND ((@"& _ 
                "IsNull_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AN"& _ 
                "D ((@IsNull_UNIT_TYPE = 1 AND [UNIT_TYPE] IS NULL) OR ([UNIT_TYPE] = @Original_U"& _ 
                "NIT_TYPE)) AND ((@IsNull_UNIT_NAME = 1 AND [UNIT_NAME] IS NULL) OR ([UNIT_NAME] "& _ 
                "= @Original_UNIT_NAME)) AND ((@IsNull_RATIO_QTY = 1 AND [RATIO_QTY] IS NULL) OR "& _ 
                "([RATIO_QTY] = @Original_RATIO_QTY)) AND ((@IsNull_BALANCE = 1 AND [BALANCE] IS "& _ 
                "NULL) OR ([BALANCE] = @Original_BALANCE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STORE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STORE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ITEM_BALANCE] ([ITEM_ID], [UNIT_TYPE], [UNIT_NAME], [RATIO_QTY"& _ 
                "], [BALANCE]) VALUES (@ITEM_ID, @UNIT_TYPE, @UNIT_NAME, @RATIO_QTY, @BALANCE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT STORE_ID, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE FROM ITEM_BAL"& _ 
                "ANCE WHERE (STORE_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ITEM_BALANCE] SET [ITEM_ID] = @ITEM_ID, [UNIT_TYPE] = @UNIT_TYPE, ["& _ 
                "UNIT_NAME] = @UNIT_NAME, [RATIO_QTY] = @RATIO_QTY, [BALANCE] = @BALANCE WHERE (("& _ 
                "[STORE_ID] = @Original_STORE_ID) AND ((@IsNull_ITEM_ID = 1 AND [ITEM_ID] IS NULL"& _ 
                ") OR ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNull_UNIT_TYPE = 1 AND [UNIT_TYPE"& _ 
                "] IS NULL) OR ([UNIT_TYPE] = @Original_UNIT_TYPE)) AND ((@IsNull_UNIT_NAME = 1 A"& _ 
                "ND [UNIT_NAME] IS NULL) OR ([UNIT_NAME] = @Original_UNIT_NAME)) AND ((@IsNull_RA"& _ 
                "TIO_QTY = 1 AND [RATIO_QTY] IS NULL) OR ([RATIO_QTY] = @Original_RATIO_QTY)) AND"& _ 
                " ((@IsNull_BALANCE = 1 AND [BALANCE] IS NULL) OR ([BALANCE] = @Original_BALANCE)"& _ 
                "));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT STORE_ID, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE FROM ITE"& _ 
                "M_BALANCE WHERE (STORE_ID = @STORE_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STORE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STORE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_TYPE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_TYPE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_TYPE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RATIO_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RATIO_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BALANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BALANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STORE_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "STORE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT STORE_ID, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE FROM dbo.ITEM_"& _ 
                "BALANCE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT STORE_ID, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ITEM"& _ 
                "_BALANCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ITEM_ID = @ITEM_ID) AND (UNIT_TYPE = 'Main Unit')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT STORE_ID, ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE FROM dbo.ITEM_"& _ 
                "BALANCE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where ITEM_ID=@ITEM_ID and UNIT_TYPE='Sub Unit'"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable = New DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable, ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectMainUnit(ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable = New DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable, ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectSubUnit(ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable = New DSPurchaseOrder.ITEM_BALANCEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSPurchaseOrder.ITEM_BALANCEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "ITEM_BALANCE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_STORE_ID As Integer, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_UNIT_TYPE As String, ByVal Original_UNIT_NAME As String, ByVal Original_RATIO_QTY As Global.System.Nullable(Of Integer), ByVal Original_BALANCE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_STORE_ID,Integer)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_TYPE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UNIT_TYPE,String)
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_RATIO_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_RATIO_QTY.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_BALANCE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_BALANCE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_TYPE As String, ByVal UNIT_NAME As String, ByVal RATIO_QTY As Global.System.Nullable(Of Integer), ByVal BALANCE As Global.System.Nullable(Of Integer)) As Integer
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (UNIT_TYPE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(UNIT_TYPE,String)
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (RATIO_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RATIO_QTY.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BALANCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(BALANCE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_TYPE As String, ByVal UNIT_NAME As String, ByVal RATIO_QTY As Global.System.Nullable(Of Integer), ByVal BALANCE As Global.System.Nullable(Of Integer), ByVal Original_STORE_ID As Integer, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_UNIT_TYPE As String, ByVal Original_UNIT_NAME As String, ByVal Original_RATIO_QTY As Global.System.Nullable(Of Integer), ByVal Original_BALANCE As Global.System.Nullable(Of Integer), ByVal STORE_ID As Integer) As Integer
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (UNIT_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(UNIT_TYPE,String)
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (RATIO_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RATIO_QTY.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (BALANCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(BALANCE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_STORE_ID,Integer)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_TYPE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UNIT_TYPE,String)
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_RATIO_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_RATIO_QTY.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_BALANCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_BALANCE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(STORE_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_TYPE As String, ByVal UNIT_NAME As String, ByVal RATIO_QTY As Global.System.Nullable(Of Integer), ByVal BALANCE As Global.System.Nullable(Of Integer), ByVal Original_STORE_ID As Integer, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_UNIT_TYPE As String, ByVal Original_UNIT_NAME As String, ByVal Original_RATIO_QTY As Global.System.Nullable(Of Integer), ByVal Original_BALANCE As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ITEM_ID, UNIT_TYPE, UNIT_NAME, RATIO_QTY, BALANCE, Original_STORE_ID, Original_ITEM_ID, Original_UNIT_TYPE, Original_UNIT_NAME, Original_RATIO_QTY, Original_BALANCE, Original_STORE_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ORDERSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ORDERS"
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("SUPPLIER_NO", "SUPPLIER_NO")
            tableMapping.ColumnMappings.Add("ORDE_DATE", "ORDE_DATE")
            tableMapping.ColumnMappings.Add("TOTAL_R", "TOTAL_R")
            tableMapping.ColumnMappings.Add("TOTAL_D", "TOTAL_D")
            tableMapping.ColumnMappings.Add("TOTAL_B", "TOTAL_B")
            tableMapping.ColumnMappings.Add("ORDER_NOTE", "ORDER_NOTE")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("ORDE_STATUS", "ORDE_STATUS")
            tableMapping.ColumnMappings.Add("YEARS", "YEARS")
            tableMapping.ColumnMappings.Add("STATUS_PAY", "STATUS_PAY")
            tableMapping.ColumnMappings.Add("RECEIVED_DATE", "RECEIVED_DATE")
            tableMapping.ColumnMappings.Add("IS_DEL", "IS_DEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ORDERS] WHERE (([ORDE_ID] = @Original_ORDE_ID) AND ((@IsNull_ORDER_N"& _ 
                "O = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_ORDER_NO)) AND ((@IsNul"& _ 
                "l_SUPPLIER_NO = 1 AND [SUPPLIER_NO] IS NULL) OR ([SUPPLIER_NO] = @Original_SUPPL"& _ 
                "IER_NO)) AND ((@IsNull_ORDE_DATE = 1 AND [ORDE_DATE] IS NULL) OR ([ORDE_DATE] = "& _ 
                "@Original_ORDE_DATE)) AND ((@IsNull_TOTAL_R = 1 AND [TOTAL_R] IS NULL) OR ([TOTA"& _ 
                "L_R] = @Original_TOTAL_R)) AND ((@IsNull_TOTAL_D = 1 AND [TOTAL_D] IS NULL) OR ("& _ 
                "[TOTAL_D] = @Original_TOTAL_D)) AND ((@IsNull_TOTAL_B = 1 AND [TOTAL_B] IS NULL)"& _ 
                " OR ([TOTAL_B] = @Original_TOTAL_B)) AND ((@IsNull_ORDER_NOTE = 1 AND [ORDER_NOT"& _ 
                "E] IS NULL) OR ([ORDER_NOTE] = @Original_ORDER_NOTE)) AND ((@IsNull_USER_ID = 1 "& _ 
                "AND [USER_ID] IS NULL) OR ([USER_ID] = @Original_USER_ID)) AND ((@IsNull_ORDE_ST"& _ 
                "ATUS = 1 AND [ORDE_STATUS] IS NULL) OR ([ORDE_STATUS] = @Original_ORDE_STATUS)) "& _ 
                "AND ((@IsNull_YEARS = 1 AND [YEARS] IS NULL) OR ([YEARS] = @Original_YEARS)) AND"& _ 
                " ((@IsNull_STATUS_PAY = 1 AND [STATUS_PAY] IS NULL) OR ([STATUS_PAY] = @Original"& _ 
                "_STATUS_PAY)) AND ((@IsNull_RECEIVED_DATE = 1 AND [RECEIVED_DATE] IS NULL) OR (["& _ 
                "RECEIVED_DATE] = @Original_RECEIVED_DATE)) AND ((@IsNull_IS_DEL = 1 AND [IS_DEL]"& _ 
                " IS NULL) OR ([IS_DEL] = @Original_IS_DEL)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_R", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_D", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS_PAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVED_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ORDERS] ([ORDER_NO], [SUPPLIER_NO], [ORDE_DATE], [TOTAL_R], [TOTAL_D"& _ 
                "], [TOTAL_B], [ORDER_NOTE], [USER_ID], [ORDE_STATUS], [YEARS], [STATUS_PAY], [RE"& _ 
                "CEIVED_DATE], [IS_DEL]) VALUES (@ORDER_NO, @SUPPLIER_NO, @ORDE_DATE, @TOTAL_R, @"& _ 
                "TOTAL_D, @TOTAL_B, @ORDER_NOTE, @USER_ID, @ORDE_STATUS, @YEARS, @STATUS_PAY, @RE"& _ 
                "CEIVED_DATE, @IS_DEL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ORDE_ID, ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_"& _ 
                "R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, RECEIV"& _ 
                "ED_DATE, IS_DEL FROM ORDERS WHERE (ORDE_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ORDERS] SET [ORDER_NO] = @ORDER_NO, [SUPPLIER_NO] = @SUPPLIER_NO, [ORDE_D"& _ 
                "ATE] = @ORDE_DATE, [TOTAL_R] = @TOTAL_R, [TOTAL_D] = @TOTAL_D, [TOTAL_B] = @TOTA"& _ 
                "L_B, [ORDER_NOTE] = @ORDER_NOTE, [USER_ID] = @USER_ID, [ORDE_STATUS] = @ORDE_STA"& _ 
                "TUS, [YEARS] = @YEARS, [STATUS_PAY] = @STATUS_PAY, [RECEIVED_DATE] = @RECEIVED_D"& _ 
                "ATE, [IS_DEL] = @IS_DEL WHERE (([ORDE_ID] = @Original_ORDE_ID) AND ((@IsNull_ORD"& _ 
                "ER_NO = 1 AND [ORDER_NO] IS NULL) OR ([ORDER_NO] = @Original_ORDER_NO)) AND ((@I"& _ 
                "sNull_SUPPLIER_NO = 1 AND [SUPPLIER_NO] IS NULL) OR ([SUPPLIER_NO] = @Original_S"& _ 
                "UPPLIER_NO)) AND ((@IsNull_ORDE_DATE = 1 AND [ORDE_DATE] IS NULL) OR ([ORDE_DATE"& _ 
                "] = @Original_ORDE_DATE)) AND ((@IsNull_TOTAL_R = 1 AND [TOTAL_R] IS NULL) OR (["& _ 
                "TOTAL_R] = @Original_TOTAL_R)) AND ((@IsNull_TOTAL_D = 1 AND [TOTAL_D] IS NULL) "& _ 
                "OR ([TOTAL_D] = @Original_TOTAL_D)) AND ((@IsNull_TOTAL_B = 1 AND [TOTAL_B] IS N"& _ 
                "ULL) OR ([TOTAL_B] = @Original_TOTAL_B)) AND ((@IsNull_ORDER_NOTE = 1 AND [ORDER"& _ 
                "_NOTE] IS NULL) OR ([ORDER_NOTE] = @Original_ORDER_NOTE)) AND ((@IsNull_USER_ID "& _ 
                "= 1 AND [USER_ID] IS NULL) OR ([USER_ID] = @Original_USER_ID)) AND ((@IsNull_ORD"& _ 
                "E_STATUS = 1 AND [ORDE_STATUS] IS NULL) OR ([ORDE_STATUS] = @Original_ORDE_STATU"& _ 
                "S)) AND ((@IsNull_YEARS = 1 AND [YEARS] IS NULL) OR ([YEARS] = @Original_YEARS))"& _ 
                " AND ((@IsNull_STATUS_PAY = 1 AND [STATUS_PAY] IS NULL) OR ([STATUS_PAY] = @Orig"& _ 
                "inal_STATUS_PAY)) AND ((@IsNull_RECEIVED_DATE = 1 AND [RECEIVED_DATE] IS NULL) O"& _ 
                "R ([RECEIVED_DATE] = @Original_RECEIVED_DATE)) AND ((@IsNull_IS_DEL = 1 AND [IS_"& _ 
                "DEL] IS NULL) OR ([IS_DEL] = @Original_IS_DEL)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ORDE_ID, ORDER_NO, SUP"& _ 
                "PLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS"& _ 
                ", YEARS, STATUS_PAY, RECEIVED_DATE, IS_DEL FROM ORDERS WHERE (ORDE_ID = @ORDE_ID"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUPPLIER_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_R", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_D", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDER_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_STATUS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_YEARS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_STATUS_PAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVED_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ORDE_ID, ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDE"& _ 
                "R_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, RECEIVED_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "    IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ORDERS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(*) FROM ORDERS WHERE ORDER_NO=@ORDER_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE [ORDERS] SET [IS_DEL] = @IS_DEL WHERE (([ORDE_ID] = @Original_ORDE_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO ORDERS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R,"& _ 
                " TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES "& _ 
                "(@ORDER_NO,@SUPPLIER_NO,@ORDE_DATE,@TOTAL_R,@TOTAL_D,@TOTAL_B,@ORDER_NOTE,@USER_"& _ 
                "ID,@ORDE_STATUS,@YEARS,@STATUS_PAY); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_R", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_D", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_B", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEARS", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "INSERT INTO ORDERS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (ORDER_NO, SUPPLIER_NO, ORDE_DATE, T"& _ 
                "OTAL_R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, R"& _ 
                "ECEIVED_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         REFERREN_NO)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@ORDER_NO,"& _ 
                "@SUPPLIER_NO,@ORDE_DATE,@TOTAL_R,@TOTAL_D,@TOTAL_B,@ORDER_NOTE,@USER_ID,@ORDE_ST"& _ 
                "ATUS,@YEARS,@STATUS_PAY,@RECEIVED_DATE,@REFERREN_NO);  "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_R", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_D", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_B", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEARS", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS_PAY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT COUNT(*) FROM ORDERS WHERE YEARS=@YEARS"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@YEARS", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "YEARS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "UPDATE       ORDERS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                ORDE_STATUS = @ORDE_STATUS, RECEIVED_DATE"& _ 
                " = @RECEIVED_DATE, REFERREN_NO = @REFERREN_NO,ORDER_NOTE=@ORDER_NOTE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "   (ORDE_ID = @Original_ORDE_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REFERREN_NO", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "REFERREN_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NOTE", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDER_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "UPDATE [ORDERS] SET  [TOTAL_R] = @TOTAL_R, [TOTAL_D] = @TOTAL_D, [TOTAL_B] = @TOT"& _ 
                "AL_B WHERE ORDER_NO=@ORDER_NO"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_R", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_D", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_B", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.ORDERSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.ORDERSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.ORDERSDataTable = New DSPurchaseOrder.ORDERSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSPurchaseOrder.ORDERSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "ORDERS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ORDE_ID As Long, ByVal Original_ORDER_NO As Global.System.Nullable(Of Decimal), ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal Original_ORDE_DATE As Global.System.Nullable(Of Date), ByVal Original_TOTAL_R As Global.System.Nullable(Of Double), ByVal Original_TOTAL_D As Global.System.Nullable(Of Double), ByVal Original_TOTAL_B As Global.System.Nullable(Of Double), ByVal Original_ORDER_NOTE As String, ByVal Original_USER_ID As Global.System.Nullable(Of Integer), ByVal Original_ORDE_STATUS As String, ByVal Original_YEARS As Global.System.Nullable(Of Integer), ByVal Original_STATUS_PAY As String, ByVal Original_RECEIVED_DATE As Global.System.Nullable(Of Date), ByVal Original_IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ORDE_ID,Long)
            If (Original_ORDER_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ORDE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_R.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TOTAL_R.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TOTAL_D.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_B.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TOTAL_B.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ORDER_NOTE,String)
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_STATUS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ORDE_STATUS,String)
            End If
            If (Original_YEARS.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_YEARS.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_STATUS_PAY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_STATUS_PAY,String)
            End If
            If (Original_RECEIVED_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_RECEIVED_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IS_DEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ORDER_NO As Global.System.Nullable(Of Decimal), ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal ORDE_DATE As Global.System.Nullable(Of Date), ByVal TOTAL_R As Global.System.Nullable(Of Double), ByVal TOTAL_D As Global.System.Nullable(Of Double), ByVal TOTAL_B As Global.System.Nullable(Of Double), ByVal ORDER_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal ORDE_STATUS As String, ByVal YEARS As Global.System.Nullable(Of Integer), ByVal STATUS_PAY As String, ByVal RECEIVED_DATE As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ORDE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_R.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOTAL_R.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(TOTAL_D.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(TOTAL_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ORDER_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ORDE_STATUS,String)
            End If
            If (YEARS.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(YEARS.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (STATUS_PAY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(STATUS_PAY,String)
            End If
            If (RECEIVED_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(RECEIVED_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ORDER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal ORDE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_R As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_D As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_B As Global.System.Nullable(Of Double),  _
                    ByVal ORDER_NOTE As String,  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal ORDE_STATUS As String,  _
                    ByVal YEARS As Global.System.Nullable(Of Integer),  _
                    ByVal STATUS_PAY As String,  _
                    ByVal RECEIVED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ORDE_ID As Long,  _
                    ByVal Original_ORDER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ORDE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_TOTAL_R As Global.System.Nullable(Of Double),  _
                    ByVal Original_TOTAL_D As Global.System.Nullable(Of Double),  _
                    ByVal Original_TOTAL_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDER_NOTE As String,  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ORDE_STATUS As String,  _
                    ByVal Original_YEARS As Global.System.Nullable(Of Integer),  _
                    ByVal Original_STATUS_PAY As String,  _
                    ByVal Original_RECEIVED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal ORDE_ID As Long) As Integer
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ORDE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_R.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TOTAL_R.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(TOTAL_D.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(TOTAL_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ORDER_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ORDE_STATUS,String)
            End If
            If (YEARS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(YEARS.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (STATUS_PAY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(STATUS_PAY,String)
            End If
            If (RECEIVED_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RECEIVED_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ORDE_ID,Long)
            If (Original_ORDER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ORDE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_R.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_TOTAL_R.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_TOTAL_D.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_TOTAL_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDER_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ORDER_NOTE,String)
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_STATUS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ORDE_STATUS,String)
            End If
            If (Original_YEARS.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_YEARS.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_STATUS_PAY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_STATUS_PAY,String)
            End If
            If (Original_RECEIVED_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_RECEIVED_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_IS_DEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(ORDE_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ORDER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal ORDE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal TOTAL_R As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_D As Global.System.Nullable(Of Double),  _
                    ByVal TOTAL_B As Global.System.Nullable(Of Double),  _
                    ByVal ORDER_NOTE As String,  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal ORDE_STATUS As String,  _
                    ByVal YEARS As Global.System.Nullable(Of Integer),  _
                    ByVal STATUS_PAY As String,  _
                    ByVal RECEIVED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ORDE_ID As Long,  _
                    ByVal Original_ORDER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUPPLIER_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ORDE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_TOTAL_R As Global.System.Nullable(Of Double),  _
                    ByVal Original_TOTAL_D As Global.System.Nullable(Of Double),  _
                    ByVal Original_TOTAL_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDER_NOTE As String,  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ORDE_STATUS As String,  _
                    ByVal Original_YEARS As Global.System.Nullable(Of Integer),  _
                    ByVal Original_STATUS_PAY As String,  _
                    ByVal Original_RECEIVED_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDER_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, RECEIVED_DATE, IS_DEL, Original_ORDE_ID, Original_ORDER_NO, Original_SUPPLIER_NO, Original_ORDE_DATE, Original_TOTAL_R, Original_TOTAL_D, Original_TOTAL_B, Original_ORDER_NOTE, Original_USER_ID, Original_ORDE_STATUS, Original_YEARS, Original_STATUS_PAY, Original_RECEIVED_DATE, Original_IS_DEL, Original_ORDE_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckExistPurchasNo(ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ORDER_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function DeleteOrder(ByVal IS_DEL As Global.System.Nullable(Of Integer), ByVal Original_ORDE_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (IS_DEL.HasValue = true) Then
                command.Parameters(0).Value = CType(IS_DEL.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            command.Parameters(1).Value = CType(Original_ORDE_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertPurchaseOrder(ByVal ORDER_NO As Global.System.Nullable(Of Decimal), ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal ORDE_DATE As Global.System.Nullable(Of Date), ByVal TOTAL_R As Global.System.Nullable(Of Double), ByVal TOTAL_D As Global.System.Nullable(Of Double), ByVal TOTAL_B As Global.System.Nullable(Of Double), ByVal ORDER_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal ORDE_STATUS As String, ByVal YEARS As Global.System.Nullable(Of Integer), ByVal STATUS_PAY As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ORDER_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                command.Parameters(1).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_DATE.HasValue = true) Then
                command.Parameters(2).Value = CType(ORDE_DATE.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_R.HasValue = true) Then
                command.Parameters(3).Value = CType(TOTAL_R.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_D.HasValue = true) Then
                command.Parameters(4).Value = CType(TOTAL_D.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_B.HasValue = true) Then
                command.Parameters(5).Value = CType(TOTAL_B.Value,Double)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NOTE Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(ORDER_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                command.Parameters(7).Value = CType(USER_ID.Value,Integer)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(ORDE_STATUS,String)
            End If
            If (YEARS.HasValue = true) Then
                command.Parameters(9).Value = CType(YEARS.Value,Integer)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (STATUS_PAY Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(STATUS_PAY,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertReceiveProduct(ByVal ORDER_NO As Global.System.Nullable(Of Decimal), ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal), ByVal ORDE_DATE As Global.System.Nullable(Of Date), ByVal TOTAL_R As Global.System.Nullable(Of Double), ByVal TOTAL_D As Global.System.Nullable(Of Double), ByVal TOTAL_B As Global.System.Nullable(Of Double), ByVal ORDER_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal ORDE_STATUS As String, ByVal YEARS As Global.System.Nullable(Of Integer), ByVal STATUS_PAY As String, ByVal RECEIVED_DATE As Global.System.Nullable(Of Date), ByVal REFERREN_NO As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (ORDER_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                command.Parameters(1).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_DATE.HasValue = true) Then
                command.Parameters(2).Value = CType(ORDE_DATE.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_R.HasValue = true) Then
                command.Parameters(3).Value = CType(TOTAL_R.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_D.HasValue = true) Then
                command.Parameters(4).Value = CType(TOTAL_D.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_B.HasValue = true) Then
                command.Parameters(5).Value = CType(TOTAL_B.Value,Double)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NOTE Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(ORDER_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                command.Parameters(7).Value = CType(USER_ID.Value,Integer)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(ORDE_STATUS,String)
            End If
            If (YEARS.HasValue = true) Then
                command.Parameters(9).Value = CType(YEARS.Value,Integer)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (STATUS_PAY Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(STATUS_PAY,String)
            End If
            If (RECEIVED_DATE.HasValue = true) Then
                command.Parameters(11).Value = CType(RECEIVED_DATE.Value,Date)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (REFERREN_NO Is Nothing) Then
                command.Parameters(12).Value = Global.System.DBNull.Value
            Else
                command.Parameters(12).Value = CType(REFERREN_NO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectOrderNoByYear(ByVal YEARS As Global.System.Nullable(Of Integer)) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            If (YEARS.HasValue = true) Then
                command.Parameters(0).Value = CType(YEARS.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateDateReceiveAndStatus(ByVal ORDE_STATUS As String, ByVal RECEIVED_DATE As Global.System.Nullable(Of Date), ByVal REFERREN_NO As String, ByVal ORDER_NOTE As String, ByVal Original_ORDE_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(6)
            If (ORDE_STATUS Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(ORDE_STATUS,String)
            End If
            If (RECEIVED_DATE.HasValue = true) Then
                command.Parameters(1).Value = CType(RECEIVED_DATE.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (REFERREN_NO Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(REFERREN_NO,String)
            End If
            If (ORDER_NOTE Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ORDER_NOTE,String)
            End If
            command.Parameters(4).Value = CType(Original_ORDE_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateTotalPrice(ByVal TOTAL_R As Global.System.Nullable(Of Double), ByVal TOTAL_D As Global.System.Nullable(Of Double), ByVal TOTAL_B As Global.System.Nullable(Of Double), ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(7)
            If (TOTAL_R.HasValue = true) Then
                command.Parameters(0).Value = CType(TOTAL_R.Value,Double)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_D.HasValue = true) Then
                command.Parameters(1).Value = CType(TOTAL_D.Value,Double)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_B.HasValue = true) Then
                command.Parameters(2).Value = CType(TOTAL_B.Value,Double)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NO.HasValue = true) Then
                command.Parameters(3).Value = CType(ORDER_NO.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ORDER_DETAILSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ORDER_DETAILS"
            tableMapping.ColumnMappings.Add("DETA_ID", "DETA_ID")
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("ORDE_QTY", "ORDE_QTY")
            tableMapping.ColumnMappings.Add("COST", "COST")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_D", "ORDE_PRICE_D")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_R", "ORDE_PRICE_R")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_B", "ORDE_PRICE_B")
            tableMapping.ColumnMappings.Add("RECEIVE_QTY", "RECEIVE_QTY")
            tableMapping.ColumnMappings.Add("IS_CURRENCY", "IS_CURRENCY")
            tableMapping.ColumnMappings.Add("PROMOTION_QTY", "PROMOTION_QTY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ORDER_DETAILS] WHERE (([DETA_ID] = @Original_DETA_ID) AND ((@IsNull_"& _ 
                "ORDE_ID = 1 AND [ORDE_ID] IS NULL) OR ([ORDE_ID] = @Original_ORDE_ID)) AND ((@Is"& _ 
                "Null_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND "& _ 
                "((@IsNull_UNIT_NAME = 1 AND [UNIT_NAME] IS NULL) OR ([UNIT_NAME] = @Original_UNI"& _ 
                "T_NAME)) AND ((@IsNull_ORDE_QTY = 1 AND [ORDE_QTY] IS NULL) OR ([ORDE_QTY] = @Or"& _ 
                "iginal_ORDE_QTY)) AND ((@IsNull_COST = 1 AND [COST] IS NULL) OR ([COST] = @Origi"& _ 
                "nal_COST)) AND ((@IsNull_ORDE_PRICE_D = 1 AND [ORDE_PRICE_D] IS NULL) OR ([ORDE_"& _ 
                "PRICE_D] = @Original_ORDE_PRICE_D)) AND ((@IsNull_ORDE_PRICE_R = 1 AND [ORDE_PRI"& _ 
                "CE_R] IS NULL) OR ([ORDE_PRICE_R] = @Original_ORDE_PRICE_R)) AND ((@IsNull_ORDE_"& _ 
                "PRICE_B = 1 AND [ORDE_PRICE_B] IS NULL) OR ([ORDE_PRICE_B] = @Original_ORDE_PRIC"& _ 
                "E_B)) AND ((@IsNull_RECEIVE_QTY = 1 AND [RECEIVE_QTY] IS NULL) OR ([RECEIVE_QTY]"& _ 
                " = @Original_RECEIVE_QTY)) AND ((@IsNull_IS_CURRENCY = 1 AND [IS_CURRENCY] IS NU"& _ 
                "LL) OR ([IS_CURRENCY] = @Original_IS_CURRENCY)) AND ((@IsNull_PROMOTION_QTY = 1 "& _ 
                "AND [PROMOTION_QTY] IS NULL) OR ([PROMOTION_QTY] = @Original_PROMOTION_QTY)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETA_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COST", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_D", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_R", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_CURRENCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROMOTION_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ORDER_DETAILS] ([ORDE_ID], [ITEM_ID], [UNIT_NAME], [ORDE_QTY], [COST"& _ 
                "], [ORDE_PRICE_D], [ORDE_PRICE_R], [ORDE_PRICE_B], [RECEIVE_QTY], [IS_CURRENCY],"& _ 
                " [PROMOTION_QTY]) VALUES (@ORDE_ID, @ITEM_ID, @UNIT_NAME, @ORDE_QTY, @COST, @ORD"& _ 
                "E_PRICE_D, @ORDE_PRICE_R, @ORDE_PRICE_B, @RECEIVE_QTY, @IS_CURRENCY, @PROMOTION_"& _ 
                "QTY);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DETA_ID, ORDE_ID, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D"& _ 
                ", ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY FROM ORDER"& _ 
                "_DETAILS WHERE (DETA_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COST", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ORDER_DETAILS] SET [ORDE_ID] = @ORDE_ID, [ITEM_ID] = @ITEM_ID, [UNIT_NAME"& _ 
                "] = @UNIT_NAME, [ORDE_QTY] = @ORDE_QTY, [COST] = @COST, [ORDE_PRICE_D] = @ORDE_P"& _ 
                "RICE_D, [ORDE_PRICE_R] = @ORDE_PRICE_R, [ORDE_PRICE_B] = @ORDE_PRICE_B, [RECEIVE"& _ 
                "_QTY] = @RECEIVE_QTY, [IS_CURRENCY] = @IS_CURRENCY, [PROMOTION_QTY] = @PROMOTION"& _ 
                "_QTY WHERE (([DETA_ID] = @Original_DETA_ID) AND ((@IsNull_ORDE_ID = 1 AND [ORDE_"& _ 
                "ID] IS NULL) OR ([ORDE_ID] = @Original_ORDE_ID)) AND ((@IsNull_ITEM_ID = 1 AND ["& _ 
                "ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNull_UNIT_NAME = "& _ 
                "1 AND [UNIT_NAME] IS NULL) OR ([UNIT_NAME] = @Original_UNIT_NAME)) AND ((@IsNull"& _ 
                "_ORDE_QTY = 1 AND [ORDE_QTY] IS NULL) OR ([ORDE_QTY] = @Original_ORDE_QTY)) AND "& _ 
                "((@IsNull_COST = 1 AND [COST] IS NULL) OR ([COST] = @Original_COST)) AND ((@IsNu"& _ 
                "ll_ORDE_PRICE_D = 1 AND [ORDE_PRICE_D] IS NULL) OR ([ORDE_PRICE_D] = @Original_O"& _ 
                "RDE_PRICE_D)) AND ((@IsNull_ORDE_PRICE_R = 1 AND [ORDE_PRICE_R] IS NULL) OR ([OR"& _ 
                "DE_PRICE_R] = @Original_ORDE_PRICE_R)) AND ((@IsNull_ORDE_PRICE_B = 1 AND [ORDE_"& _ 
                "PRICE_B] IS NULL) OR ([ORDE_PRICE_B] = @Original_ORDE_PRICE_B)) AND ((@IsNull_RE"& _ 
                "CEIVE_QTY = 1 AND [RECEIVE_QTY] IS NULL) OR ([RECEIVE_QTY] = @Original_RECEIVE_Q"& _ 
                "TY)) AND ((@IsNull_IS_CURRENCY = 1 AND [IS_CURRENCY] IS NULL) OR ([IS_CURRENCY] "& _ 
                "= @Original_IS_CURRENCY)) AND ((@IsNull_PROMOTION_QTY = 1 AND [PROMOTION_QTY] IS"& _ 
                " NULL) OR ([PROMOTION_QTY] = @Original_PROMOTION_QTY)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DETA_ID, ORDE_I"& _ 
                "D, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B,"& _ 
                " RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY FROM ORDER_DETAILS WHERE (DETA_ID = @DE"& _ 
                "TA_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COST", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETA_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COST", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_D", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_R", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDE_PRICE_B", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDE_PRICE_B", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_CURRENCY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PROMOTION_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETA_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DETA_ID, ORDE_ID, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_P"& _ 
                "RICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ORDER_DE"& _ 
                "TAILS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(*) FROM ORDER_DETAILS WHERE ORDE_ID=@ORDE_ID and ITEM_ID=@ITEM_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "DELETE FROM [ORDER_DETAILS] WHERE ([DETA_ID] = @Original_DETA_ID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETA_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO ORDER_DETAILS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (ORDE_ID, ITEM_ID, UNIT_NAME,"& _ 
                " ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, IS_CURRENCY, PROMOTIO"& _ 
                "N_QTY, UNIT_NAME_FREE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         RECEIVE_QTY)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@"& _ 
                "ORDE_ID,@ITEM_ID,@UNIT_NAME,@ORDE_QTY,@COST,@ORDE_PRICE_D,@ORDE_PRICE_R,@ORDE_PR"& _ 
                "ICE_B,@IS_CURRENCY,@PROMOTION_QTY,@UNIT_NAME_FREE,@RECEIVE_QTY);   "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COST", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_D", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_D", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_R", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_R", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_PRICE_B", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_PRICE_B", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_CURRENCY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_CURRENCY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME_FREE", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME_FREE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "UPDATE [ORDER_DETAILS] SET [RECEIVE_QTY] = @RECEIVE_QTY,PROMOTION_QTY=@PROMOTION_"& _ 
                "QTY WHERE (([DETA_ID] = @Original_DETA_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVE_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROMOTION_QTY", Global.System.Data.SqlDbType.Float, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PROMOTION_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETA_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DETA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.ORDER_DETAILSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.ORDER_DETAILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.ORDER_DETAILSDataTable = New DSPurchaseOrder.ORDER_DETAILSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSPurchaseOrder.ORDER_DETAILSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "ORDER_DETAILS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DETA_ID As Long, ByVal Original_ORDE_ID As Global.System.Nullable(Of Long), ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_UNIT_NAME As String, ByVal Original_ORDE_QTY As Global.System.Nullable(Of Double), ByVal Original_COST As Global.System.Nullable(Of Double), ByVal Original_ORDE_PRICE_D As Global.System.Nullable(Of Double), ByVal Original_ORDE_PRICE_R As Global.System.Nullable(Of Double), ByVal Original_ORDE_PRICE_B As Global.System.Nullable(Of Double), ByVal Original_RECEIVE_QTY As Global.System.Nullable(Of Double), ByVal Original_IS_CURRENCY As String, ByVal Original_PROMOTION_QTY As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DETA_ID,Long)
            If (Original_ORDE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ORDE_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_ORDE_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ORDE_QTY.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_COST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_COST.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_D.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ORDE_PRICE_D.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_R.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ORDE_PRICE_R.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_B.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_ORDE_PRICE_B.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_RECEIVE_QTY.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_CURRENCY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_IS_CURRENCY,String)
            End If
            If (Original_PROMOTION_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_PROMOTION_QTY.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_NAME As String, ByVal ORDE_QTY As Global.System.Nullable(Of Double), ByVal COST As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_D As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_R As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_B As Global.System.Nullable(Of Double), ByVal RECEIVE_QTY As Global.System.Nullable(Of Double), ByVal IS_CURRENCY As String, ByVal PROMOTION_QTY As Global.System.Nullable(Of Double)) As Integer
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (ORDE_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ORDE_QTY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (COST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(COST.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_D.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ORDE_PRICE_D.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_R.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ORDE_PRICE_R.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_B.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ORDE_PRICE_B.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RECEIVE_QTY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IS_CURRENCY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IS_CURRENCY,String)
            End If
            If (PROMOTION_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(PROMOTION_QTY.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ORDE_ID As Global.System.Nullable(Of Long),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal UNIT_NAME As String,  _
                    ByVal ORDE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal COST As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_D As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_R As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_B As Global.System.Nullable(Of Double),  _
                    ByVal RECEIVE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal IS_CURRENCY As String,  _
                    ByVal PROMOTION_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_DETA_ID As Long,  _
                    ByVal Original_ORDE_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UNIT_NAME As String,  _
                    ByVal Original_ORDE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_COST As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_D As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_R As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_RECEIVE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_IS_CURRENCY As String,  _
                    ByVal Original_PROMOTION_QTY As Global.System.Nullable(Of Double),  _
                    ByVal DETA_ID As Long) As Integer
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (ORDE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ORDE_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(COST.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ORDE_PRICE_D.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_R.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ORDE_PRICE_R.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ORDE_PRICE_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RECEIVE_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IS_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IS_CURRENCY,String)
            End If
            If (PROMOTION_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PROMOTION_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DETA_ID,Long)
            If (Original_ORDE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ORDE_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_ORDE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ORDE_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_COST.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_D.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ORDE_PRICE_D.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_R.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_ORDE_PRICE_R.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ORDE_PRICE_B.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ORDE_PRICE_B.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_RECEIVE_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_CURRENCY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_IS_CURRENCY,String)
            End If
            If (Original_PROMOTION_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_PROMOTION_QTY.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(DETA_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ORDE_ID As Global.System.Nullable(Of Long),  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal UNIT_NAME As String,  _
                    ByVal ORDE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal COST As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_D As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_R As Global.System.Nullable(Of Double),  _
                    ByVal ORDE_PRICE_B As Global.System.Nullable(Of Double),  _
                    ByVal RECEIVE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal IS_CURRENCY As String,  _
                    ByVal PROMOTION_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_DETA_ID As Long,  _
                    ByVal Original_ORDE_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UNIT_NAME As String,  _
                    ByVal Original_ORDE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_COST As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_D As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_R As Global.System.Nullable(Of Double),  _
                    ByVal Original_ORDE_PRICE_B As Global.System.Nullable(Of Double),  _
                    ByVal Original_RECEIVE_QTY As Global.System.Nullable(Of Double),  _
                    ByVal Original_IS_CURRENCY As String,  _
                    ByVal Original_PROMOTION_QTY As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(ORDE_ID, ITEM_ID, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, PROMOTION_QTY, Original_DETA_ID, Original_ORDE_ID, Original_ITEM_ID, Original_UNIT_NAME, Original_ORDE_QTY, Original_COST, Original_ORDE_PRICE_D, Original_ORDE_PRICE_R, Original_ORDE_PRICE_B, Original_RECEIVE_QTY, Original_IS_CURRENCY, Original_PROMOTION_QTY, Original_DETA_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckExistItem(ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ORDE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteOrderDetailByItem(ByVal Original_DETA_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Original_DETA_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertPurchaseOrderDetail(ByVal ORDE_ID As Global.System.Nullable(Of Long), ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_NAME As String, ByVal ORDE_QTY As Global.System.Nullable(Of Double), ByVal COST As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_D As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_R As Global.System.Nullable(Of Double), ByVal ORDE_PRICE_B As Global.System.Nullable(Of Double), ByVal IS_CURRENCY As String, ByVal PROMOTION_QTY As Global.System.Nullable(Of Double), ByVal UNIT_NAME_FREE As String, ByVal RECEIVE_QTY As Global.System.Nullable(Of Double)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ORDE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (ORDE_QTY.HasValue = true) Then
                command.Parameters(3).Value = CType(ORDE_QTY.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (COST.HasValue = true) Then
                command.Parameters(4).Value = CType(COST.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_D.HasValue = true) Then
                command.Parameters(5).Value = CType(ORDE_PRICE_D.Value,Double)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_R.HasValue = true) Then
                command.Parameters(6).Value = CType(ORDE_PRICE_R.Value,Double)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (ORDE_PRICE_B.HasValue = true) Then
                command.Parameters(7).Value = CType(ORDE_PRICE_B.Value,Double)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IS_CURRENCY Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(IS_CURRENCY,String)
            End If
            If (PROMOTION_QTY.HasValue = true) Then
                command.Parameters(9).Value = CType(PROMOTION_QTY.Value,Double)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME_FREE Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(UNIT_NAME_FREE,String)
            End If
            If (RECEIVE_QTY.HasValue = true) Then
                command.Parameters(11).Value = CType(RECEIVE_QTY.Value,Double)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateQTYReceived(ByVal RECEIVE_QTY As Global.System.Nullable(Of Double), ByVal PROMOTION_QTY As Global.System.Nullable(Of Double), ByVal Original_DETA_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (RECEIVE_QTY.HasValue = true) Then
                command.Parameters(0).Value = CType(RECEIVE_QTY.Value,Double)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PROMOTION_QTY.HasValue = true) Then
                command.Parameters(1).Value = CType(PROMOTION_QTY.Value,Double)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            command.Parameters(2).Value = CType(Original_DETA_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PURCAHSE_ORDER_MAIN_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PURCAHSE_ORDER_MAIN_VIEW"
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("SUPPLIER_NO", "SUPPLIER_NO")
            tableMapping.ColumnMappings.Add("SUPP_NAME", "SUPP_NAME")
            tableMapping.ColumnMappings.Add("SUPP_ADDRESS", "SUPP_ADDRESS")
            tableMapping.ColumnMappings.Add("SUPP_PHONE", "SUPP_PHONE")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("ORDE_QTY", "ORDE_QTY")
            tableMapping.ColumnMappings.Add("COST", "COST")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_D", "ORDE_PRICE_D")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_B", "ORDE_PRICE_B")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_R", "ORDE_PRICE_R")
            tableMapping.ColumnMappings.Add("RECEIVE_QTY", "RECEIVE_QTY")
            tableMapping.ColumnMappings.Add("PROMOTION_QTY", "PROMOTION_QTY")
            tableMapping.ColumnMappings.Add("IS_DEL", "IS_DEL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ORDE_ID, ORDER_NO, SUPPLIER_NO, SUPP_NAME, SUPP_ADDRESS, SUPP_PHONE, ITEM_"& _ 
                "ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRICE_D, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ORDE"& _ 
                "_PRICE_B, ORDE_PRICE_R, RECEIVE_QTY, PROMOTION_QTY, IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     PURCAHSE_OR"& _ 
                "DER_MAIN_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COST, IS_DEL, ITEM_ID, ITEM_NAME, ORDER_NO, ORDE_ID, ORDE_PRICE_B, ORDE_PR"& _ 
                "ICE_D, ORDE_PRICE_R, ORDE_QTY, PROMOTION_QTY, RECEIVE_QTY, SUPPLIER_NO, SUPP_ADD"& _ 
                "RESS, SUPP_NAME, SUPP_PHONE, UNIT_NAME FROM PURCAHSE_ORDER_MAIN_VIEW WHERE (ORDE"& _ 
                "R_NO = @ORDER_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable = New DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable, ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByOrderNo(ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable = New DSPurchaseOrder.PURCAHSE_ORDER_MAIN_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_DETAIL_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            tableMapping.ColumnMappings.Add("DETA_ID", "DETA_ID")
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("ORDE_QTY", "ORDE_QTY")
            tableMapping.ColumnMappings.Add("COST", "COST")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_D", "ORDE_PRICE_D")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_R", "ORDE_PRICE_R")
            tableMapping.ColumnMappings.Add("ORDE_PRICE_B", "ORDE_PRICE_B")
            tableMapping.ColumnMappings.Add("RECEIVE_QTY", "RECEIVE_QTY")
            tableMapping.ColumnMappings.Add("IS_CURRENCY", "IS_CURRENCY")
            tableMapping.ColumnMappings.Add("PROMOTION_QTY", "PROMOTION_QTY")
            tableMapping.ColumnMappings.Add("UNIT_NAME_FREE", "UNIT_NAME_FREE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DETA_ID, ORDE_ID, ITEM_ID, ITEM_NAME, UNIT_NAME, ORDE_QTY, COST, ORDE_PRIC"& _ 
                "E_D, ORDE_PRICE_R, ORDE_PRICE_B, RECEIVE_QTY, IS_CURRENCY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  P"& _ 
                "ROMOTION_QTY, UNIT_NAME_FREE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     PURCHASE_ORDER_MASTER_DETAIL_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COST, DETA_ID, IS_CURRENCY, ITEM_ID, ITEM_NAME, ORDE_ID, ORDE_PRICE_B, ORD"& _ 
                "E_PRICE_D, ORDE_PRICE_R, ORDE_QTY, PROMOTION_QTY, RECEIVE_QTY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "   UNIT_NAME, UNIT_NAME_FREE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     PURCHASE_ORDER_MASTER_DETAIL_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                " (ORDE_ID = @ORDE_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable, ByVal ORDE_ID As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectOrderDetailByID(ByVal ORDE_ID As Global.System.Nullable(Of Long)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDE_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDE_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_DETAIL_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PURCHASE_ORDER_MASTER_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PURCHASE_ORDER_MASTER_VIEW"
            tableMapping.ColumnMappings.Add("ORDE_ID", "ORDE_ID")
            tableMapping.ColumnMappings.Add("ORDER_NO", "ORDER_NO")
            tableMapping.ColumnMappings.Add("SUPPLIER_NO", "SUPPLIER_NO")
            tableMapping.ColumnMappings.Add("ORDE_DATE", "ORDE_DATE")
            tableMapping.ColumnMappings.Add("TOTAL_R", "TOTAL_R")
            tableMapping.ColumnMappings.Add("TOTAL_D", "TOTAL_D")
            tableMapping.ColumnMappings.Add("TOTAL_B", "TOTAL_B")
            tableMapping.ColumnMappings.Add("ORDER_NOTE", "ORDER_NOTE")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("ORDE_STATUS", "ORDE_STATUS")
            tableMapping.ColumnMappings.Add("YEARS", "YEARS")
            tableMapping.ColumnMappings.Add("STATUS_PAY", "STATUS_PAY")
            tableMapping.ColumnMappings.Add("SUPP_NAME", "SUPP_NAME")
            tableMapping.ColumnMappings.Add("SUPP_PHONE", "SUPP_PHONE")
            tableMapping.ColumnMappings.Add("SUPP_ADDRESS", "SUPP_ADDRESS")
            tableMapping.ColumnMappings.Add("RECEIVED_DATE", "RECEIVED_DATE")
            tableMapping.ColumnMappings.Add("REFERREN_NO", "REFERREN_NO")
            tableMapping.ColumnMappings.Add("IS_DEL", "IS_DEL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ORDE_ID, ORDER_NO, SUPPLIER_NO, ORDE_DATE, TOTAL_R, TOTAL_D, TOTAL_B, ORDE"& _ 
                "R_NOTE, USER_ID, ORDE_STATUS, YEARS, STATUS_PAY, SUPP_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "SUPP_PHONE, SUPP_ADDRESS, RECEIVED_DATE, REFERREN_NO, IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     PURCHASE_"& _ 
                "ORDER_MASTER_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDER_NO = @ORDER_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDER_NO = @ORDER_NO) AND (ORDE_DATE BETWEEN @DateFrom AND @DateTo)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "SUPP_NAME LIKE '%' + @SupplierName + '%')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SupplierName", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "SUPP_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDE_DATE BETWEEN @from AND @To)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@from", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@To", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDE_DATE BETWEEN @DFrom AND @DTo) AND (ORDE_STATUS = @ORDE_STATUS)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDE_DATE BETWEEN @DFrom AND @DTo) AND (ORDE_STATUS = @ORDE_STATUS) AND (SUPPLIE"& _ 
                "R_NO = @SUPPLIER_NO)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDE_STATUS", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUPPLIER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "SUPPLIER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDE_DATE BETWEEN @DFrom AND @DTo)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT IS_DEL, ORDER_NO, ORDER_NOTE, ORDE_DATE, ORDE_ID, ORDE_STATUS, RECEIVED_DA"& _ 
                "TE, REFERREN_NO, STATUS_PAY, SUPPLIER_NO, SUPP_ADDRESS, SUPP_NAME, SUPP_PHONE, T"& _ 
                "OTAL_B, TOTAL_D, TOTAL_R, USER_ID, YEARS FROM PURCHASE_ORDER_MASTER_VIEW WHERE ("& _ 
                "ORDE_DATE BETWEEN @DFrom AND @DTo) AND (ORDER_NO = @ORDER_NO)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDER_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ORDER_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPurchaseNo(ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal ORDER_NO As Global.System.Nullable(Of Decimal), ByVal DateFrom As Global.System.Nullable(Of Date), ByVal DateTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal ORDER_NO As Global.System.Nullable(Of Decimal), ByVal DateFrom As Global.System.Nullable(Of Date), ByVal DateTo As Global.System.Nullable(Of Date)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DateFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DateFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DateTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DateTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal SupplierName As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (SupplierName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SupplierName,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectBySupplier(ByVal SupplierName As String) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (SupplierName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SupplierName,String)
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal from As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (from.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(from.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectOrderDateToDate(ByVal from As Global.System.Nullable(Of Date), ByVal _To As Global.System.Nullable(Of Date)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (from.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(from.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (_To.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(_To.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy4(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDE_STATUS As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDE_STATUS,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDataToDateWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDE_STATUS As String) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDE_STATUS,String)
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy5(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDE_STATUS As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDE_STATUS,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithSupplier(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDE_STATUS As String, ByVal SUPPLIER_NO As Global.System.Nullable(Of Decimal)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDE_STATUS Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDE_STATUS,String)
            End If
            If (SUPPLIER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(SUPPLIER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy6(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy7(ByVal dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithPurchaseNo(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal ORDER_NO As Global.System.Nullable(Of Decimal)) As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ORDER_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ORDER_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable = New DSPurchaseOrder.PURCHASE_ORDER_MASTER_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ITEM_COSTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ITEM_COSTS"
            tableMapping.ColumnMappings.Add("COST_ID", "COST_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("USD_COST", "USD_COST")
            tableMapping.ColumnMappings.Add("KHR_COST", "KHR_COST")
            tableMapping.ColumnMappings.Add("THB_COST", "THB_COST")
            tableMapping.ColumnMappings.Add("IS_LAST", "IS_LAST")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("DATE_CREATE", "DATE_CREATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ITEM_COSTS] WHERE (([COST_ID] = @Original_COST_ID) AND ((@IsNu"& _ 
                "ll_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND (("& _ 
                "@IsNull_USD_COST = 1 AND [USD_COST] IS NULL) OR ([USD_COST] = @Original_USD_COST"& _ 
                ")) AND ((@IsNull_KHR_COST = 1 AND [KHR_COST] IS NULL) OR ([KHR_COST] = @Original"& _ 
                "_KHR_COST)) AND ((@IsNull_THB_COST = 1 AND [THB_COST] IS NULL) OR ([THB_COST] = "& _ 
                "@Original_THB_COST)) AND ((@IsNull_IS_LAST = 1 AND [IS_LAST] IS NULL) OR ([IS_LA"& _ 
                "ST] = @Original_IS_LAST)) AND ((@IsNull_USER_ID = 1 AND [USER_ID] IS NULL) OR (["& _ 
                "USER_ID] = @Original_USER_ID)) AND ((@IsNull_DATE_CREATE = 1 AND [DATE_CREATE] I"& _ 
                "S NULL) OR ([DATE_CREATE] = @Original_DATE_CREATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATE_CREATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATE_CREATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ITEM_COSTS] ([ITEM_ID], [USD_COST], [KHR_COST], [THB_COST], [I"& _ 
                "S_LAST], [USER_ID], [DATE_CREATE]) VALUES (@ITEM_ID, @USD_COST, @KHR_COST, @THB_"& _ 
                "COST, @IS_LAST, @USER_ID, @DATE_CREATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COST_ID, ITEM_ID, USD_COST, KHR"& _ 
                "_COST, THB_COST, IS_LAST, USER_ID, DATE_CREATE FROM ITEM_COSTS WHERE (COST_ID = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE_CREATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ITEM_COSTS] SET [ITEM_ID] = @ITEM_ID, [USD_COST] = @USD_COST, [KHR_"& _ 
                "COST] = @KHR_COST, [THB_COST] = @THB_COST, [IS_LAST] = @IS_LAST, [USER_ID] = @US"& _ 
                "ER_ID, [DATE_CREATE] = @DATE_CREATE WHERE (([COST_ID] = @Original_COST_ID) AND ("& _ 
                "(@IsNull_ITEM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) "& _ 
                "AND ((@IsNull_USD_COST = 1 AND [USD_COST] IS NULL) OR ([USD_COST] = @Original_US"& _ 
                "D_COST)) AND ((@IsNull_KHR_COST = 1 AND [KHR_COST] IS NULL) OR ([KHR_COST] = @Or"& _ 
                "iginal_KHR_COST)) AND ((@IsNull_THB_COST = 1 AND [THB_COST] IS NULL) OR ([THB_CO"& _ 
                "ST] = @Original_THB_COST)) AND ((@IsNull_IS_LAST = 1 AND [IS_LAST] IS NULL) OR ("& _ 
                "[IS_LAST] = @Original_IS_LAST)) AND ((@IsNull_USER_ID = 1 AND [USER_ID] IS NULL)"& _ 
                " OR ([USER_ID] = @Original_USER_ID)) AND ((@IsNull_DATE_CREATE = 1 AND [DATE_CRE"& _ 
                "ATE] IS NULL) OR ([DATE_CREATE] = @Original_DATE_CREATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT COST_ID, ITE"& _ 
                "M_ID, USD_COST, KHR_COST, THB_COST, IS_LAST, USER_ID, DATE_CREATE FROM ITEM_COST"& _ 
                "S WHERE (COST_ID = @COST_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_COST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATE_CREATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_COST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_COST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_COST", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_COST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_LAST", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_LAST", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DATE_CREATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DATE_CREATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATE_CREATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "COST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT COST_ID, ITEM_ID, USD_COST, KHR_COST, THB_COST, IS_LAST, USER_ID, DATE_CRE"& _ 
                "ATE FROM dbo.ITEM_COSTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT  KHR_COST FROM ITEM_COSTS WHERE ITEM_ID=@ITEM_ID AND IS_LAST=1"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT THB_COST FROM ITEM_COSTS WHERE ITEM_ID=@ITEM_ID AND IS_LAST=1"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT USD_COST FROM ITEM_COSTS WHERE ITEM_ID=@ITEM_ID AND IS_LAST=1"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSPurchaseOrder.ITEM_COSTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSPurchaseOrder.ITEM_COSTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSPurchaseOrder.ITEM_COSTSDataTable = New DSPurchaseOrder.ITEM_COSTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSPurchaseOrder.ITEM_COSTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSPurchaseOrder) As Integer
            Return Me.Adapter.Update(dataSet, "ITEM_COSTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_COST_ID As Long, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_USD_COST As Global.System.Nullable(Of Decimal), ByVal Original_KHR_COST As Global.System.Nullable(Of Decimal), ByVal Original_THB_COST As Global.System.Nullable(Of Decimal), ByVal Original_IS_LAST As Global.System.Nullable(Of Integer), ByVal Original_USER_ID As Global.System.Nullable(Of Integer), ByVal Original_DATE_CREATE As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_COST_ID,Long)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_COST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_USD_COST.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_COST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_KHR_COST.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_COST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_THB_COST.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_LAST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_IS_LAST.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_CREATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_DATE_CREATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal USD_COST As Global.System.Nullable(Of Decimal), ByVal KHR_COST As Global.System.Nullable(Of Decimal), ByVal THB_COST As Global.System.Nullable(Of Decimal), ByVal IS_LAST As Global.System.Nullable(Of Integer), ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal DATE_CREATE As Global.System.Nullable(Of Date)) As Integer
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (USD_COST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(USD_COST.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KHR_COST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(KHR_COST.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_COST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(THB_COST.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_LAST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(IS_LAST.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DATE_CREATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DATE_CREATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal USD_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal KHR_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_LAST As Global.System.Nullable(Of Integer),  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal DATE_CREATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_COST_ID As Long,  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_USD_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_KHR_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_COST As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_LAST As Global.System.Nullable(Of Integer),  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_DATE_CREATE As Global.System.Nullable(Of Date),  _
                    ByVal COST_ID As Long) As Integer
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (USD_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(USD_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KHR_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(KHR_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(THB_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_LAST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(IS_LAST.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DATE_CREATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DATE_CREATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_COST_ID,Long)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_USD_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_KHR_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_COST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_THB_COST.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_LAST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_IS_LAST.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_DATE_CREATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_DATE_CREATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(COST_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal USD_COST As Global.System.Nullable(Of Decimal), ByVal KHR_COST As Global.System.Nullable(Of Decimal), ByVal THB_COST As Global.System.Nullable(Of Decimal), ByVal IS_LAST As Global.System.Nullable(Of Integer), ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal DATE_CREATE As Global.System.Nullable(Of Date), ByVal Original_COST_ID As Long, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_USD_COST As Global.System.Nullable(Of Decimal), ByVal Original_KHR_COST As Global.System.Nullable(Of Decimal), ByVal Original_THB_COST As Global.System.Nullable(Of Decimal), ByVal Original_IS_LAST As Global.System.Nullable(Of Integer), ByVal Original_USER_ID As Global.System.Nullable(Of Integer), ByVal Original_DATE_CREATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(ITEM_ID, USD_COST, KHR_COST, THB_COST, IS_LAST, USER_ID, DATE_CREATE, Original_COST_ID, Original_ITEM_ID, Original_USD_COST, Original_KHR_COST, Original_THB_COST, Original_IS_LAST, Original_USER_ID, Original_DATE_CREATE, Original_COST_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectCurrencyKHR(ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectCurrencyTHB(ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectCurrencyUSD(ByVal ITEM_ID As Global.System.Nullable(Of Integer)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ITEM_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ITEM_ID.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _iTEM_BALANCETableAdapter As ITEM_BALANCETableAdapter
        
        Private _oRDERSTableAdapter As ORDERSTableAdapter
        
        Private _oRDER_DETAILSTableAdapter As ORDER_DETAILSTableAdapter
        
        Private _iTEM_COSTSTableAdapter As ITEM_COSTSTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ITEM_BALANCETableAdapter() As ITEM_BALANCETableAdapter
            Get
                Return Me._iTEM_BALANCETableAdapter
            End Get
            Set
                Me._iTEM_BALANCETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ORDERSTableAdapter() As ORDERSTableAdapter
            Get
                Return Me._oRDERSTableAdapter
            End Get
            Set
                Me._oRDERSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ORDER_DETAILSTableAdapter() As ORDER_DETAILSTableAdapter
            Get
                Return Me._oRDER_DETAILSTableAdapter
            End Get
            Set
                Me._oRDER_DETAILSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ITEM_COSTSTableAdapter() As ITEM_COSTSTableAdapter
            Get
                Return Me._iTEM_COSTSTableAdapter
            End Get
            Set
                Me._iTEM_COSTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._iTEM_BALANCETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iTEM_BALANCETableAdapter.Connection) Is Nothing)) Then
                    Return Me._iTEM_BALANCETableAdapter.Connection
                End If
                If ((Not (Me._oRDERSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oRDERSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oRDERSTableAdapter.Connection
                End If
                If ((Not (Me._oRDER_DETAILSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oRDER_DETAILSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oRDER_DETAILSTableAdapter.Connection
                End If
                If ((Not (Me._iTEM_COSTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iTEM_COSTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iTEM_COSTSTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSPurchaseOrder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ITEM_COSTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iTEM_COSTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ITEM_BALANCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iTEM_BALANCETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ORDER_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oRDER_DETAILSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ORDERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oRDERSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSPurchaseOrder, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ITEM_COSTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iTEM_COSTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ITEM_BALANCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iTEM_BALANCETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ORDER_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oRDER_DETAILSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ORDERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oRDERSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSPurchaseOrder, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ORDERS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oRDERSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ORDER_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oRDER_DETAILSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ITEM_BALANCE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iTEM_BALANCETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ITEM_COSTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iTEM_COSTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSPurchaseOrder) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._iTEM_BALANCETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iTEM_BALANCETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._oRDERSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oRDERSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._oRDER_DETAILSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oRDER_DETAILSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iTEM_COSTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iTEM_COSTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iTEM_BALANCETableAdapter, Me._iTEM_BALANCETableAdapter.Connection)
                    Me._iTEM_BALANCETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_BALANCETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iTEM_BALANCETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iTEM_BALANCETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iTEM_BALANCETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oRDERSTableAdapter, Me._oRDERSTableAdapter.Connection)
                    Me._oRDERSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oRDERSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oRDERSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oRDERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oRDERSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oRDER_DETAILSTableAdapter, Me._oRDER_DETAILSTableAdapter.Connection)
                    Me._oRDER_DETAILSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._oRDER_DETAILSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._oRDER_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oRDER_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oRDER_DETAILSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iTEM_COSTSTableAdapter, Me._iTEM_COSTSTableAdapter.Connection)
                    Me._iTEM_COSTSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_COSTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iTEM_COSTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iTEM_COSTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iTEM_COSTSTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._iTEM_BALANCETableAdapter) Is Nothing) Then
                    Me._iTEM_BALANCETableAdapter.Connection = CType(revertConnections(Me._iTEM_BALANCETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_BALANCETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oRDERSTableAdapter) Is Nothing) Then
                    Me._oRDERSTableAdapter.Connection = CType(revertConnections(Me._oRDERSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oRDERSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oRDER_DETAILSTableAdapter) Is Nothing) Then
                    Me._oRDER_DETAILSTableAdapter.Connection = CType(revertConnections(Me._oRDER_DETAILSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._oRDER_DETAILSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iTEM_COSTSTableAdapter) Is Nothing) Then
                    Me._iTEM_COSTSTableAdapter.Connection = CType(revertConnections(Me._iTEM_COSTSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iTEM_COSTSTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
