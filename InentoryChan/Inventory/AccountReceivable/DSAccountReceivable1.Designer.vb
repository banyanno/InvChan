'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8766
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSAccountReceivable"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSAccountReceivable
    Inherits Global.System.Data.DataSet
    
    Private tableINVOICE As INVOICEDataTable
    
    Private tableACCOUNT_RECEIVABLE As ACCOUNT_RECEIVABLEDataTable
    
    Private tableAR_PAYMENT As AR_PAYMENTDataTable
    
    Private tableINVOICE_DETAILS As INVOICE_DETAILSDataTable
    
    Private tableACC_RECEIVED_ABLE_VIEW As ACC_RECEIVED_ABLE_VIEWDataTable
    
    Private tableACC_RECEIVED_ABLE_VIEW1 As ACC_RECEIVED_ABLE_VIEW1DataTable
    
    Private tableACCOUNT_RECEIVABLE1 As ACCOUNT_RECEIVABLE1DataTable
    
    Private relationACCOUNT_RECEIVABLE_INVOICE_DETAILS As Global.System.Data.DataRelation
    
    Private relationACCOUNT_RECEIVABLE1_INVOICE_DETAILS As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("INVOICE")) Is Nothing) Then
                MyBase.Tables.Add(New INVOICEDataTable(ds.Tables("INVOICE")))
            End If
            If (Not (ds.Tables("ACCOUNT_RECEIVABLE")) Is Nothing) Then
                MyBase.Tables.Add(New ACCOUNT_RECEIVABLEDataTable(ds.Tables("ACCOUNT_RECEIVABLE")))
            End If
            If (Not (ds.Tables("AR_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New AR_PAYMENTDataTable(ds.Tables("AR_PAYMENT")))
            End If
            If (Not (ds.Tables("INVOICE_DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New INVOICE_DETAILSDataTable(ds.Tables("INVOICE_DETAILS")))
            End If
            If (Not (ds.Tables("ACC_RECEIVED_ABLE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_RECEIVED_ABLE_VIEWDataTable(ds.Tables("ACC_RECEIVED_ABLE_VIEW")))
            End If
            If (Not (ds.Tables("ACC_RECEIVED_ABLE_VIEW1")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_RECEIVED_ABLE_VIEW1DataTable(ds.Tables("ACC_RECEIVED_ABLE_VIEW1")))
            End If
            If (Not (ds.Tables("ACCOUNT_RECEIVABLE1")) Is Nothing) Then
                MyBase.Tables.Add(New ACCOUNT_RECEIVABLE1DataTable(ds.Tables("ACCOUNT_RECEIVABLE1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVOICE() As INVOICEDataTable
        Get
            Return Me.tableINVOICE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACCOUNT_RECEIVABLE() As ACCOUNT_RECEIVABLEDataTable
        Get
            Return Me.tableACCOUNT_RECEIVABLE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AR_PAYMENT() As AR_PAYMENTDataTable
        Get
            Return Me.tableAR_PAYMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVOICE_DETAILS() As INVOICE_DETAILSDataTable
        Get
            Return Me.tableINVOICE_DETAILS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_RECEIVED_ABLE_VIEW() As ACC_RECEIVED_ABLE_VIEWDataTable
        Get
            Return Me.tableACC_RECEIVED_ABLE_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACC_RECEIVED_ABLE_VIEW1() As ACC_RECEIVED_ABLE_VIEW1DataTable
        Get
            Return Me.tableACC_RECEIVED_ABLE_VIEW1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ACCOUNT_RECEIVABLE1() As ACCOUNT_RECEIVABLE1DataTable
        Get
            Return Me.tableACCOUNT_RECEIVABLE1
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSAccountReceivable = CType(MyBase.Clone,DSAccountReceivable)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("INVOICE")) Is Nothing) Then
                MyBase.Tables.Add(New INVOICEDataTable(ds.Tables("INVOICE")))
            End If
            If (Not (ds.Tables("ACCOUNT_RECEIVABLE")) Is Nothing) Then
                MyBase.Tables.Add(New ACCOUNT_RECEIVABLEDataTable(ds.Tables("ACCOUNT_RECEIVABLE")))
            End If
            If (Not (ds.Tables("AR_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New AR_PAYMENTDataTable(ds.Tables("AR_PAYMENT")))
            End If
            If (Not (ds.Tables("INVOICE_DETAILS")) Is Nothing) Then
                MyBase.Tables.Add(New INVOICE_DETAILSDataTable(ds.Tables("INVOICE_DETAILS")))
            End If
            If (Not (ds.Tables("ACC_RECEIVED_ABLE_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_RECEIVED_ABLE_VIEWDataTable(ds.Tables("ACC_RECEIVED_ABLE_VIEW")))
            End If
            If (Not (ds.Tables("ACC_RECEIVED_ABLE_VIEW1")) Is Nothing) Then
                MyBase.Tables.Add(New ACC_RECEIVED_ABLE_VIEW1DataTable(ds.Tables("ACC_RECEIVED_ABLE_VIEW1")))
            End If
            If (Not (ds.Tables("ACCOUNT_RECEIVABLE1")) Is Nothing) Then
                MyBase.Tables.Add(New ACCOUNT_RECEIVABLE1DataTable(ds.Tables("ACCOUNT_RECEIVABLE1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableINVOICE = CType(MyBase.Tables("INVOICE"),INVOICEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINVOICE) Is Nothing) Then
                Me.tableINVOICE.InitVars
            End If
        End If
        Me.tableACCOUNT_RECEIVABLE = CType(MyBase.Tables("ACCOUNT_RECEIVABLE"),ACCOUNT_RECEIVABLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACCOUNT_RECEIVABLE) Is Nothing) Then
                Me.tableACCOUNT_RECEIVABLE.InitVars
            End If
        End If
        Me.tableAR_PAYMENT = CType(MyBase.Tables("AR_PAYMENT"),AR_PAYMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAR_PAYMENT) Is Nothing) Then
                Me.tableAR_PAYMENT.InitVars
            End If
        End If
        Me.tableINVOICE_DETAILS = CType(MyBase.Tables("INVOICE_DETAILS"),INVOICE_DETAILSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINVOICE_DETAILS) Is Nothing) Then
                Me.tableINVOICE_DETAILS.InitVars
            End If
        End If
        Me.tableACC_RECEIVED_ABLE_VIEW = CType(MyBase.Tables("ACC_RECEIVED_ABLE_VIEW"),ACC_RECEIVED_ABLE_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_RECEIVED_ABLE_VIEW) Is Nothing) Then
                Me.tableACC_RECEIVED_ABLE_VIEW.InitVars
            End If
        End If
        Me.tableACC_RECEIVED_ABLE_VIEW1 = CType(MyBase.Tables("ACC_RECEIVED_ABLE_VIEW1"),ACC_RECEIVED_ABLE_VIEW1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableACC_RECEIVED_ABLE_VIEW1) Is Nothing) Then
                Me.tableACC_RECEIVED_ABLE_VIEW1.InitVars
            End If
        End If
        Me.tableACCOUNT_RECEIVABLE1 = CType(MyBase.Tables("ACCOUNT_RECEIVABLE1"),ACCOUNT_RECEIVABLE1DataTable)
        If (initTable = true) Then
            If (Not (Me.tableACCOUNT_RECEIVABLE1) Is Nothing) Then
                Me.tableACCOUNT_RECEIVABLE1.InitVars
            End If
        End If
        Me.relationACCOUNT_RECEIVABLE_INVOICE_DETAILS = Me.Relations("ACCOUNT_RECEIVABLE_INVOICE_DETAILS")
        Me.relationACCOUNT_RECEIVABLE1_INVOICE_DETAILS = Me.Relations("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSAccountReceivable"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSAccountReceivable.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableINVOICE = New INVOICEDataTable
        MyBase.Tables.Add(Me.tableINVOICE)
        Me.tableACCOUNT_RECEIVABLE = New ACCOUNT_RECEIVABLEDataTable
        MyBase.Tables.Add(Me.tableACCOUNT_RECEIVABLE)
        Me.tableAR_PAYMENT = New AR_PAYMENTDataTable
        MyBase.Tables.Add(Me.tableAR_PAYMENT)
        Me.tableINVOICE_DETAILS = New INVOICE_DETAILSDataTable
        MyBase.Tables.Add(Me.tableINVOICE_DETAILS)
        Me.tableACC_RECEIVED_ABLE_VIEW = New ACC_RECEIVED_ABLE_VIEWDataTable
        MyBase.Tables.Add(Me.tableACC_RECEIVED_ABLE_VIEW)
        Me.tableACC_RECEIVED_ABLE_VIEW1 = New ACC_RECEIVED_ABLE_VIEW1DataTable
        MyBase.Tables.Add(Me.tableACC_RECEIVED_ABLE_VIEW1)
        Me.tableACCOUNT_RECEIVABLE1 = New ACCOUNT_RECEIVABLE1DataTable
        MyBase.Tables.Add(Me.tableACCOUNT_RECEIVABLE1)
        Me.relationACCOUNT_RECEIVABLE_INVOICE_DETAILS = New Global.System.Data.DataRelation("ACCOUNT_RECEIVABLE_INVOICE_DETAILS", New Global.System.Data.DataColumn() {Me.tableACCOUNT_RECEIVABLE.INVOICE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableINVOICE_DETAILS.INVOICE_IDColumn}, false)
        Me.Relations.Add(Me.relationACCOUNT_RECEIVABLE_INVOICE_DETAILS)
        Me.relationACCOUNT_RECEIVABLE1_INVOICE_DETAILS = New Global.System.Data.DataRelation("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS", New Global.System.Data.DataColumn() {Me.tableACCOUNT_RECEIVABLE1.INVOICE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableINVOICE_DETAILS.INVOICE_IDColumn}, false)
        Me.Relations.Add(Me.relationACCOUNT_RECEIVABLE1_INVOICE_DETAILS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINVOICE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACCOUNT_RECEIVABLE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAR_PAYMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeINVOICE_DETAILS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_RECEIVED_ABLE_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACC_RECEIVED_ABLE_VIEW1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeACCOUNT_RECEIVABLE1() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSAccountReceivable = New DSAccountReceivable
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub INVOICERowChangeEventHandler(ByVal sender As Object, ByVal e As INVOICERowChangeEvent)
    
    Public Delegate Sub ACCOUNT_RECEIVABLERowChangeEventHandler(ByVal sender As Object, ByVal e As ACCOUNT_RECEIVABLERowChangeEvent)
    
    Public Delegate Sub AR_PAYMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As AR_PAYMENTRowChangeEvent)
    
    Public Delegate Sub INVOICE_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As INVOICE_DETAILSRowChangeEvent)
    
    Public Delegate Sub ACC_RECEIVED_ABLE_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_RECEIVED_ABLE_VIEWRowChangeEvent)
    
    Public Delegate Sub ACC_RECEIVED_ABLE_VIEW1RowChangeEventHandler(ByVal sender As Object, ByVal e As ACC_RECEIVED_ABLE_VIEW1RowChangeEvent)
    
    Public Delegate Sub ACCOUNT_RECEIVABLE1RowChangeEventHandler(ByVal sender As Object, ByVal e As ACCOUNT_RECEIVABLE1RowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INVOICEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnCUST_ID As Global.System.Data.DataColumn
        
        Private columnCUST_NAME As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnDISCOUNT_AMOUNT As Global.System.Data.DataColumn
        
        Private columnDISCOUNT_CURR_CODE As Global.System.Data.DataColumn
        
        Private columnKHR_TOTAL As Global.System.Data.DataColumn
        
        Private columnUSD_TOTAL As Global.System.Data.DataColumn
        
        Private columnTHB_TOTAL As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnVOIDE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INVOICE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCOUNT_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCOUNT_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCOUNT_CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCOUNT_CURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VOIDEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVOIDE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVOICERow
            Get
                Return CType(Me.Rows(index),INVOICERow)
            End Get
        End Property
        
        Public Event INVOICERowChanging As INVOICERowChangeEventHandler
        
        Public Event INVOICERowChanged As INVOICERowChangeEventHandler
        
        Public Event INVOICERowDeleting As INVOICERowChangeEventHandler
        
        Public Event INVOICERowDeleted As INVOICERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINVOICERow(ByVal row As INVOICERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINVOICERow(ByVal CUST_ID As Long, ByVal CUST_NAME As String, ByVal KHR_AMOUNT As Decimal, ByVal USD_AMOUNT As Decimal, ByVal THB_AMOUNT As Decimal, ByVal DISCOUNT_AMOUNT As Decimal, ByVal DISCOUNT_CURR_CODE As String, ByVal KHR_TOTAL As Decimal, ByVal USD_TOTAL As Decimal, ByVal THB_TOTAL As Decimal, ByVal USER_ID As Integer, ByVal INVOICE_DATE As Date, ByVal VOIDE As Integer) As INVOICERow
            Dim rowINVOICERow As INVOICERow = CType(Me.NewRow,INVOICERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CUST_ID, CUST_NAME, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, DISCOUNT_AMOUNT, DISCOUNT_CURR_CODE, KHR_TOTAL, USD_TOTAL, THB_TOTAL, USER_ID, INVOICE_DATE, VOIDE}
            rowINVOICERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINVOICERow)
            Return rowINVOICERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByINVOICE_ID(ByVal INVOICE_ID As Long) As INVOICERow
            Return CType(Me.Rows.Find(New Object() {INVOICE_ID}),INVOICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INVOICEDataTable = CType(MyBase.Clone,INVOICEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INVOICEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnCUST_ID = MyBase.Columns("CUST_ID")
            Me.columnCUST_NAME = MyBase.Columns("CUST_NAME")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnDISCOUNT_AMOUNT = MyBase.Columns("DISCOUNT_AMOUNT")
            Me.columnDISCOUNT_CURR_CODE = MyBase.Columns("DISCOUNT_CURR_CODE")
            Me.columnKHR_TOTAL = MyBase.Columns("KHR_TOTAL")
            Me.columnUSD_TOTAL = MyBase.Columns("USD_TOTAL")
            Me.columnTHB_TOTAL = MyBase.Columns("THB_TOTAL")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnVOIDE = MyBase.Columns("VOIDE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnCUST_ID = New Global.System.Data.DataColumn("CUST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ID)
            Me.columnCUST_NAME = New Global.System.Data.DataColumn("CUST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_NAME)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnDISCOUNT_AMOUNT = New Global.System.Data.DataColumn("DISCOUNT_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCOUNT_AMOUNT)
            Me.columnDISCOUNT_CURR_CODE = New Global.System.Data.DataColumn("DISCOUNT_CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCOUNT_CURR_CODE)
            Me.columnKHR_TOTAL = New Global.System.Data.DataColumn("KHR_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_TOTAL)
            Me.columnUSD_TOTAL = New Global.System.Data.DataColumn("USD_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_TOTAL)
            Me.columnTHB_TOTAL = New Global.System.Data.DataColumn("THB_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_TOTAL)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnVOIDE = New Global.System.Data.DataColumn("VOIDE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVOIDE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnINVOICE_ID}, true))
            Me.columnINVOICE_ID.AutoIncrement = true
            Me.columnINVOICE_ID.AutoIncrementSeed = -1
            Me.columnINVOICE_ID.AutoIncrementStep = -1
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnINVOICE_ID.ReadOnly = true
            Me.columnINVOICE_ID.Unique = true
            Me.columnCUST_NAME.MaxLength = 50
            Me.columnDISCOUNT_CURR_CODE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINVOICERow() As INVOICERow
            Return CType(Me.NewRow,INVOICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INVOICERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INVOICERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVOICERowChangedEvent) Is Nothing) Then
                RaiseEvent INVOICERowChanged(Me, New INVOICERowChangeEvent(CType(e.Row,INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVOICERowChangingEvent) Is Nothing) Then
                RaiseEvent INVOICERowChanging(Me, New INVOICERowChangeEvent(CType(e.Row,INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVOICERowDeletedEvent) Is Nothing) Then
                RaiseEvent INVOICERowDeleted(Me, New INVOICERowChangeEvent(CType(e.Row,INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVOICERowDeletingEvent) Is Nothing) Then
                RaiseEvent INVOICERowDeleting(Me, New INVOICERowChangeEvent(CType(e.Row,INVOICERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINVOICERow(ByVal row As INVOICERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INVOICEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACCOUNT_RECEIVABLEDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCR_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnCUST_ID As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnKHR_PAID As Global.System.Data.DataColumn
        
        Private columnTHB_PAID As Global.System.Data.DataColumn
        
        Private columnUSD_PAID As Global.System.Data.DataColumn
        
        Private columnACCR_NOTE As Global.System.Data.DataColumn
        
        Private columnCOMPLETED As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE_ACC As Global.System.Data.DataColumn
        
        Private columnINVOICE_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACCOUNT_RECEIVABLE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPLETEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPLETED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATE_DATE_ACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE_ACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACCOUNT_RECEIVABLERow
            Get
                Return CType(Me.Rows(index),ACCOUNT_RECEIVABLERow)
            End Get
        End Property
        
        Public Event ACCOUNT_RECEIVABLERowChanging As ACCOUNT_RECEIVABLERowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLERowChanged As ACCOUNT_RECEIVABLERowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLERowDeleting As ACCOUNT_RECEIVABLERowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLERowDeleted As ACCOUNT_RECEIVABLERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACCOUNT_RECEIVABLERow(ByVal row As ACCOUNT_RECEIVABLERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACCOUNT_RECEIVABLERow(ByVal INVOICE_ID As Long, ByVal CUST_ID As Long, ByVal KHR_AMOUNT As Decimal, ByVal THB_AMOUNT As Decimal, ByVal USD_AMOUNT As Decimal, ByVal KHR_PAID As Decimal, ByVal THB_PAID As Decimal, ByVal USD_PAID As Decimal, ByVal ACCR_NOTE As String, ByVal COMPLETED As Integer, ByVal CREATE_DATE_ACC As Date, ByVal INVOICE_NO As Long) As ACCOUNT_RECEIVABLERow
            Dim rowACCOUNT_RECEIVABLERow As ACCOUNT_RECEIVABLERow = CType(Me.NewRow,ACCOUNT_RECEIVABLERow)
            Dim columnValuesArray() As Object = New Object() {Nothing, INVOICE_ID, CUST_ID, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, INVOICE_NO}
            rowACCOUNT_RECEIVABLERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACCOUNT_RECEIVABLERow)
            Return rowACCOUNT_RECEIVABLERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCR_ID(ByVal ACCR_ID As Long) As ACCOUNT_RECEIVABLERow
            Return CType(Me.Rows.Find(New Object() {ACCR_ID}),ACCOUNT_RECEIVABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACCOUNT_RECEIVABLEDataTable = CType(MyBase.Clone,ACCOUNT_RECEIVABLEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACCOUNT_RECEIVABLEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCR_ID = MyBase.Columns("ACCR_ID")
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnCUST_ID = MyBase.Columns("CUST_ID")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnKHR_PAID = MyBase.Columns("KHR_PAID")
            Me.columnTHB_PAID = MyBase.Columns("THB_PAID")
            Me.columnUSD_PAID = MyBase.Columns("USD_PAID")
            Me.columnACCR_NOTE = MyBase.Columns("ACCR_NOTE")
            Me.columnCOMPLETED = MyBase.Columns("COMPLETED")
            Me.columnCREATE_DATE_ACC = MyBase.Columns("CREATE_DATE_ACC")
            Me.columnINVOICE_NO = MyBase.Columns("INVOICE_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCR_ID = New Global.System.Data.DataColumn("ACCR_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_ID)
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnCUST_ID = New Global.System.Data.DataColumn("CUST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ID)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnKHR_PAID = New Global.System.Data.DataColumn("KHR_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_PAID)
            Me.columnTHB_PAID = New Global.System.Data.DataColumn("THB_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_PAID)
            Me.columnUSD_PAID = New Global.System.Data.DataColumn("USD_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_PAID)
            Me.columnACCR_NOTE = New Global.System.Data.DataColumn("ACCR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_NOTE)
            Me.columnCOMPLETED = New Global.System.Data.DataColumn("COMPLETED", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPLETED)
            Me.columnCREATE_DATE_ACC = New Global.System.Data.DataColumn("CREATE_DATE_ACC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE_ACC)
            Me.columnINVOICE_NO = New Global.System.Data.DataColumn("INVOICE_NO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCR_ID}, true))
            Me.columnACCR_ID.AutoIncrement = true
            Me.columnACCR_ID.AutoIncrementSeed = -1
            Me.columnACCR_ID.AutoIncrementStep = -1
            Me.columnACCR_ID.AllowDBNull = false
            Me.columnACCR_ID.ReadOnly = true
            Me.columnACCR_ID.Unique = true
            Me.columnACCR_NOTE.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACCOUNT_RECEIVABLERow() As ACCOUNT_RECEIVABLERow
            Return CType(Me.NewRow,ACCOUNT_RECEIVABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACCOUNT_RECEIVABLERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACCOUNT_RECEIVABLERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACCOUNT_RECEIVABLERowChangedEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLERowChanged(Me, New ACCOUNT_RECEIVABLERowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACCOUNT_RECEIVABLERowChangingEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLERowChanging(Me, New ACCOUNT_RECEIVABLERowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACCOUNT_RECEIVABLERowDeletedEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLERowDeleted(Me, New ACCOUNT_RECEIVABLERowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACCOUNT_RECEIVABLERowDeletingEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLERowDeleting(Me, New ACCOUNT_RECEIVABLERowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACCOUNT_RECEIVABLERow(ByVal row As ACCOUNT_RECEIVABLERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACCOUNT_RECEIVABLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AR_PAYMENTDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnPAYMENT_ID As Global.System.Data.DataColumn
        
        Private columnACCR_ID As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPAYMENT_DATE As Global.System.Data.DataColumn
        
        Private columnPAYMENT_NOTE As Global.System.Data.DataColumn
        
        Private columnUSER_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AR_PAYMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMENT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMENT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USER_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSER_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AR_PAYMENTRow
            Get
                Return CType(Me.Rows(index),AR_PAYMENTRow)
            End Get
        End Property
        
        Public Event AR_PAYMENTRowChanging As AR_PAYMENTRowChangeEventHandler
        
        Public Event AR_PAYMENTRowChanged As AR_PAYMENTRowChangeEventHandler
        
        Public Event AR_PAYMENTRowDeleting As AR_PAYMENTRowChangeEventHandler
        
        Public Event AR_PAYMENTRowDeleted As AR_PAYMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAR_PAYMENTRow(ByVal row As AR_PAYMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAR_PAYMENTRow(ByVal ACCR_ID As Long, ByVal KHR_AMOUNT As Decimal, ByVal USD_AMOUNT As Decimal, ByVal THB_AMOUNT As Decimal, ByVal PAYMENT_DATE As Date, ByVal PAYMENT_NOTE As String, ByVal USER_ID As Integer) As AR_PAYMENTRow
            Dim rowAR_PAYMENTRow As AR_PAYMENTRow = CType(Me.NewRow,AR_PAYMENTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ACCR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAYMENT_NOTE, USER_ID}
            rowAR_PAYMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAR_PAYMENTRow)
            Return rowAR_PAYMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPAYMENT_ID(ByVal PAYMENT_ID As Long) As AR_PAYMENTRow
            Return CType(Me.Rows.Find(New Object() {PAYMENT_ID}),AR_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AR_PAYMENTDataTable = CType(MyBase.Clone,AR_PAYMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AR_PAYMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPAYMENT_ID = MyBase.Columns("PAYMENT_ID")
            Me.columnACCR_ID = MyBase.Columns("ACCR_ID")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnPAYMENT_DATE = MyBase.Columns("PAYMENT_DATE")
            Me.columnPAYMENT_NOTE = MyBase.Columns("PAYMENT_NOTE")
            Me.columnUSER_ID = MyBase.Columns("USER_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPAYMENT_ID = New Global.System.Data.DataColumn("PAYMENT_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_ID)
            Me.columnACCR_ID = New Global.System.Data.DataColumn("ACCR_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_ID)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnPAYMENT_DATE = New Global.System.Data.DataColumn("PAYMENT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_DATE)
            Me.columnPAYMENT_NOTE = New Global.System.Data.DataColumn("PAYMENT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_NOTE)
            Me.columnUSER_ID = New Global.System.Data.DataColumn("USER_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSER_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPAYMENT_ID}, true))
            Me.columnPAYMENT_ID.AutoIncrement = true
            Me.columnPAYMENT_ID.AutoIncrementSeed = -1
            Me.columnPAYMENT_ID.AutoIncrementStep = -1
            Me.columnPAYMENT_ID.AllowDBNull = false
            Me.columnPAYMENT_ID.ReadOnly = true
            Me.columnPAYMENT_ID.Unique = true
            Me.columnPAYMENT_NOTE.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAR_PAYMENTRow() As AR_PAYMENTRow
            Return CType(Me.NewRow,AR_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AR_PAYMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AR_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AR_PAYMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent AR_PAYMENTRowChanged(Me, New AR_PAYMENTRowChangeEvent(CType(e.Row,AR_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AR_PAYMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent AR_PAYMENTRowChanging(Me, New AR_PAYMENTRowChangeEvent(CType(e.Row,AR_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AR_PAYMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent AR_PAYMENTRowDeleted(Me, New AR_PAYMENTRowChangeEvent(CType(e.Row,AR_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AR_PAYMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent AR_PAYMENTRowDeleting(Me, New AR_PAYMENTRowChangeEvent(CType(e.Row,AR_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAR_PAYMENTRow(ByVal row As AR_PAYMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AR_PAYMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class INVOICE_DETAILSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDETAIL_ID As Global.System.Data.DataColumn
        
        Private columnCUST_NAME As Global.System.Data.DataColumn
        
        Private columnCUST_ADDRESS As Global.System.Data.DataColumn
        
        Private columnCUST_PHONE As Global.System.Data.DataColumn
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnITEM_ID As Global.System.Data.DataColumn
        
        Private columnITEM_NAME As Global.System.Data.DataColumn
        
        Private columnUNIT_NAME As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnITEM_QTY As Global.System.Data.DataColumn
        
        Private columnUSD_PRICE As Global.System.Data.DataColumn
        
        Private columnKHR_PRICE As Global.System.Data.DataColumn
        
        Private columnTHB_PRICE As Global.System.Data.DataColumn
        
        Private columnITEM_PRICE As Global.System.Data.DataColumn
        
        Private columnITEM_DISCOUNT As Global.System.Data.DataColumn
        
        Private columnPRICE As Global.System.Data.DataColumn
        
        Private columnDISCOUNT As Global.System.Data.DataColumn
        
        Private columnCURR_CODE As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnITEM_QTY_Free As Global.System.Data.DataColumn
        
        Private columnIS_EXTRA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "INVOICE_DETAILS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_ADDRESSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ADDRESS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNIT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_DISCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_DISCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DISCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURR_CODEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURR_CODE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ITEM_QTY_FreeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnITEM_QTY_Free
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_EXTRAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_EXTRA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVOICE_DETAILSRow
            Get
                Return CType(Me.Rows(index),INVOICE_DETAILSRow)
            End Get
        End Property
        
        Public Event INVOICE_DETAILSRowChanging As INVOICE_DETAILSRowChangeEventHandler
        
        Public Event INVOICE_DETAILSRowChanged As INVOICE_DETAILSRowChangeEventHandler
        
        Public Event INVOICE_DETAILSRowDeleting As INVOICE_DETAILSRowChangeEventHandler
        
        Public Event INVOICE_DETAILSRowDeleted As INVOICE_DETAILSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddINVOICE_DETAILSRow(ByVal row As INVOICE_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddINVOICE_DETAILSRow( _
                    ByVal CUST_NAME As String,  _
                    ByVal CUST_ADDRESS As String,  _
                    ByVal CUST_PHONE As String,  _
                    ByVal parentACCOUNT_RECEIVABLERowByACCOUNT_RECEIVABLE_INVOICE_DETAILS As ACCOUNT_RECEIVABLERow,  _
                    ByVal ITEM_ID As Integer,  _
                    ByVal ITEM_NAME As String,  _
                    ByVal UNIT_NAME As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal ITEM_QTY As String,  _
                    ByVal USD_PRICE As Decimal,  _
                    ByVal KHR_PRICE As Decimal,  _
                    ByVal THB_PRICE As Decimal,  _
                    ByVal ITEM_PRICE As String,  _
                    ByVal ITEM_DISCOUNT As String,  _
                    ByVal PRICE As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal CURR_CODE As String,  _
                    ByVal KHR_AMOUNT As Decimal,  _
                    ByVal USD_AMOUNT As Decimal,  _
                    ByVal THB_AMOUNT As Decimal,  _
                    ByVal ITEM_QTY_Free As String,  _
                    ByVal IS_EXTRA As Boolean) As INVOICE_DETAILSRow
            Dim rowINVOICE_DETAILSRow As INVOICE_DETAILSRow = CType(Me.NewRow,INVOICE_DETAILSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CUST_NAME, CUST_ADDRESS, CUST_PHONE, Nothing, ITEM_ID, ITEM_NAME, UNIT_NAME, QTY, ITEM_QTY, USD_PRICE, KHR_PRICE, THB_PRICE, ITEM_PRICE, ITEM_DISCOUNT, PRICE, DISCOUNT, CURR_CODE, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, ITEM_QTY_Free, IS_EXTRA}
            If (Not (parentACCOUNT_RECEIVABLERowByACCOUNT_RECEIVABLE_INVOICE_DETAILS) Is Nothing) Then
                columnValuesArray(4) = parentACCOUNT_RECEIVABLERowByACCOUNT_RECEIVABLE_INVOICE_DETAILS(1)
            End If
            rowINVOICE_DETAILSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowINVOICE_DETAILSRow)
            Return rowINVOICE_DETAILSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDETAIL_ID(ByVal DETAIL_ID As Long) As INVOICE_DETAILSRow
            Return CType(Me.Rows.Find(New Object() {DETAIL_ID}),INVOICE_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As INVOICE_DETAILSDataTable = CType(MyBase.Clone,INVOICE_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New INVOICE_DETAILSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDETAIL_ID = MyBase.Columns("DETAIL_ID")
            Me.columnCUST_NAME = MyBase.Columns("CUST_NAME")
            Me.columnCUST_ADDRESS = MyBase.Columns("CUST_ADDRESS")
            Me.columnCUST_PHONE = MyBase.Columns("CUST_PHONE")
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnITEM_ID = MyBase.Columns("ITEM_ID")
            Me.columnITEM_NAME = MyBase.Columns("ITEM_NAME")
            Me.columnUNIT_NAME = MyBase.Columns("UNIT_NAME")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnITEM_QTY = MyBase.Columns("ITEM_QTY")
            Me.columnUSD_PRICE = MyBase.Columns("USD_PRICE")
            Me.columnKHR_PRICE = MyBase.Columns("KHR_PRICE")
            Me.columnTHB_PRICE = MyBase.Columns("THB_PRICE")
            Me.columnITEM_PRICE = MyBase.Columns("ITEM_PRICE")
            Me.columnITEM_DISCOUNT = MyBase.Columns("ITEM_DISCOUNT")
            Me.columnPRICE = MyBase.Columns("PRICE")
            Me.columnDISCOUNT = MyBase.Columns("DISCOUNT")
            Me.columnCURR_CODE = MyBase.Columns("CURR_CODE")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnITEM_QTY_Free = MyBase.Columns("ITEM_QTY_Free")
            Me.columnIS_EXTRA = MyBase.Columns("IS_EXTRA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDETAIL_ID = New Global.System.Data.DataColumn("DETAIL_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDETAIL_ID)
            Me.columnCUST_NAME = New Global.System.Data.DataColumn("CUST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_NAME)
            Me.columnCUST_ADDRESS = New Global.System.Data.DataColumn("CUST_ADDRESS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ADDRESS)
            Me.columnCUST_PHONE = New Global.System.Data.DataColumn("CUST_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_PHONE)
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnITEM_ID = New Global.System.Data.DataColumn("ITEM_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_ID)
            Me.columnITEM_NAME = New Global.System.Data.DataColumn("ITEM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_NAME)
            Me.columnUNIT_NAME = New Global.System.Data.DataColumn("UNIT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT_NAME)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnITEM_QTY = New Global.System.Data.DataColumn("ITEM_QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_QTY)
            Me.columnUSD_PRICE = New Global.System.Data.DataColumn("USD_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_PRICE)
            Me.columnKHR_PRICE = New Global.System.Data.DataColumn("KHR_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_PRICE)
            Me.columnTHB_PRICE = New Global.System.Data.DataColumn("THB_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_PRICE)
            Me.columnITEM_PRICE = New Global.System.Data.DataColumn("ITEM_PRICE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_PRICE)
            Me.columnITEM_DISCOUNT = New Global.System.Data.DataColumn("ITEM_DISCOUNT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_DISCOUNT)
            Me.columnPRICE = New Global.System.Data.DataColumn("PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE)
            Me.columnDISCOUNT = New Global.System.Data.DataColumn("DISCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDISCOUNT)
            Me.columnCURR_CODE = New Global.System.Data.DataColumn("CURR_CODE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURR_CODE)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnITEM_QTY_Free = New Global.System.Data.DataColumn("ITEM_QTY_Free", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnITEM_QTY_Free)
            Me.columnIS_EXTRA = New Global.System.Data.DataColumn("IS_EXTRA", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_EXTRA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDETAIL_ID}, true))
            Me.columnDETAIL_ID.AutoIncrement = true
            Me.columnDETAIL_ID.AutoIncrementSeed = -1
            Me.columnDETAIL_ID.AutoIncrementStep = -1
            Me.columnDETAIL_ID.AllowDBNull = false
            Me.columnDETAIL_ID.ReadOnly = true
            Me.columnDETAIL_ID.Unique = true
            Me.columnCUST_NAME.ReadOnly = true
            Me.columnCUST_NAME.MaxLength = 50
            Me.columnCUST_ADDRESS.ReadOnly = true
            Me.columnCUST_ADDRESS.MaxLength = 250
            Me.columnCUST_PHONE.ReadOnly = true
            Me.columnCUST_PHONE.MaxLength = 250
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnITEM_NAME.ReadOnly = true
            Me.columnITEM_NAME.MaxLength = 250
            Me.columnUNIT_NAME.MaxLength = 50
            Me.columnITEM_QTY.ReadOnly = true
            Me.columnITEM_QTY.MaxLength = 76
            Me.columnUSD_PRICE.ReadOnly = true
            Me.columnKHR_PRICE.ReadOnly = true
            Me.columnTHB_PRICE.ReadOnly = true
            Me.columnITEM_PRICE.ReadOnly = true
            Me.columnITEM_PRICE.MaxLength = 76
            Me.columnITEM_DISCOUNT.ReadOnly = true
            Me.columnITEM_DISCOUNT.MaxLength = 76
            Me.columnCURR_CODE.MaxLength = 50
            Me.columnITEM_QTY_Free.ReadOnly = true
            Me.columnITEM_QTY_Free.MaxLength = 76
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewINVOICE_DETAILSRow() As INVOICE_DETAILSRow
            Return CType(Me.NewRow,INVOICE_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New INVOICE_DETAILSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(INVOICE_DETAILSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVOICE_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent INVOICE_DETAILSRowChanged(Me, New INVOICE_DETAILSRowChangeEvent(CType(e.Row,INVOICE_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVOICE_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent INVOICE_DETAILSRowChanging(Me, New INVOICE_DETAILSRowChangeEvent(CType(e.Row,INVOICE_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVOICE_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent INVOICE_DETAILSRowDeleted(Me, New INVOICE_DETAILSRowChangeEvent(CType(e.Row,INVOICE_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVOICE_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent INVOICE_DETAILSRowDeleting(Me, New INVOICE_DETAILSRowChangeEvent(CType(e.Row,INVOICE_DETAILSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveINVOICE_DETAILSRow(ByVal row As INVOICE_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INVOICE_DETAILSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEWDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCR_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnCUST_NAME As Global.System.Data.DataColumn
        
        Private columnCUST_PHONE As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnKHR_PAID As Global.System.Data.DataColumn
        
        Private columnTHB_PAID As Global.System.Data.DataColumn
        
        Private columnUSD_PAID As Global.System.Data.DataColumn
        
        Private columnACCR_NOTE As Global.System.Data.DataColumn
        
        Private columnCOMPLETED As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnExpr2 As Global.System.Data.DataColumn
        
        Private columnExpr3 As Global.System.Data.DataColumn
        
        Private columnPAYMENT_DATE As Global.System.Data.DataColumn
        
        Private columnPAYMENT_NOTE As Global.System.Data.DataColumn
        
        Private columnCUST_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_NO As Global.System.Data.DataColumn
        
        Private columnIS_DEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_RECEIVED_ABLE_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPLETEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPLETED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMENT_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAYMENT_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAYMENT_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_RECEIVED_ABLE_VIEWRow
            Get
                Return CType(Me.Rows(index),ACC_RECEIVED_ABLE_VIEWRow)
            End Get
        End Property
        
        Public Event ACC_RECEIVED_ABLE_VIEWRowChanging As ACC_RECEIVED_ABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEWRowChanged As ACC_RECEIVED_ABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEWRowDeleting As ACC_RECEIVED_ABLE_VIEWRowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEWRowDeleted As ACC_RECEIVED_ABLE_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_RECEIVED_ABLE_VIEWRow(ByVal row As ACC_RECEIVED_ABLE_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_RECEIVED_ABLE_VIEWRow( _
                    ByVal ACCR_ID As Long,  _
                    ByVal INVOICE_ID As Long,  _
                    ByVal INVOICE_DATE As Date,  _
                    ByVal CUST_NAME As String,  _
                    ByVal CUST_PHONE As String,  _
                    ByVal KHR_AMOUNT As Decimal,  _
                    ByVal THB_AMOUNT As Decimal,  _
                    ByVal USD_AMOUNT As Decimal,  _
                    ByVal KHR_PAID As Decimal,  _
                    ByVal THB_PAID As Decimal,  _
                    ByVal USD_PAID As Decimal,  _
                    ByVal ACCR_NOTE As String,  _
                    ByVal COMPLETED As Integer,  _
                    ByVal Expr1 As Decimal,  _
                    ByVal Expr2 As Decimal,  _
                    ByVal Expr3 As Decimal,  _
                    ByVal PAYMENT_DATE As Date,  _
                    ByVal PAYMENT_NOTE As String,  _
                    ByVal CUST_ID As Long,  _
                    ByVal INVOICE_NO As Long,  _
                    ByVal IS_DEL As Integer) As ACC_RECEIVED_ABLE_VIEWRow
            Dim rowACC_RECEIVED_ABLE_VIEWRow As ACC_RECEIVED_ABLE_VIEWRow = CType(Me.NewRow,ACC_RECEIVED_ABLE_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {ACCR_ID, INVOICE_ID, INVOICE_DATE, CUST_NAME, CUST_PHONE, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, Expr1, Expr2, Expr3, PAYMENT_DATE, PAYMENT_NOTE, CUST_ID, INVOICE_NO, IS_DEL}
            rowACC_RECEIVED_ABLE_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_RECEIVED_ABLE_VIEWRow)
            Return rowACC_RECEIVED_ABLE_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_RECEIVED_ABLE_VIEWDataTable = CType(MyBase.Clone,ACC_RECEIVED_ABLE_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_RECEIVED_ABLE_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCR_ID = MyBase.Columns("ACCR_ID")
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnCUST_NAME = MyBase.Columns("CUST_NAME")
            Me.columnCUST_PHONE = MyBase.Columns("CUST_PHONE")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnKHR_PAID = MyBase.Columns("KHR_PAID")
            Me.columnTHB_PAID = MyBase.Columns("THB_PAID")
            Me.columnUSD_PAID = MyBase.Columns("USD_PAID")
            Me.columnACCR_NOTE = MyBase.Columns("ACCR_NOTE")
            Me.columnCOMPLETED = MyBase.Columns("COMPLETED")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnExpr2 = MyBase.Columns("Expr2")
            Me.columnExpr3 = MyBase.Columns("Expr3")
            Me.columnPAYMENT_DATE = MyBase.Columns("PAYMENT_DATE")
            Me.columnPAYMENT_NOTE = MyBase.Columns("PAYMENT_NOTE")
            Me.columnCUST_ID = MyBase.Columns("CUST_ID")
            Me.columnINVOICE_NO = MyBase.Columns("INVOICE_NO")
            Me.columnIS_DEL = MyBase.Columns("IS_DEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCR_ID = New Global.System.Data.DataColumn("ACCR_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_ID)
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnCUST_NAME = New Global.System.Data.DataColumn("CUST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_NAME)
            Me.columnCUST_PHONE = New Global.System.Data.DataColumn("CUST_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_PHONE)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnKHR_PAID = New Global.System.Data.DataColumn("KHR_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_PAID)
            Me.columnTHB_PAID = New Global.System.Data.DataColumn("THB_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_PAID)
            Me.columnUSD_PAID = New Global.System.Data.DataColumn("USD_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_PAID)
            Me.columnACCR_NOTE = New Global.System.Data.DataColumn("ACCR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_NOTE)
            Me.columnCOMPLETED = New Global.System.Data.DataColumn("COMPLETED", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPLETED)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnExpr2 = New Global.System.Data.DataColumn("Expr2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr2)
            Me.columnExpr3 = New Global.System.Data.DataColumn("Expr3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr3)
            Me.columnPAYMENT_DATE = New Global.System.Data.DataColumn("PAYMENT_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_DATE)
            Me.columnPAYMENT_NOTE = New Global.System.Data.DataColumn("PAYMENT_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAYMENT_NOTE)
            Me.columnCUST_ID = New Global.System.Data.DataColumn("CUST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ID)
            Me.columnINVOICE_NO = New Global.System.Data.DataColumn("INVOICE_NO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NO)
            Me.columnIS_DEL = New Global.System.Data.DataColumn("IS_DEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEL)
            Me.columnACCR_ID.AllowDBNull = false
            Me.columnCUST_NAME.MaxLength = 250
            Me.columnCUST_PHONE.MaxLength = 250
            Me.columnACCR_NOTE.MaxLength = 250
            Me.columnPAYMENT_NOTE.MaxLength = 500
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_RECEIVED_ABLE_VIEWRow() As ACC_RECEIVED_ABLE_VIEWRow
            Return CType(Me.NewRow,ACC_RECEIVED_ABLE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_RECEIVED_ABLE_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_RECEIVED_ABLE_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEWRowChanged(Me, New ACC_RECEIVED_ABLE_VIEWRowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEWRowChanging(Me, New ACC_RECEIVED_ABLE_VIEWRowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEWRowDeleted(Me, New ACC_RECEIVED_ABLE_VIEWRowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEWRowDeleting(Me, New ACC_RECEIVED_ABLE_VIEWRowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_RECEIVED_ABLE_VIEWRow(ByVal row As ACC_RECEIVED_ABLE_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_RECEIVED_ABLE_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEW1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCR_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnCUST_ID As Global.System.Data.DataColumn
        
        Private columnCUST_NAME As Global.System.Data.DataColumn
        
        Private columnCUST_PHONE As Global.System.Data.DataColumn
        
        Private columncompleted As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnPaidKHR As Global.System.Data.DataColumn
        
        Private columnPaidUSD As Global.System.Data.DataColumn
        
        Private columnPaidTHB As Global.System.Data.DataColumn
        
        Private columnREMAIN_KHR As Global.System.Data.DataColumn
        
        Private columnREMAIN_USD As Global.System.Data.DataColumn
        
        Private columnREMAIN_THB As Global.System.Data.DataColumn
        
        Private columnINVOICE_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACC_RECEIVED_ABLE_VIEW1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_PHONEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_PHONE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property completedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompleted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidKHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidKHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidUSDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidUSD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidTHBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaidTHB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_KHRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_KHR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_USDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_USD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REMAIN_THBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREMAIN_THB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACC_RECEIVED_ABLE_VIEW1Row
            Get
                Return CType(Me.Rows(index),ACC_RECEIVED_ABLE_VIEW1Row)
            End Get
        End Property
        
        Public Event ACC_RECEIVED_ABLE_VIEW1RowChanging As ACC_RECEIVED_ABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEW1RowChanged As ACC_RECEIVED_ABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEW1RowDeleting As ACC_RECEIVED_ABLE_VIEW1RowChangeEventHandler
        
        Public Event ACC_RECEIVED_ABLE_VIEW1RowDeleted As ACC_RECEIVED_ABLE_VIEW1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACC_RECEIVED_ABLE_VIEW1Row(ByVal row As ACC_RECEIVED_ABLE_VIEW1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACC_RECEIVED_ABLE_VIEW1Row( _
                    ByVal ACCR_ID As Long,  _
                    ByVal INVOICE_ID As Long,  _
                    ByVal INVOICE_DATE As Date,  _
                    ByVal CUST_ID As Long,  _
                    ByVal CUST_NAME As String,  _
                    ByVal CUST_PHONE As String,  _
                    ByVal completed As Integer,  _
                    ByVal KHR_AMOUNT As Decimal,  _
                    ByVal USD_AMOUNT As Decimal,  _
                    ByVal THB_AMOUNT As Decimal,  _
                    ByVal PaidKHR As Decimal,  _
                    ByVal PaidUSD As Decimal,  _
                    ByVal PaidTHB As Decimal,  _
                    ByVal REMAIN_KHR As Decimal,  _
                    ByVal REMAIN_USD As Decimal,  _
                    ByVal REMAIN_THB As Decimal,  _
                    ByVal INVOICE_NO As Long) As ACC_RECEIVED_ABLE_VIEW1Row
            Dim rowACC_RECEIVED_ABLE_VIEW1Row As ACC_RECEIVED_ABLE_VIEW1Row = CType(Me.NewRow,ACC_RECEIVED_ABLE_VIEW1Row)
            Dim columnValuesArray() As Object = New Object() {ACCR_ID, INVOICE_ID, INVOICE_DATE, CUST_ID, CUST_NAME, CUST_PHONE, completed, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PaidKHR, PaidUSD, PaidTHB, REMAIN_KHR, REMAIN_USD, REMAIN_THB, INVOICE_NO}
            rowACC_RECEIVED_ABLE_VIEW1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowACC_RECEIVED_ABLE_VIEW1Row)
            Return rowACC_RECEIVED_ABLE_VIEW1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACC_RECEIVED_ABLE_VIEW1DataTable = CType(MyBase.Clone,ACC_RECEIVED_ABLE_VIEW1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACC_RECEIVED_ABLE_VIEW1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCR_ID = MyBase.Columns("ACCR_ID")
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnCUST_ID = MyBase.Columns("CUST_ID")
            Me.columnCUST_NAME = MyBase.Columns("CUST_NAME")
            Me.columnCUST_PHONE = MyBase.Columns("CUST_PHONE")
            Me.columncompleted = MyBase.Columns("completed")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnPaidKHR = MyBase.Columns("PaidKHR")
            Me.columnPaidUSD = MyBase.Columns("PaidUSD")
            Me.columnPaidTHB = MyBase.Columns("PaidTHB")
            Me.columnREMAIN_KHR = MyBase.Columns("REMAIN_KHR")
            Me.columnREMAIN_USD = MyBase.Columns("REMAIN_USD")
            Me.columnREMAIN_THB = MyBase.Columns("REMAIN_THB")
            Me.columnINVOICE_NO = MyBase.Columns("INVOICE_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCR_ID = New Global.System.Data.DataColumn("ACCR_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_ID)
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnCUST_ID = New Global.System.Data.DataColumn("CUST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ID)
            Me.columnCUST_NAME = New Global.System.Data.DataColumn("CUST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_NAME)
            Me.columnCUST_PHONE = New Global.System.Data.DataColumn("CUST_PHONE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_PHONE)
            Me.columncompleted = New Global.System.Data.DataColumn("completed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompleted)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnPaidKHR = New Global.System.Data.DataColumn("PaidKHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidKHR)
            Me.columnPaidUSD = New Global.System.Data.DataColumn("PaidUSD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidUSD)
            Me.columnPaidTHB = New Global.System.Data.DataColumn("PaidTHB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaidTHB)
            Me.columnREMAIN_KHR = New Global.System.Data.DataColumn("REMAIN_KHR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_KHR)
            Me.columnREMAIN_USD = New Global.System.Data.DataColumn("REMAIN_USD", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_USD)
            Me.columnREMAIN_THB = New Global.System.Data.DataColumn("REMAIN_THB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREMAIN_THB)
            Me.columnINVOICE_NO = New Global.System.Data.DataColumn("INVOICE_NO", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NO)
            Me.columnACCR_ID.AllowDBNull = false
            Me.columnCUST_NAME.MaxLength = 250
            Me.columnCUST_PHONE.MaxLength = 250
            Me.columnPaidKHR.ReadOnly = true
            Me.columnPaidUSD.ReadOnly = true
            Me.columnPaidTHB.ReadOnly = true
            Me.columnREMAIN_KHR.ReadOnly = true
            Me.columnREMAIN_USD.ReadOnly = true
            Me.columnREMAIN_THB.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACC_RECEIVED_ABLE_VIEW1Row() As ACC_RECEIVED_ABLE_VIEW1Row
            Return CType(Me.NewRow,ACC_RECEIVED_ABLE_VIEW1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACC_RECEIVED_ABLE_VIEW1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACC_RECEIVED_ABLE_VIEW1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEW1RowChangedEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEW1RowChanged(Me, New ACC_RECEIVED_ABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEW1RowChangingEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEW1RowChanging(Me, New ACC_RECEIVED_ABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEW1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEW1RowDeleted(Me, New ACC_RECEIVED_ABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACC_RECEIVED_ABLE_VIEW1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ACC_RECEIVED_ABLE_VIEW1RowDeleting(Me, New ACC_RECEIVED_ABLE_VIEW1RowChangeEvent(CType(e.Row,ACC_RECEIVED_ABLE_VIEW1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACC_RECEIVED_ABLE_VIEW1Row(ByVal row As ACC_RECEIVED_ABLE_VIEW1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACC_RECEIVED_ABLE_VIEW1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ACCOUNT_RECEIVABLE1DataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnACCR_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnCUST_ID As Global.System.Data.DataColumn
        
        Private columnKHR_AMOUNT As Global.System.Data.DataColumn
        
        Private columnTHB_AMOUNT As Global.System.Data.DataColumn
        
        Private columnUSD_AMOUNT As Global.System.Data.DataColumn
        
        Private columnKHR_PAID As Global.System.Data.DataColumn
        
        Private columnTHB_PAID As Global.System.Data.DataColumn
        
        Private columnUSD_PAID As Global.System.Data.DataColumn
        
        Private columnACCR_NOTE As Global.System.Data.DataColumn
        
        Private columnCOMPLETED As Global.System.Data.DataColumn
        
        Private columnCREATE_DATE_ACC As Global.System.Data.DataColumn
        
        Private columnIS_DEL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ACCOUNT_RECEIVABLE1"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CUST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCUST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_AMOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_AMOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KHR_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKHR_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THB_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHB_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USD_PAIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSD_PAID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCR_NOTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCR_NOTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COMPLETEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMPLETED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CREATE_DATE_ACCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCREATE_DATE_ACC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DEL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ACCOUNT_RECEIVABLE1Row
            Get
                Return CType(Me.Rows(index),ACCOUNT_RECEIVABLE1Row)
            End Get
        End Property
        
        Public Event ACCOUNT_RECEIVABLE1RowChanging As ACCOUNT_RECEIVABLE1RowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLE1RowChanged As ACCOUNT_RECEIVABLE1RowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLE1RowDeleting As ACCOUNT_RECEIVABLE1RowChangeEventHandler
        
        Public Event ACCOUNT_RECEIVABLE1RowDeleted As ACCOUNT_RECEIVABLE1RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddACCOUNT_RECEIVABLE1Row(ByVal row As ACCOUNT_RECEIVABLE1Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddACCOUNT_RECEIVABLE1Row(ByVal INVOICE_ID As Long, ByVal CUST_ID As Long, ByVal KHR_AMOUNT As Decimal, ByVal THB_AMOUNT As Decimal, ByVal USD_AMOUNT As Decimal, ByVal KHR_PAID As Decimal, ByVal THB_PAID As Decimal, ByVal USD_PAID As Decimal, ByVal ACCR_NOTE As String, ByVal COMPLETED As Integer, ByVal CREATE_DATE_ACC As Date, ByVal IS_DEL As Integer) As ACCOUNT_RECEIVABLE1Row
            Dim rowACCOUNT_RECEIVABLE1Row As ACCOUNT_RECEIVABLE1Row = CType(Me.NewRow,ACCOUNT_RECEIVABLE1Row)
            Dim columnValuesArray() As Object = New Object() {Nothing, INVOICE_ID, CUST_ID, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, IS_DEL}
            rowACCOUNT_RECEIVABLE1Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowACCOUNT_RECEIVABLE1Row)
            Return rowACCOUNT_RECEIVABLE1Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByACCR_ID(ByVal ACCR_ID As Long) As ACCOUNT_RECEIVABLE1Row
            Return CType(Me.Rows.Find(New Object() {ACCR_ID}),ACCOUNT_RECEIVABLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ACCOUNT_RECEIVABLE1DataTable = CType(MyBase.Clone,ACCOUNT_RECEIVABLE1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ACCOUNT_RECEIVABLE1DataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnACCR_ID = MyBase.Columns("ACCR_ID")
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnCUST_ID = MyBase.Columns("CUST_ID")
            Me.columnKHR_AMOUNT = MyBase.Columns("KHR_AMOUNT")
            Me.columnTHB_AMOUNT = MyBase.Columns("THB_AMOUNT")
            Me.columnUSD_AMOUNT = MyBase.Columns("USD_AMOUNT")
            Me.columnKHR_PAID = MyBase.Columns("KHR_PAID")
            Me.columnTHB_PAID = MyBase.Columns("THB_PAID")
            Me.columnUSD_PAID = MyBase.Columns("USD_PAID")
            Me.columnACCR_NOTE = MyBase.Columns("ACCR_NOTE")
            Me.columnCOMPLETED = MyBase.Columns("COMPLETED")
            Me.columnCREATE_DATE_ACC = MyBase.Columns("CREATE_DATE_ACC")
            Me.columnIS_DEL = MyBase.Columns("IS_DEL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnACCR_ID = New Global.System.Data.DataColumn("ACCR_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_ID)
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnCUST_ID = New Global.System.Data.DataColumn("CUST_ID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCUST_ID)
            Me.columnKHR_AMOUNT = New Global.System.Data.DataColumn("KHR_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_AMOUNT)
            Me.columnTHB_AMOUNT = New Global.System.Data.DataColumn("THB_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_AMOUNT)
            Me.columnUSD_AMOUNT = New Global.System.Data.DataColumn("USD_AMOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_AMOUNT)
            Me.columnKHR_PAID = New Global.System.Data.DataColumn("KHR_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKHR_PAID)
            Me.columnTHB_PAID = New Global.System.Data.DataColumn("THB_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHB_PAID)
            Me.columnUSD_PAID = New Global.System.Data.DataColumn("USD_PAID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSD_PAID)
            Me.columnACCR_NOTE = New Global.System.Data.DataColumn("ACCR_NOTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCR_NOTE)
            Me.columnCOMPLETED = New Global.System.Data.DataColumn("COMPLETED", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMPLETED)
            Me.columnCREATE_DATE_ACC = New Global.System.Data.DataColumn("CREATE_DATE_ACC", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCREATE_DATE_ACC)
            Me.columnIS_DEL = New Global.System.Data.DataColumn("IS_DEL", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DEL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCR_ID}, true))
            Me.columnACCR_ID.AutoIncrement = true
            Me.columnACCR_ID.AutoIncrementSeed = -1
            Me.columnACCR_ID.AutoIncrementStep = -1
            Me.columnACCR_ID.AllowDBNull = false
            Me.columnACCR_ID.ReadOnly = true
            Me.columnACCR_ID.Unique = true
            Me.columnACCR_NOTE.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewACCOUNT_RECEIVABLE1Row() As ACCOUNT_RECEIVABLE1Row
            Return CType(Me.NewRow,ACCOUNT_RECEIVABLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ACCOUNT_RECEIVABLE1Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ACCOUNT_RECEIVABLE1Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ACCOUNT_RECEIVABLE1RowChangedEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLE1RowChanged(Me, New ACCOUNT_RECEIVABLE1RowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ACCOUNT_RECEIVABLE1RowChangingEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLE1RowChanging(Me, New ACCOUNT_RECEIVABLE1RowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ACCOUNT_RECEIVABLE1RowDeletedEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLE1RowDeleted(Me, New ACCOUNT_RECEIVABLE1RowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ACCOUNT_RECEIVABLE1RowDeletingEvent) Is Nothing) Then
                RaiseEvent ACCOUNT_RECEIVABLE1RowDeleting(Me, New ACCOUNT_RECEIVABLE1RowChangeEvent(CType(e.Row,ACCOUNT_RECEIVABLE1Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveACCOUNT_RECEIVABLE1Row(ByVal row As ACCOUNT_RECEIVABLE1Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSAccountReceivable = New DSAccountReceivable
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ACCOUNT_RECEIVABLE1DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INVOICERow
        Inherits Global.System.Data.DataRow
        
        Private tableINVOICE As INVOICEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVOICE = CType(Me.Table,INVOICEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Return CType(Me(Me.tableINVOICE.INVOICE_IDColumn),Long)
            End Get
            Set
                Me(Me.tableINVOICE.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.CUST_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ID' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.CUST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.CUST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_NAME' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.CUST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCOUNT_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.DISCOUNT_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCOUNT_AMOUNT' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.DISCOUNT_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCOUNT_CURR_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.DISCOUNT_CURR_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCOUNT_CURR_CODE' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.DISCOUNT_CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.KHR_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_TOTAL' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.KHR_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.USD_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_TOTAL' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.USD_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.THB_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_TOTAL' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.THB_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.USER_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VOIDE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE.VOIDEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VOIDE' in table 'INVOICE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE.VOIDEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_IDNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.CUST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_IDNull()
            Me(Me.tableINVOICE.CUST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.CUST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_NAMENull()
            Me(Me.tableINVOICE.CUST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableINVOICE.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableINVOICE.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableINVOICE.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISCOUNT_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.DISCOUNT_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISCOUNT_AMOUNTNull()
            Me(Me.tableINVOICE.DISCOUNT_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISCOUNT_CURR_CODENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.DISCOUNT_CURR_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISCOUNT_CURR_CODENull()
            Me(Me.tableINVOICE.DISCOUNT_CURR_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.KHR_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_TOTALNull()
            Me(Me.tableINVOICE.KHR_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.USD_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_TOTALNull()
            Me(Me.tableINVOICE.USD_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.THB_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_TOTALNull()
            Me(Me.tableINVOICE.THB_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tableINVOICE.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableINVOICE.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVOIDENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE.VOIDEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVOIDENull()
            Me(Me.tableINVOICE.VOIDEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACCOUNT_RECEIVABLERow
        Inherits Global.System.Data.DataRow
        
        Private tableACCOUNT_RECEIVABLE As ACCOUNT_RECEIVABLEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACCOUNT_RECEIVABLE = CType(Me.Table,ACCOUNT_RECEIVABLEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_ID() As Long
            Get
                Return CType(Me(Me.tableACCOUNT_RECEIVABLE.ACCR_IDColumn),Long)
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.ACCR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_ID' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.CUST_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ID' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.CUST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.KHR_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_PAID' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.KHR_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.THB_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_PAID' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.THB_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.USD_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_PAID' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.USD_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.ACCR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCR_NOTE' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.ACCR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPLETED() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.COMPLETEDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMPLETED' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.COMPLETEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATE_DATE_ACC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.CREATE_DATE_ACCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE_ACC' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.CREATE_DATE_ACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_NO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_NOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NO' in table 'ACCOUNT_RECEIVABLE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.INVOICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_IDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_IDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.CUST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_IDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.CUST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.KHR_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.KHR_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.THB_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.THB_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.USD_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.USD_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.ACCR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCR_NOTENull()
            Me(Me.tableACCOUNT_RECEIVABLE.ACCR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPLETEDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.COMPLETEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPLETEDNull()
            Me(Me.tableACCOUNT_RECEIVABLE.COMPLETEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATE_DATE_ACCNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.CREATE_DATE_ACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATE_DATE_ACCNull()
            Me(Me.tableACCOUNT_RECEIVABLE.CREATE_DATE_ACCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE.INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_NONull()
            Me(Me.tableACCOUNT_RECEIVABLE.INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetINVOICE_DETAILSRows() As INVOICE_DETAILSRow()
            If (Me.Table.ChildRelations("ACCOUNT_RECEIVABLE_INVOICE_DETAILS") Is Nothing) Then
                Return New INVOICE_DETAILSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ACCOUNT_RECEIVABLE_INVOICE_DETAILS")),INVOICE_DETAILSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AR_PAYMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableAR_PAYMENT As AR_PAYMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAR_PAYMENT = CType(Me.Table,AR_PAYMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMENT_ID() As Long
            Get
                Return CType(Me(Me.tableAR_PAYMENT.PAYMENT_IDColumn),Long)
            End Get
            Set
                Me(Me.tableAR_PAYMENT.PAYMENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.ACCR_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCR_ID' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.ACCR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMENT_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.PAYMENT_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_DATE' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.PAYMENT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMENT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.PAYMENT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_NOTE' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.PAYMENT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USER_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAR_PAYMENT.USER_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USER_ID' in table 'AR_PAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAR_PAYMENT.USER_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCR_IDNull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.ACCR_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCR_IDNull()
            Me(Me.tableAR_PAYMENT.ACCR_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableAR_PAYMENT.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableAR_PAYMENT.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableAR_PAYMENT.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAYMENT_DATENull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.PAYMENT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAYMENT_DATENull()
            Me(Me.tableAR_PAYMENT.PAYMENT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAYMENT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.PAYMENT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAYMENT_NOTENull()
            Me(Me.tableAR_PAYMENT.PAYMENT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSER_IDNull() As Boolean
            Return Me.IsNull(Me.tableAR_PAYMENT.USER_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSER_IDNull()
            Me(Me.tableAR_PAYMENT.USER_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INVOICE_DETAILSRow
        Inherits Global.System.Data.DataRow
        
        Private tableINVOICE_DETAILS As INVOICE_DETAILSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVOICE_DETAILS = CType(Me.Table,INVOICE_DETAILSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DETAIL_ID() As Long
            Get
                Return CType(Me(Me.tableINVOICE_DETAILS.DETAIL_IDColumn),Long)
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.DETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.CUST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_NAME' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.CUST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ADDRESS() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.CUST_ADDRESSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ADDRESS' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.CUST_ADDRESSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.CUST_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_PHONE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.CUST_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Return CType(Me(Me.tableINVOICE_DETAILS.INVOICE_IDColumn),Long)
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_ID' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_NAME' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.UNIT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT_NAME' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.UNIT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_QTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_QTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_QTY' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.USD_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_PRICE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.USD_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.KHR_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_PRICE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.KHR_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.THB_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_PRICE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.THB_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_PRICE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_PRICEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_PRICE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_DISCOUNT() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_DISCOUNTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_DISCOUNT' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_DISCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DISCOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.DISCOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DISCOUNT' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.DISCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURR_CODE() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.CURR_CODEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CURR_CODE' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.CURR_CODEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ITEM_QTY_Free() As String
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.ITEM_QTY_FreeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ITEM_QTY_Free' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.ITEM_QTY_FreeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_EXTRA() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableINVOICE_DETAILS.IS_EXTRAColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_EXTRA' in table 'INVOICE_DETAILS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVOICE_DETAILS.IS_EXTRAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_RECEIVABLERow() As ACCOUNT_RECEIVABLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ACCOUNT_RECEIVABLE_INVOICE_DETAILS")),ACCOUNT_RECEIVABLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ACCOUNT_RECEIVABLE_INVOICE_DETAILS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_RECEIVABLE1Row() As ACCOUNT_RECEIVABLE1Row
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS")),ACCOUNT_RECEIVABLE1Row)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.CUST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_NAMENull()
            Me(Me.tableINVOICE_DETAILS.CUST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_ADDRESSNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.CUST_ADDRESSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_ADDRESSNull()
            Me(Me.tableINVOICE_DETAILS.CUST_ADDRESSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_PHONENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.CUST_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_PHONENull()
            Me(Me.tableINVOICE_DETAILS.CUST_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_IDNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_IDNull()
            Me(Me.tableINVOICE_DETAILS.ITEM_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_NAMENull()
            Me(Me.tableINVOICE_DETAILS.ITEM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNIT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.UNIT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNIT_NAMENull()
            Me(Me.tableINVOICE_DETAILS.UNIT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tableINVOICE_DETAILS.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_QTYNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_QTYNull()
            Me(Me.tableINVOICE_DETAILS.ITEM_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_PRICENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.USD_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_PRICENull()
            Me(Me.tableINVOICE_DETAILS.USD_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_PRICENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.KHR_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_PRICENull()
            Me(Me.tableINVOICE_DETAILS.KHR_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_PRICENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.THB_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_PRICENull()
            Me(Me.tableINVOICE_DETAILS.THB_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_PRICENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_PRICENull()
            Me(Me.tableINVOICE_DETAILS.ITEM_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_DISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_DISCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_DISCOUNTNull()
            Me(Me.tableINVOICE_DETAILS.ITEM_DISCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRICENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRICENull()
            Me(Me.tableINVOICE_DETAILS.PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.DISCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDISCOUNTNull()
            Me(Me.tableINVOICE_DETAILS.DISCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURR_CODENull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.CURR_CODEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURR_CODENull()
            Me(Me.tableINVOICE_DETAILS.CURR_CODEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableINVOICE_DETAILS.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableINVOICE_DETAILS.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableINVOICE_DETAILS.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsITEM_QTY_FreeNull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.ITEM_QTY_FreeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetITEM_QTY_FreeNull()
            Me(Me.tableINVOICE_DETAILS.ITEM_QTY_FreeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_EXTRANull() As Boolean
            Return Me.IsNull(Me.tableINVOICE_DETAILS.IS_EXTRAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_EXTRANull()
            Me(Me.tableINVOICE_DETAILS.IS_EXTRAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableACC_RECEIVED_ABLE_VIEW As ACC_RECEIVED_ABLE_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_RECEIVED_ABLE_VIEW = CType(Me.Table,ACC_RECEIVED_ABLE_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_ID() As Long
            Get
                Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_IDColumn),Long)
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_ID' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_NAME' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_PHONE' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_PAID' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_PAID' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_PAID' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCR_NOTE' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPLETED() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.COMPLETEDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMPLETED' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.COMPLETEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr2' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr3' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMENT_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_DATE' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAYMENT_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAYMENT_NOTE' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ID' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_NO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_NOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NO' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW.IS_DELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEL' in table 'ACC_RECEIVED_ABLE_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW.IS_DELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_IDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_NAMENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_PHONENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_PHONENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_PAIDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.KHR_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.THB_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_PAIDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.THB_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.USD_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_PAIDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.USD_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCR_NOTENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.ACCR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPLETEDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.COMPLETEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPLETEDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.COMPLETEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr2Null() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.Expr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr2Null()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr3Null() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.Expr3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr3Null()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.Expr3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAYMENT_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAYMENT_DATENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAYMENT_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAYMENT_NOTENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.PAYMENT_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_IDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.CUST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_NONull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW.IS_DELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW.IS_DELColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEW1Row
        Inherits Global.System.Data.DataRow
        
        Private tableACC_RECEIVED_ABLE_VIEW1 As ACC_RECEIVED_ABLE_VIEW1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACC_RECEIVED_ABLE_VIEW1 = CType(Me.Table,ACC_RECEIVED_ABLE_VIEW1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_ID() As Long
            Get
                Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.ACCR_IDColumn),Long)
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.ACCR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_ID' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ID' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_NAME' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_PHONE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_PHONEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_PHONE' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_PHONEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property completed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.completedColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'completed' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.completedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidKHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidKHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidKHR' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidKHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidUSD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidUSDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidUSD' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidUSDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaidTHB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidTHBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaidTHB' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidTHBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_KHR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_KHRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_KHR' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_KHRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_USD() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_USDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_USD' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_USDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REMAIN_THB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_THBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REMAIN_THB' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_THBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_NO() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_NOColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NO' in table 'ACC_RECEIVED_ABLE_VIEW1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_IDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_IDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_IDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_NAMENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_PHONENull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_PHONEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_PHONENull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.CUST_PHONEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscompletedNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.completedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcompletedNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.completedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidKHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidKHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidKHRNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidKHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidUSDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidUSDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidUSDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidUSDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidTHBNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidTHBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidTHBNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.PaidTHBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_KHRNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_KHRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_KHRNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_KHRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_USDNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_USDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_USDNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_USDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREMAIN_THBNull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_THBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREMAIN_THBNull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.REMAIN_THBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_NONull()
            Me(Me.tableACC_RECEIVED_ABLE_VIEW1.INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ACCOUNT_RECEIVABLE1Row
        Inherits Global.System.Data.DataRow
        
        Private tableACCOUNT_RECEIVABLE1 As ACCOUNT_RECEIVABLE1DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableACCOUNT_RECEIVABLE1 = CType(Me.Table,ACCOUNT_RECEIVABLE1DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_ID() As Long
            Get
                Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.ACCR_IDColumn),Long)
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.ACCR_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.INVOICE_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_ID' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CUST_ID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.CUST_IDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CUST_ID' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.CUST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.KHR_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_AMOUNT' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.KHR_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.THB_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_AMOUNT' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.THB_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_AMOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.USD_AMOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_AMOUNT' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.USD_AMOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KHR_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.KHR_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KHR_PAID' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.KHR_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THB_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.THB_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THB_PAID' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.THB_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USD_PAID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.USD_PAIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USD_PAID' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.USD_PAIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCR_NOTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.ACCR_NOTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCR_NOTE' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.ACCR_NOTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COMPLETED() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.COMPLETEDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMPLETED' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.COMPLETEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CREATE_DATE_ACC() As Date
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.CREATE_DATE_ACCColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CREATE_DATE_ACC' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.CREATE_DATE_ACCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DEL() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableACCOUNT_RECEIVABLE1.IS_DELColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DEL' in table 'ACCOUNT_RECEIVABLE1' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableACCOUNT_RECEIVABLE1.IS_DELColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.INVOICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_IDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.INVOICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCUST_IDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.CUST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCUST_IDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.CUST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.KHR_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.KHR_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.THB_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.THB_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_AMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.USD_AMOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_AMOUNTNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.USD_AMOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKHR_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.KHR_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKHR_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.KHR_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHB_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.THB_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHB_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.THB_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSD_PAIDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.USD_PAIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSD_PAIDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.USD_PAIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCR_NOTENull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.ACCR_NOTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCR_NOTENull()
            Me(Me.tableACCOUNT_RECEIVABLE1.ACCR_NOTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOMPLETEDNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.COMPLETEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOMPLETEDNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.COMPLETEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCREATE_DATE_ACCNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.CREATE_DATE_ACCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCREATE_DATE_ACCNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.CREATE_DATE_ACCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELNull() As Boolean
            Return Me.IsNull(Me.tableACCOUNT_RECEIVABLE1.IS_DELColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELNull()
            Me(Me.tableACCOUNT_RECEIVABLE1.IS_DELColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetINVOICE_DETAILSRows() As INVOICE_DETAILSRow()
            If (Me.Table.ChildRelations("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS") Is Nothing) Then
                Return New INVOICE_DETAILSRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ACCOUNT_RECEIVABLE1_INVOICE_DETAILS")),INVOICE_DETAILSRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INVOICERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INVOICERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INVOICERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INVOICERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACCOUNT_RECEIVABLERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACCOUNT_RECEIVABLERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACCOUNT_RECEIVABLERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACCOUNT_RECEIVABLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AR_PAYMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AR_PAYMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AR_PAYMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AR_PAYMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INVOICE_DETAILSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As INVOICE_DETAILSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INVOICE_DETAILSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INVOICE_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_RECEIVED_ABLE_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_RECEIVED_ABLE_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_RECEIVED_ABLE_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_RECEIVED_ABLE_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACC_RECEIVED_ABLE_VIEW1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACC_RECEIVED_ABLE_VIEW1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACC_RECEIVED_ABLE_VIEW1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACC_RECEIVED_ABLE_VIEW1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ACCOUNT_RECEIVABLE1RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ACCOUNT_RECEIVABLE1Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ACCOUNT_RECEIVABLE1Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ACCOUNT_RECEIVABLE1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DSAccountReceivableTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INVOICETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INVOICE"
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("CUST_ID", "CUST_ID")
            tableMapping.ColumnMappings.Add("CUST_NAME", "CUST_NAME")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("DISCOUNT_AMOUNT", "DISCOUNT_AMOUNT")
            tableMapping.ColumnMappings.Add("DISCOUNT_CURR_CODE", "DISCOUNT_CURR_CODE")
            tableMapping.ColumnMappings.Add("KHR_TOTAL", "KHR_TOTAL")
            tableMapping.ColumnMappings.Add("USD_TOTAL", "USD_TOTAL")
            tableMapping.ColumnMappings.Add("THB_TOTAL", "THB_TOTAL")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("VOIDE", "VOIDE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[INVOICE] WHERE (([INVOICE_ID] = @Original_INVOICE_ID) AND ((@I"& _ 
                "sNull_CUST_ID = 1 AND [CUST_ID] IS NULL) OR ([CUST_ID] = @Original_CUST_ID)) AND"& _ 
                " ((@IsNull_CUST_NAME = 1 AND [CUST_NAME] IS NULL) OR ([CUST_NAME] = @Original_CU"& _ 
                "ST_NAME)) AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMOUNT"& _ 
                "] = @Original_KHR_AMOUNT)) AND ((@IsNull_USD_AMOUNT = 1 AND [USD_AMOUNT] IS NULL"& _ 
                ") OR ([USD_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [TH"& _ 
                "B_AMOUNT] IS NULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_DISCO"& _ 
                "UNT_AMOUNT = 1 AND [DISCOUNT_AMOUNT] IS NULL) OR ([DISCOUNT_AMOUNT] = @Original_"& _ 
                "DISCOUNT_AMOUNT)) AND ((@IsNull_DISCOUNT_CURR_CODE = 1 AND [DISCOUNT_CURR_CODE] "& _ 
                "IS NULL) OR ([DISCOUNT_CURR_CODE] = @Original_DISCOUNT_CURR_CODE)) AND ((@IsNull"& _ 
                "_KHR_TOTAL = 1 AND [KHR_TOTAL] IS NULL) OR ([KHR_TOTAL] = @Original_KHR_TOTAL)) "& _ 
                "AND ((@IsNull_USD_TOTAL = 1 AND [USD_TOTAL] IS NULL) OR ([USD_TOTAL] = @Original"& _ 
                "_USD_TOTAL)) AND ((@IsNull_THB_TOTAL = 1 AND [THB_TOTAL] IS NULL) OR ([THB_TOTAL"& _ 
                "] = @Original_THB_TOTAL)) AND ((@IsNull_USER_ID = 1 AND [USER_ID] IS NULL) OR (["& _ 
                "USER_ID] = @Original_USER_ID)) AND ((@IsNull_INVOICE_DATE = 1 AND [INVOICE_DATE]"& _ 
                " IS NULL) OR ([INVOICE_DATE] = @Original_INVOICE_DATE)) AND ((@IsNull_VOIDE = 1 "& _ 
                "AND [VOIDE] IS NULL) OR ([VOIDE] = @Original_VOIDE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[INVOICE] ([CUST_ID], [CUST_NAME], [KHR_AMOUNT], [USD_AMOUNT], "& _ 
                "[THB_AMOUNT], [DISCOUNT_AMOUNT], [DISCOUNT_CURR_CODE], [KHR_TOTAL], [USD_TOTAL],"& _ 
                " [THB_TOTAL], [USER_ID], [INVOICE_DATE], [VOIDE]) VALUES (@CUST_ID, @CUST_NAME, "& _ 
                "@KHR_AMOUNT, @USD_AMOUNT, @THB_AMOUNT, @DISCOUNT_AMOUNT, @DISCOUNT_CURR_CODE, @K"& _ 
                "HR_TOTAL, @USD_TOTAL, @THB_TOTAL, @USER_ID, @INVOICE_DATE, @VOIDE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT INVO"& _ 
                "ICE_ID, CUST_ID, CUST_NAME, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, DISCOUNT_AMOUNT,"& _ 
                " DISCOUNT_CURR_CODE, KHR_TOTAL, USD_TOTAL, THB_TOTAL, USER_ID, INVOICE_DATE, VOI"& _ 
                "DE FROM INVOICE WHERE (INVOICE_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[INVOICE] SET [CUST_ID] = @CUST_ID, [CUST_NAME] = @CUST_NAME, [KHR_A"& _ 
                "MOUNT] = @KHR_AMOUNT, [USD_AMOUNT] = @USD_AMOUNT, [THB_AMOUNT] = @THB_AMOUNT, [D"& _ 
                "ISCOUNT_AMOUNT] = @DISCOUNT_AMOUNT, [DISCOUNT_CURR_CODE] = @DISCOUNT_CURR_CODE, "& _ 
                "[KHR_TOTAL] = @KHR_TOTAL, [USD_TOTAL] = @USD_TOTAL, [THB_TOTAL] = @THB_TOTAL, [U"& _ 
                "SER_ID] = @USER_ID, [INVOICE_DATE] = @INVOICE_DATE, [VOIDE] = @VOIDE WHERE (([IN"& _ 
                "VOICE_ID] = @Original_INVOICE_ID) AND ((@IsNull_CUST_ID = 1 AND [CUST_ID] IS NUL"& _ 
                "L) OR ([CUST_ID] = @Original_CUST_ID)) AND ((@IsNull_CUST_NAME = 1 AND [CUST_NAM"& _ 
                "E] IS NULL) OR ([CUST_NAME] = @Original_CUST_NAME)) AND ((@IsNull_KHR_AMOUNT = 1"& _ 
                " AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMOUNT] = @Original_KHR_AMOUNT)) AND ((@IsNu"& _ 
                "ll_USD_AMOUNT = 1 AND [USD_AMOUNT] IS NULL) OR ([USD_AMOUNT] = @Original_USD_AMO"& _ 
                "UNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [THB_AMOUNT] IS NULL) OR ([THB_AMOUNT] = "& _ 
                "@Original_THB_AMOUNT)) AND ((@IsNull_DISCOUNT_AMOUNT = 1 AND [DISCOUNT_AMOUNT] I"& _ 
                "S NULL) OR ([DISCOUNT_AMOUNT] = @Original_DISCOUNT_AMOUNT)) AND ((@IsNull_DISCOU"& _ 
                "NT_CURR_CODE = 1 AND [DISCOUNT_CURR_CODE] IS NULL) OR ([DISCOUNT_CURR_CODE] = @O"& _ 
                "riginal_DISCOUNT_CURR_CODE)) AND ((@IsNull_KHR_TOTAL = 1 AND [KHR_TOTAL] IS NULL"& _ 
                ") OR ([KHR_TOTAL] = @Original_KHR_TOTAL)) AND ((@IsNull_USD_TOTAL = 1 AND [USD_T"& _ 
                "OTAL] IS NULL) OR ([USD_TOTAL] = @Original_USD_TOTAL)) AND ((@IsNull_THB_TOTAL ="& _ 
                " 1 AND [THB_TOTAL] IS NULL) OR ([THB_TOTAL] = @Original_THB_TOTAL)) AND ((@IsNul"& _ 
                "l_USER_ID = 1 AND [USER_ID] IS NULL) OR ([USER_ID] = @Original_USER_ID)) AND ((@"& _ 
                "IsNull_INVOICE_DATE = 1 AND [INVOICE_DATE] IS NULL) OR ([INVOICE_DATE] = @Origin"& _ 
                "al_INVOICE_DATE)) AND ((@IsNull_VOIDE = 1 AND [VOIDE] IS NULL) OR ([VOIDE] = @Or"& _ 
                "iginal_VOIDE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT INVOICE_ID, CUST_ID, CUST_NAME, KHR_AMOUNT, USD_AMOUNT,"& _ 
                " THB_AMOUNT, DISCOUNT_AMOUNT, DISCOUNT_CURR_CODE, KHR_TOTAL, USD_TOTAL, THB_TOTA"& _ 
                "L, USER_ID, INVOICE_DATE, VOIDE FROM INVOICE WHERE (INVOICE_ID = @INVOICE_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT_CURR_CODE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT_CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VOIDE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VOIDE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT INVOICE_ID, CUST_ID, CUST_NAME, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, DISCOU"& _ 
                "NT_AMOUNT, DISCOUNT_CURR_CODE, KHR_TOTAL, USD_TOTAL, THB_TOTAL, USER_ID, INVOICE"& _ 
                "_DATE, VOIDE FROM dbo.INVOICE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.INVOICEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.INVOICEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.INVOICEDataTable = New DSAccountReceivable.INVOICEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSAccountReceivable.INVOICEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSAccountReceivable) As Integer
            Return Me.Adapter.Update(dataSet, "INVOICE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_INVOICE_ID As Long, ByVal Original_CUST_ID As Global.System.Nullable(Of Long), ByVal Original_CUST_NAME As String, ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_DISCOUNT_CURR_CODE As String, ByVal Original_KHR_TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_USD_TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_THB_TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_USER_ID As Global.System.Nullable(Of Integer), ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date), ByVal Original_VOIDE As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_INVOICE_ID,Long)
            If (Original_CUST_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CUST_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CUST_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CUST_NAME,String)
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DISCOUNT_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT_CURR_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_DISCOUNT_CURR_CODE,String)
            End If
            If (Original_KHR_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_KHR_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_USD_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_THB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_VOIDE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_VOIDE.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal CUST_NAME As String, ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal), ByVal DISCOUNT_CURR_CODE As String, ByVal KHR_TOTAL As Global.System.Nullable(Of Decimal), ByVal USD_TOTAL As Global.System.Nullable(Of Decimal), ByVal THB_TOTAL As Global.System.Nullable(Of Decimal), ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal INVOICE_DATE As Global.System.Nullable(Of Date), ByVal VOIDE As Global.System.Nullable(Of Integer)) As Integer
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CUST_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CUST_NAME,String)
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DISCOUNT_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT_CURR_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DISCOUNT_CURR_CODE,String)
            End If
            If (KHR_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(KHR_TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USD_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(USD_TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THB_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(THB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (VOIDE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(VOIDE.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal CUST_NAME As String,  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT_CURR_CODE As String,  _
                    ByVal KHR_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal VOIDE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_INVOICE_ID As Long,  _
                    ByVal Original_CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_CUST_NAME As String,  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT_CURR_CODE As String,  _
                    ByVal Original_KHR_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_VOIDE As Global.System.Nullable(Of Integer),  _
                    ByVal INVOICE_ID As Long) As Integer
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CUST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CUST_NAME,String)
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DISCOUNT_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT_CURR_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DISCOUNT_CURR_CODE,String)
            End If
            If (KHR_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(KHR_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USD_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USD_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(THB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (VOIDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(VOIDE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_INVOICE_ID,Long)
            If (Original_CUST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CUST_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_CUST_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CUST_NAME,String)
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_DISCOUNT_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT_CURR_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_DISCOUNT_CURR_CODE,String)
            End If
            If (Original_KHR_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_KHR_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_USD_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_THB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_VOIDE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_VOIDE.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(INVOICE_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal CUST_NAME As String,  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT_CURR_CODE As String,  _
                    ByVal KHR_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal VOIDE As Global.System.Nullable(Of Integer),  _
                    ByVal Original_INVOICE_ID As Long,  _
                    ByVal Original_CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_CUST_NAME As String,  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT_CURR_CODE As String,  _
                    ByVal Original_KHR_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_VOIDE As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(CUST_ID, CUST_NAME, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, DISCOUNT_AMOUNT, DISCOUNT_CURR_CODE, KHR_TOTAL, USD_TOTAL, THB_TOTAL, USER_ID, INVOICE_DATE, VOIDE, Original_INVOICE_ID, Original_CUST_ID, Original_CUST_NAME, Original_KHR_AMOUNT, Original_USD_AMOUNT, Original_THB_AMOUNT, Original_DISCOUNT_AMOUNT, Original_DISCOUNT_CURR_CODE, Original_KHR_TOTAL, Original_USD_TOTAL, Original_THB_TOTAL, Original_USER_ID, Original_INVOICE_DATE, Original_VOIDE, Original_INVOICE_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACCOUNT_RECEIVABLETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACCOUNT_RECEIVABLE"
            tableMapping.ColumnMappings.Add("ACCR_ID", "ACCR_ID")
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("CUST_ID", "CUST_ID")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("KHR_PAID", "KHR_PAID")
            tableMapping.ColumnMappings.Add("THB_PAID", "THB_PAID")
            tableMapping.ColumnMappings.Add("USD_PAID", "USD_PAID")
            tableMapping.ColumnMappings.Add("ACCR_NOTE", "ACCR_NOTE")
            tableMapping.ColumnMappings.Add("COMPLETED", "COMPLETED")
            tableMapping.ColumnMappings.Add("CREATE_DATE_ACC", "CREATE_DATE_ACC")
            tableMapping.ColumnMappings.Add("INVOICE_NO", "INVOICE_NO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = ""
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = ""
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(16) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCOUNT_RECEIVABLE.ACCR_ID, ACCOUNT_RECEIVABLE.INVOICE_ID, ACCOUNT_RECEIVA"& _ 
                "BLE.CUST_ID, ACCOUNT_RECEIVABLE.KHR_AMOUNT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ACCOUNT_RECEIVAB"& _ 
                "LE.THB_AMOUNT, ACCOUNT_RECEIVABLE.USD_AMOUNT, ACCOUNT_RECEIVABLE.KHR_PAID, ACCOU"& _ 
                "NT_RECEIVABLE.THB_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  ACCOUNT_RECEIVABLE.USD_PAID, ACCOUNT"& _ 
                "_RECEIVABLE.ACCR_NOTE, ACCOUNT_RECEIVABLE.COMPLETED, ACCOUNT_RECEIVABLE.CREATE_D"& _ 
                "ATE_ACC, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE.INVOICE_NO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECEIVABLE INN"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE ON ACCOUNT_RECEIVABLE.INVOICE_ID = INVOICE.IN"& _ 
                "VOICE_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE [dbo].[ACCOUNT_RECEIVABLE] SET [KHR_PAID] =KHR_PAID-@KHR_PAID,THB_PAID=THB"& _ 
                "_PAID-@THB_PAID, USD_PAID =USD_PAID-@USD_PAID WHERE ([ACCR_ID] = @Original_ACCR_"& _ 
                "ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE  ACCOUNT_RECEIVABLE SET IS_DEL=@ISDel WHERE INVOICE_ID=@INVOICE_ID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ISDel", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DFrom AND @DTo)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.ACCR_ID = @ACCR_ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT ACCR_ID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, CUST_ID, INVOICE_ID, KHR_A"& _ 
                "MOUNT, KHR_PAID, THB_AMOUNT, THB_PAID, USD_AMOUNT, USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                " IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECEIVABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ACCR_ID = @ARID)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ARID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (A.COMPLETED = @COMPL"& _ 
                "ETED)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.INVOICE_ID = @InvoiceNo)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DTo AND @DFrom)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.CUST_ID = @CUST_ID) AND (I.INVOICE_DATE BETWEEN @DFrom AND @DTo"& _ 
                ") AND (A.COMPLETED = @Status)"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.CUST_ID = @CUST_ID) AND (I.INVOICE_DATE BETWEEN @DFrom AND @DTo"& _ 
                ")"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.COMPLETED = @Status)"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "select max(ACCR_ID) as MaxAccID from ACCOUNT_RECEIVABLE"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "INSERT INTO ACCOUNT_RECEIVABLE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  (INVOICE_ID, CUST_ID, KHR_AMOUN"& _ 
                "T, THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, C"& _ 
                "REATE_DATE_ACC)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES (@INVOICE_ID,@CUST_ID,@KHR_AMOUNT,@THB_AMOUNT,@USD_AMOUN"& _ 
                "T,@KHR_PAID,@THB_PAID,@USD_PAID,@ACCR_NOTE,@COMPLETED,@CREATE_DATE_ACC)"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_PAID", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "USD_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_NOTE", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE_ACC", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(15).Connection = Me.Connection
            Me._commandCollection(15).CommandText = "UPDATE ACCOUNT_RECEIVABLE set KHR_AMOUNT=@KHR_AMOUNT,THB_AMOUNT=@THB_AMOUNT,USD_A"& _ 
                "MOUNT =@USD_AMOUNT WHERE INVOICE_ID=@INVOICE_ID"
            Me._commandCollection(15).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(16) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(16).Connection = Me.Connection
            Me._commandCollection(16).CommandText = "UPDATE [dbo].[ACCOUNT_RECEIVABLE] SET [KHR_PAID] = @KHR_PAID, [THB_PAID] = @THB_P"& _ 
                "AID, [USD_PAID] = @USD_PAID, [COMPLETED] = @COMPLETED WHERE ([ACCR_ID] = @Origin"& _ 
                "al_ACCR_ID)"
            Me._commandCollection(16).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_PAID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 3, "USD_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAllReceivables(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllReceivables() As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAllStatusDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllStatusDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByAccID(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal ACCR_ID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACCR_ID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByAccID(ByVal ACCR_ID As Long) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACCR_ID,Long)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByID(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal ARID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ARID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByID(ByVal ARID As Long) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ARID,Long)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectDataToDateWithStatus(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal COMPLETED As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDataToDateWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal COMPLETED As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceByNo(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal InvoiceNo As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (InvoiceNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(InvoiceNo.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceByNo(ByVal InvoiceNo As Global.System.Nullable(Of Long)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (InvoiceNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(InvoiceNo.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal DTo As Global.System.Nullable(Of Date), ByVal DFrom As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceDateToDate(ByVal DTo As Global.System.Nullable(Of Date), ByVal DFrom As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceWithCustomerAndStatusPaid(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Status As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceWithCustomerAndStatusPaid(ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Status As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceWithCustomerDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceWithCustomerDateToDate(ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByStatus(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable, ByVal Status As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByStatus(ByVal Status As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSAccountReceivable) As Integer
            Return Me.Adapter.Update(dataSet, "ACCOUNT_RECEIVABLE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function DeductPayment(ByVal KHR_PAID As Global.System.Nullable(Of Decimal), ByVal THB_PAID As Global.System.Nullable(Of Decimal), ByVal USD_PAID As Global.System.Nullable(Of Decimal), ByVal Original_ACCR_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (KHR_PAID.HasValue = true) Then
                command.Parameters(0).Value = CType(KHR_PAID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (THB_PAID.HasValue = true) Then
                command.Parameters(1).Value = CType(THB_PAID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_PAID.HasValue = true) Then
                command.Parameters(2).Value = CType(USD_PAID.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            command.Parameters(3).Value = CType(Original_ACCR_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function DeletAccReceive(ByVal ISDel As Global.System.Nullable(Of Integer), ByVal INVOICE_ID As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (ISDel.HasValue = true) Then
                command.Parameters(0).Value = CType(ISDel.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(INVOICE_ID.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxAccReID() As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(13)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertReceivable(ByVal INVOICE_ID As Global.System.Nullable(Of Long), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal KHR_AMOUNT As Global.System.Nullable(Of Double), ByVal THB_AMOUNT As Global.System.Nullable(Of Double), ByVal USD_AMOUNT As Global.System.Nullable(Of Double), ByVal KHR_PAID As Global.System.Nullable(Of Decimal), ByVal THB_PAID As Global.System.Nullable(Of Decimal), ByVal USD_PAID As Global.System.Nullable(Of Double), ByVal ACCR_NOTE As String, ByVal COMPLETED As Global.System.Nullable(Of Integer), ByVal CREATE_DATE_ACC As Global.System.Nullable(Of Date)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(14)
            If (INVOICE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(INVOICE_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(CUST_ID.Value,Long)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                command.Parameters(2).Value = CType(KHR_AMOUNT.Value,Double)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                command.Parameters(3).Value = CType(THB_AMOUNT.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                command.Parameters(4).Value = CType(USD_AMOUNT.Value,Double)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (KHR_PAID.HasValue = true) Then
                command.Parameters(5).Value = CType(KHR_PAID.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (THB_PAID.HasValue = true) Then
                command.Parameters(6).Value = CType(THB_PAID.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (USD_PAID.HasValue = true) Then
                command.Parameters(7).Value = CType(USD_PAID.Value,Double)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ACCR_NOTE Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(ACCR_NOTE,String)
            End If
            If (COMPLETED.HasValue = true) Then
                command.Parameters(9).Value = CType(COMPLETED.Value,Integer)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE_ACC.HasValue = true) Then
                command.Parameters(10).Value = CType(CREATE_DATE_ACC.Value,Date)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateAccReceiveAble(ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal INVOICE_ID As Global.System.Nullable(Of Long)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(15)
            If (KHR_AMOUNT.HasValue = true) Then
                command.Parameters(0).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                command.Parameters(1).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                command.Parameters(2).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_ID.HasValue = true) Then
                command.Parameters(3).Value = CType(INVOICE_ID.Value,Long)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdatePaidAmount(ByVal KHR_PAID As Global.System.Nullable(Of Decimal), ByVal THB_PAID As Global.System.Nullable(Of Decimal), ByVal USD_PAID As Global.System.Nullable(Of Decimal), ByVal COMPLETED As Global.System.Nullable(Of Integer), ByVal Original_ACCR_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(16)
            If (KHR_PAID.HasValue = true) Then
                command.Parameters(0).Value = CType(KHR_PAID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (THB_PAID.HasValue = true) Then
                command.Parameters(1).Value = CType(THB_PAID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_PAID.HasValue = true) Then
                command.Parameters(2).Value = CType(USD_PAID.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                command.Parameters(3).Value = CType(COMPLETED.Value,Integer)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            command.Parameters(4).Value = CType(Original_ACCR_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AR_PAYMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AR_PAYMENT"
            tableMapping.ColumnMappings.Add("PAYMENT_ID", "PAYMENT_ID")
            tableMapping.ColumnMappings.Add("ACCR_ID", "ACCR_ID")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("PAYMENT_DATE", "PAYMENT_DATE")
            tableMapping.ColumnMappings.Add("PAYMENT_NOTE", "PAYMENT_NOTE")
            tableMapping.ColumnMappings.Add("USER_ID", "USER_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AR_PAYMENT] WHERE (([PAYMENT_ID] = @Original_PAYMENT_ID) AND ("& _ 
                "(@IsNull_ACCR_ID = 1 AND [ACCR_ID] IS NULL) OR ([ACCR_ID] = @Original_ACCR_ID)) "& _ 
                "AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMOUNT] = @Origi"& _ 
                "nal_KHR_AMOUNT)) AND ((@IsNull_USD_AMOUNT = 1 AND [USD_AMOUNT] IS NULL) OR ([USD"& _ 
                "_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [THB_AMOUNT] "& _ 
                "IS NULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_PAYMENT_DATE = "& _ 
                "1 AND [PAYMENT_DATE] IS NULL) OR ([PAYMENT_DATE] = @Original_PAYMENT_DATE)) AND "& _ 
                "((@IsNull_PAYMENT_NOTE = 1 AND [PAYMENT_NOTE] IS NULL) OR ([PAYMENT_NOTE] = @Ori"& _ 
                "ginal_PAYMENT_NOTE)) AND ((@IsNull_USER_ID = 1 AND [USER_ID] IS NULL) OR ([USER_"& _ 
                "ID] = @Original_USER_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCR_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAYMENT_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAYMENT_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AR_PAYMENT] ([ACCR_ID], [KHR_AMOUNT], [USD_AMOUNT], [THB_AMOUN"& _ 
                "T], [PAYMENT_DATE], [PAYMENT_NOTE], [USER_ID]) VALUES (@ACCR_ID, @KHR_AMOUNT, @U"& _ 
                "SD_AMOUNT, @THB_AMOUNT, @PAYMENT_DATE, @PAYMENT_NOTE, @USER_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PAYMENT"& _ 
                "_ID, ACCR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAYMENT_NOTE, US"& _ 
                "ER_ID FROM AR_PAYMENT WHERE (PAYMENT_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AR_PAYMENT] SET [ACCR_ID] = @ACCR_ID, [KHR_AMOUNT] = @KHR_AMOUNT, ["& _ 
                "USD_AMOUNT] = @USD_AMOUNT, [THB_AMOUNT] = @THB_AMOUNT, [PAYMENT_DATE] = @PAYMENT"& _ 
                "_DATE, [PAYMENT_NOTE] = @PAYMENT_NOTE, [USER_ID] = @USER_ID WHERE (([PAYMENT_ID]"& _ 
                " = @Original_PAYMENT_ID) AND ((@IsNull_ACCR_ID = 1 AND [ACCR_ID] IS NULL) OR ([A"& _ 
                "CCR_ID] = @Original_ACCR_ID)) AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS N"& _ 
                "ULL) OR ([KHR_AMOUNT] = @Original_KHR_AMOUNT)) AND ((@IsNull_USD_AMOUNT = 1 AND "& _ 
                "[USD_AMOUNT] IS NULL) OR ([USD_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsNull_TH"& _ 
                "B_AMOUNT = 1 AND [THB_AMOUNT] IS NULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT))"& _ 
                " AND ((@IsNull_PAYMENT_DATE = 1 AND [PAYMENT_DATE] IS NULL) OR ([PAYMENT_DATE] ="& _ 
                " @Original_PAYMENT_DATE)) AND ((@IsNull_PAYMENT_NOTE = 1 AND [PAYMENT_NOTE] IS N"& _ 
                "ULL) OR ([PAYMENT_NOTE] = @Original_PAYMENT_NOTE)) AND ((@IsNull_USER_ID = 1 AND"& _ 
                " [USER_ID] IS NULL) OR ([USER_ID] = @Original_USER_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PAYMENT_ID, AC"& _ 
                "CR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAYMENT_NOTE, USER_ID F"& _ 
                "ROM AR_PAYMENT WHERE (PAYMENT_ID = @PAYMENT_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCR_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAYMENT_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAYMENT_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USER_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PAYMENT_ID, ACCR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAY"& _ 
                "MENT_NOTE, USER_ID FROM dbo.AR_PAYMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [dbo].[AR_PAYMENT] WHERE ([PAYMENT_ID] = @Original_PAYMENT_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAYMENT_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT PAYMENT_ID, ACCR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAY"& _ 
                "MENT_NOTE, USER_ID, IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     AR_PAYMENT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (ACCR_ID = @ARID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ARID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO [dbo].[AR_PAYMENT] ([ACCR_ID], [KHR_AMOUNT], [USD_AMOUNT], [THB_AMOUN"& _ 
                "T], [PAYMENT_DATE], [PAYMENT_NOTE], [USER_ID]) VALUES (@ACCR_ID, @KHR_AMOUNT, @U"& _ 
                "SD_AMOUNT, @THB_AMOUNT, @PAYMENT_DATE, @PAYMENT_NOTE, @USER_ID);"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.Float, 9, Global.System.Data.ParameterDirection.Input, 18, 3, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAYMENT_NOTE", Global.System.Data.SqlDbType.NVarChar, 500, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USER_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "USER_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.AR_PAYMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.AR_PAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.AR_PAYMENTDataTable = New DSAccountReceivable.AR_PAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByARID(ByVal dataTable As DSAccountReceivable.AR_PAYMENTDataTable, ByVal ARID As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ARID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ARID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByARID(ByVal ARID As Global.System.Nullable(Of Long)) As DSAccountReceivable.AR_PAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (ARID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ARID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.AR_PAYMENTDataTable = New DSAccountReceivable.AR_PAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSAccountReceivable.AR_PAYMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSAccountReceivable) As Integer
            Return Me.Adapter.Update(dataSet, "AR_PAYMENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PAYMENT_ID As Long, ByVal Original_ACCR_ID As Global.System.Nullable(Of Long), ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_PAYMENT_DATE As Global.System.Nullable(Of Date), ByVal Original_PAYMENT_NOTE As String, ByVal Original_USER_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PAYMENT_ID,Long)
            If (Original_ACCR_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ACCR_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_PAYMENT_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PAYMENT_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_PAYMENT_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_PAYMENT_NOTE,String)
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ACCR_ID As Global.System.Nullable(Of Long), ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal PAYMENT_DATE As Global.System.Nullable(Of Date), ByVal PAYMENT_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer)) As Integer
            If (ACCR_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ACCR_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PAYMENT_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PAYMENT_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ACCR_ID As Global.System.Nullable(Of Long),  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal PAYMENT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PAYMENT_NOTE As String,  _
                    ByVal USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PAYMENT_ID As Long,  _
                    ByVal Original_ACCR_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PAYMENT_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PAYMENT_NOTE As String,  _
                    ByVal Original_USER_ID As Global.System.Nullable(Of Integer),  _
                    ByVal PAYMENT_ID As Long) As Integer
            If (ACCR_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ACCR_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PAYMENT_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PAYMENT_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PAYMENT_ID,Long)
            If (Original_ACCR_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ACCR_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_PAYMENT_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_PAYMENT_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_PAYMENT_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_PAYMENT_NOTE,String)
            End If
            If (Original_USER_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_USER_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(PAYMENT_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ACCR_ID As Global.System.Nullable(Of Long), ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal PAYMENT_DATE As Global.System.Nullable(Of Date), ByVal PAYMENT_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer), ByVal Original_PAYMENT_ID As Long, ByVal Original_ACCR_ID As Global.System.Nullable(Of Long), ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_PAYMENT_DATE As Global.System.Nullable(Of Date), ByVal Original_PAYMENT_NOTE As String, ByVal Original_USER_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(ACCR_ID, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, PAYMENT_DATE, PAYMENT_NOTE, USER_ID, Original_PAYMENT_ID, Original_ACCR_ID, Original_KHR_AMOUNT, Original_USD_AMOUNT, Original_THB_AMOUNT, Original_PAYMENT_DATE, Original_PAYMENT_NOTE, Original_USER_ID, Original_PAYMENT_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeletePayment(ByVal Original_PAYMENT_ID As Long) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_PAYMENT_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertPayment(ByVal ACCR_ID As Global.System.Nullable(Of Long), ByVal KHR_AMOUNT As Global.System.Nullable(Of Double), ByVal USD_AMOUNT As Global.System.Nullable(Of Double), ByVal THB_AMOUNT As Global.System.Nullable(Of Double), ByVal PAYMENT_DATE As Global.System.Nullable(Of Date), ByVal PAYMENT_NOTE As String, ByVal USER_ID As Global.System.Nullable(Of Integer)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (ACCR_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(ACCR_ID.Value,Long)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                command.Parameters(1).Value = CType(KHR_AMOUNT.Value,Double)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                command.Parameters(2).Value = CType(USD_AMOUNT.Value,Double)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                command.Parameters(3).Value = CType(THB_AMOUNT.Value,Double)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_DATE.HasValue = true) Then
                command.Parameters(4).Value = CType(PAYMENT_DATE.Value,Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (PAYMENT_NOTE Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(PAYMENT_NOTE,String)
            End If
            If (USER_ID.HasValue = true) Then
                command.Parameters(6).Value = CType(USER_ID.Value,Integer)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class INVOICE_DETAILSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "INVOICE_DETAILS"
            tableMapping.ColumnMappings.Add("DETAIL_ID", "DETAIL_ID")
            tableMapping.ColumnMappings.Add("CUST_NAME", "CUST_NAME")
            tableMapping.ColumnMappings.Add("CUST_ADDRESS", "CUST_ADDRESS")
            tableMapping.ColumnMappings.Add("CUST_PHONE", "CUST_PHONE")
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("ITEM_ID", "ITEM_ID")
            tableMapping.ColumnMappings.Add("ITEM_NAME", "ITEM_NAME")
            tableMapping.ColumnMappings.Add("UNIT_NAME", "UNIT_NAME")
            tableMapping.ColumnMappings.Add("QTY", "QTY")
            tableMapping.ColumnMappings.Add("ITEM_QTY", "ITEM_QTY")
            tableMapping.ColumnMappings.Add("USD_PRICE", "USD_PRICE")
            tableMapping.ColumnMappings.Add("KHR_PRICE", "KHR_PRICE")
            tableMapping.ColumnMappings.Add("THB_PRICE", "THB_PRICE")
            tableMapping.ColumnMappings.Add("ITEM_PRICE", "ITEM_PRICE")
            tableMapping.ColumnMappings.Add("ITEM_DISCOUNT", "ITEM_DISCOUNT")
            tableMapping.ColumnMappings.Add("PRICE", "PRICE")
            tableMapping.ColumnMappings.Add("DISCOUNT", "DISCOUNT")
            tableMapping.ColumnMappings.Add("CURR_CODE", "CURR_CODE")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("ITEM_QTY_Free", "ITEM_QTY_Free")
            tableMapping.ColumnMappings.Add("IS_EXTRA", "IS_EXTRA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[INVOICE_DETAILS] WHERE (([DETAIL_ID] = @Original_DETAIL_ID) AN"& _ 
                "D ([INVOICE_ID] = @Original_INVOICE_ID) AND ((@IsNull_ITEM_ID = 1 AND [ITEM_ID] "& _ 
                "IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNull_UNIT_NAME = 1 AND [UN"& _ 
                "IT_NAME] IS NULL) OR ([UNIT_NAME] = @Original_UNIT_NAME)) AND ((@IsNull_QTY = 1 "& _ 
                "AND [QTY] IS NULL) OR ([QTY] = @Original_QTY)) AND ((@IsNull_PRICE = 1 AND [PRIC"& _ 
                "E] IS NULL) OR ([PRICE] = @Original_PRICE)) AND ((@IsNull_DISCOUNT = 1 AND [DISC"& _ 
                "OUNT] IS NULL) OR ([DISCOUNT] = @Original_DISCOUNT)) AND ((@IsNull_CURR_CODE = 1"& _ 
                " AND [CURR_CODE] IS NULL) OR ([CURR_CODE] = @Original_CURR_CODE)) AND ((@IsNull_"& _ 
                "KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMOUNT] = @Original_KHR_AMOUNT"& _ 
                ")) AND ((@IsNull_USD_AMOUNT = 1 AND [USD_AMOUNT] IS NULL) OR ([USD_AMOUNT] = @Or"& _ 
                "iginal_USD_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [THB_AMOUNT] IS NULL) OR (["& _ 
                "THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_IS_EXTRA = 1 AND [IS_EXTRA] I"& _ 
                "S NULL) OR ([IS_EXTRA] = @Original_IS_EXTRA)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETAIL_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_EXTRA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_EXTRA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[INVOICE_DETAILS] ([INVOICE_ID], [ITEM_ID], [UNIT_NAME], [QTY],"& _ 
                " [PRICE], [DISCOUNT], [CURR_CODE], [KHR_AMOUNT], [USD_AMOUNT], [THB_AMOUNT], [IS"& _ 
                "_EXTRA]) VALUES (@INVOICE_ID, @ITEM_ID, @UNIT_NAME, @QTY, @PRICE, @DISCOUNT, @CU"& _ 
                "RR_CODE, @KHR_AMOUNT, @USD_AMOUNT, @THB_AMOUNT, @IS_EXTRA);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DETAIL_ID, ("& _ 
                "SELECT CUST_NAME FROM INVOICE AS I WHERE (INVOICE_ID = P.INVOICE_ID)) AS CUST_NA"& _ 
                "ME, (SELECT CUST_ADDRESS FROM CUSTOMER AS C WHERE (CUST_ID = (SELECT CUST_ID FRO"& _ 
                "M INVOICE AS I WHERE (INVOICE_ID = P.INVOICE_ID)))) AS CUST_ADDRESS, (SELECT CUS"& _ 
                "T_PHONE FROM CUSTOMER AS C WHERE (CUST_ID = (SELECT CUST_ID FROM INVOICE AS I WH"& _ 
                "ERE (INVOICE_ID = P.INVOICE_ID)))) AS CUST_PHONE, INVOICE_ID, ITEM_ID, (SELECT I"& _ 
                "TEM_NAME FROM ITEMS AS I WHERE (ITEM_ID = P.ITEM_ID)) AS ITEM_NAME, UNIT_NAME, Q"& _ 
                "TY, CONVERT (varchar(25), QTY) + '' + UNIT_NAME AS ITEM_QTY, (SELECT PRICE FROM "& _ 
                "INVOICE_DETAILS AS D WHERE (DETAIL_ID = P.DETAIL_ID) AND (CURR_CODE = 'USD')) AS"& _ 
                " USD_PRICE, (SELECT PRICE FROM INVOICE_DETAILS AS D WHERE (DETAIL_ID = P.DETAIL_"& _ 
                "ID) AND (CURR_CODE = 'KHR')) AS KHR_PRICE, (SELECT PRICE FROM INVOICE_DETAILS AS"& _ 
                " D WHERE (DETAIL_ID = P.DETAIL_ID) AND (CURR_CODE = 'THB')) AS THB_PRICE, CONVER"& _ 
                "T (varchar(25), PRICE) + '' + CURR_CODE AS ITEM_PRICE, CONVERT (varchar(25), DIS"& _ 
                "COUNT) + ' ' + CURR_CODE AS ITEM_DISCOUNT, PRICE, DISCOUNT, CURR_CODE, KHR_AMOUN"& _ 
                "T, USD_AMOUNT, THB_AMOUNT, CONVERT (varchar(25), QTY_FREE) + '' + INIT_NAME_FREE"& _ 
                " AS ITEM_QTY_Free, IS_EXTRA FROM INVOICE_DETAILS AS P WHERE (DETAIL_ID = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_EXTRA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[INVOICE_DETAILS] SET [INVOICE_ID] = @INVOICE_ID, [ITEM_ID] = @ITEM_"& _ 
                "ID, [UNIT_NAME] = @UNIT_NAME, [QTY] = @QTY, [PRICE] = @PRICE, [DISCOUNT] = @DISC"& _ 
                "OUNT, [CURR_CODE] = @CURR_CODE, [KHR_AMOUNT] = @KHR_AMOUNT, [USD_AMOUNT] = @USD_"& _ 
                "AMOUNT, [THB_AMOUNT] = @THB_AMOUNT, [IS_EXTRA] = @IS_EXTRA WHERE (([DETAIL_ID] ="& _ 
                " @Original_DETAIL_ID) AND ([INVOICE_ID] = @Original_INVOICE_ID) AND ((@IsNull_IT"& _ 
                "EM_ID = 1 AND [ITEM_ID] IS NULL) OR ([ITEM_ID] = @Original_ITEM_ID)) AND ((@IsNu"& _ 
                "ll_UNIT_NAME = 1 AND [UNIT_NAME] IS NULL) OR ([UNIT_NAME] = @Original_UNIT_NAME)"& _ 
                ") AND ((@IsNull_QTY = 1 AND [QTY] IS NULL) OR ([QTY] = @Original_QTY)) AND ((@Is"& _ 
                "Null_PRICE = 1 AND [PRICE] IS NULL) OR ([PRICE] = @Original_PRICE)) AND ((@IsNul"& _ 
                "l_DISCOUNT = 1 AND [DISCOUNT] IS NULL) OR ([DISCOUNT] = @Original_DISCOUNT)) AND"& _ 
                " ((@IsNull_CURR_CODE = 1 AND [CURR_CODE] IS NULL) OR ([CURR_CODE] = @Original_CU"& _ 
                "RR_CODE)) AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMOUNT"& _ 
                "] = @Original_KHR_AMOUNT)) AND ((@IsNull_USD_AMOUNT = 1 AND [USD_AMOUNT] IS NULL"& _ 
                ") OR ([USD_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [TH"& _ 
                "B_AMOUNT] IS NULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_IS_EX"& _ 
                "TRA = 1 AND [IS_EXTRA] IS NULL) OR ([IS_EXTRA] = @Original_IS_EXTRA)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "DETAIL_ID, (SELECT CUST_NAME FROM INVOICE AS I WHERE (INVOICE_ID = P.INVOICE_ID)"& _ 
                ") AS CUST_NAME, (SELECT CUST_ADDRESS FROM CUSTOMER AS C WHERE (CUST_ID = (SELECT"& _ 
                " CUST_ID FROM INVOICE AS I WHERE (INVOICE_ID = P.INVOICE_ID)))) AS CUST_ADDRESS,"& _ 
                " (SELECT CUST_PHONE FROM CUSTOMER AS C WHERE (CUST_ID = (SELECT CUST_ID FROM INV"& _ 
                "OICE AS I WHERE (INVOICE_ID = P.INVOICE_ID)))) AS CUST_PHONE, INVOICE_ID, ITEM_I"& _ 
                "D, (SELECT ITEM_NAME FROM ITEMS AS I WHERE (ITEM_ID = P.ITEM_ID)) AS ITEM_NAME, "& _ 
                "UNIT_NAME, QTY, CONVERT (varchar(25), QTY) + '' + UNIT_NAME AS ITEM_QTY, (SELECT"& _ 
                " PRICE FROM INVOICE_DETAILS AS D WHERE (DETAIL_ID = P.DETAIL_ID) AND (CURR_CODE "& _ 
                "= 'USD')) AS USD_PRICE, (SELECT PRICE FROM INVOICE_DETAILS AS D WHERE (DETAIL_ID"& _ 
                " = P.DETAIL_ID) AND (CURR_CODE = 'KHR')) AS KHR_PRICE, (SELECT PRICE FROM INVOIC"& _ 
                "E_DETAILS AS D WHERE (DETAIL_ID = P.DETAIL_ID) AND (CURR_CODE = 'THB')) AS THB_P"& _ 
                "RICE, CONVERT (varchar(25), PRICE) + '' + CURR_CODE AS ITEM_PRICE, CONVERT (varc"& _ 
                "har(25), DISCOUNT) + ' ' + CURR_CODE AS ITEM_DISCOUNT, PRICE, DISCOUNT, CURR_COD"& _ 
                "E, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, CONVERT (varchar(25), QTY_FREE) + '' + IN"& _ 
                "IT_NAME_FREE AS ITEM_QTY_Free, IS_EXTRA FROM INVOICE_DETAILS AS P WHERE (DETAIL_"& _ 
                "ID = @DETAIL_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CURR_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_EXTRA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DETAIL_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ITEM_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ITEM_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DISCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DISCOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DISCOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CURR_CODE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CURR_CODE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CURR_CODE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_EXTRA", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_EXTRA", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_EXTRA", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DETAIL_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DETAIL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT P.DETAIL_ID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT CUST_NAME FROM INVOICE AS I WHERE I.INVOICE_ID=P.I"& _ 
                "NVOICE_ID) AS CUST_NAME,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT CUST_ADDRESS FROM CUSTOMER AS C WHERE C.CUST"& _ 
                "_ID=(SELECT CUST_ID FROM INVOICE AS I WHERE I.INVOICE_ID=P.INVOICE_ID)) AS CUST_"& _ 
                "ADDRESS,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT CUST_PHONE FROM CUSTOMER AS C WHERE C.CUST_ID=(SELECT CUST_I"& _ 
                "D FROM INVOICE AS I WHERE I.INVOICE_ID=P.INVOICE_ID)) AS CUST_PHONE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"P.INVOIC"& _ 
                "E_ID,P.ITEM_ID,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT ITEM_NAME FROM ITEMS AS I WHERE I.ITEM_ID=P.ITEM_ID) "& _ 
                "AS ITEM_NAME, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"P.UNIT_NAME, P.QTY,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(CONVERT(varchar(25),P.QTY)+''+P.UNIT_N"& _ 
                "AME) AS ITEM_QTY,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT PRICE FROM INVOICE_DETAILS AS D WHERE D.DETAIL_ID=P"& _ 
                ".DETAIL_ID AND D.CURR_CODE='USD') AS USD_PRICE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SELECT PRICE FROM INVOICE_DETA"& _ 
                "ILS AS D WHERE D.DETAIL_ID=P.DETAIL_ID AND D.CURR_CODE='KHR') AS KHR_PRICE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(SE"& _ 
                "LECT PRICE FROM INVOICE_DETAILS AS D WHERE D.DETAIL_ID=P.DETAIL_ID AND D.CURR_CO"& _ 
                "DE='THB') AS THB_PRICE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(CONVERT(varchar(25),P.PRICE)+''+P.CURR_CODE) AS ITEM"& _ 
                "_PRICE,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(CONVERT(varchar(25),P.DISCOUNT)+' '+P.CURR_CODE) AS ITEM_DISCOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "P.PRICE,P.DISCOUNT,P.CURR_CODE,P.KHR_AMOUNT, P.USD_AMOUNT, P.THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(CONVE"& _ 
                "RT(varchar(25),P.QTY_FREE)+''+P.INIT_NAME_FREE) AS ITEM_QTY_Free,P.IS_EXTRA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" FR"& _ 
                "OM dbo.INVOICE_DETAILS  AS P "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.INVOICE_DETAILSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.INVOICE_DETAILSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.INVOICE_DETAILSDataTable = New DSAccountReceivable.INVOICE_DETAILSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSAccountReceivable.INVOICE_DETAILSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSAccountReceivable) As Integer
            Return Me.Adapter.Update(dataSet, "INVOICE_DETAILS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DETAIL_ID As Long, ByVal Original_INVOICE_ID As Long, ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer), ByVal Original_UNIT_NAME As String, ByVal Original_QTY As Global.System.Nullable(Of Decimal), ByVal Original_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_DISCOUNT As Global.System.Nullable(Of Decimal), ByVal Original_CURR_CODE As String, ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_IS_EXTRA As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DETAIL_ID,Long)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_INVOICE_ID,Long)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_QTY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_CURR_CODE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_EXTRA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_IS_EXTRA.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal INVOICE_ID As Long, ByVal ITEM_ID As Global.System.Nullable(Of Integer), ByVal UNIT_NAME As String, ByVal QTY As Global.System.Nullable(Of Decimal), ByVal PRICE As Global.System.Nullable(Of Decimal), ByVal DISCOUNT As Global.System.Nullable(Of Decimal), ByVal CURR_CODE As String, ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal IS_EXTRA As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(INVOICE_ID,Long)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(QTY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CURR_CODE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CURR_CODE,String)
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IS_EXTRA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IS_EXTRA.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal INVOICE_ID As Long,  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal UNIT_NAME As String,  _
                    ByVal QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal CURR_CODE As String,  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_EXTRA As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DETAIL_ID As Long,  _
                    ByVal Original_INVOICE_ID As Long,  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UNIT_NAME As String,  _
                    ByVal Original_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_EXTRA As Global.System.Nullable(Of Boolean),  _
                    ByVal DETAIL_ID As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(INVOICE_ID,Long)
            If (ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(UNIT_NAME,String)
            End If
            If (QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (DISCOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CURR_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CURR_CODE,String)
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IS_EXTRA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IS_EXTRA.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DETAIL_ID,Long)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_INVOICE_ID,Long)
            If (Original_ITEM_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ITEM_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_UNIT_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UNIT_NAME,String)
            End If
            If (Original_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_DISCOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CURR_CODE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_CURR_CODE,String)
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_EXTRA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_IS_EXTRA.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(DETAIL_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal INVOICE_ID As Long,  _
                    ByVal ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal UNIT_NAME As String,  _
                    ByVal QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal CURR_CODE As String,  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_EXTRA As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_DETAIL_ID As Long,  _
                    ByVal Original_INVOICE_ID As Long,  _
                    ByVal Original_ITEM_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UNIT_NAME As String,  _
                    ByVal Original_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CURR_CODE As String,  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_EXTRA As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(INVOICE_ID, ITEM_ID, UNIT_NAME, QTY, PRICE, DISCOUNT, CURR_CODE, KHR_AMOUNT, USD_AMOUNT, THB_AMOUNT, IS_EXTRA, Original_DETAIL_ID, Original_INVOICE_ID, Original_ITEM_ID, Original_UNIT_NAME, Original_QTY, Original_PRICE, Original_DISCOUNT, Original_CURR_CODE, Original_KHR_AMOUNT, Original_USD_AMOUNT, Original_THB_AMOUNT, Original_IS_EXTRA, Original_DETAIL_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_RECEIVED_ABLE_VIEW"
            tableMapping.ColumnMappings.Add("ACCR_ID", "ACCR_ID")
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("CUST_NAME", "CUST_NAME")
            tableMapping.ColumnMappings.Add("CUST_PHONE", "CUST_PHONE")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("KHR_PAID", "KHR_PAID")
            tableMapping.ColumnMappings.Add("THB_PAID", "THB_PAID")
            tableMapping.ColumnMappings.Add("USD_PAID", "USD_PAID")
            tableMapping.ColumnMappings.Add("ACCR_NOTE", "ACCR_NOTE")
            tableMapping.ColumnMappings.Add("COMPLETED", "COMPLETED")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("Expr2", "Expr2")
            tableMapping.ColumnMappings.Add("Expr3", "Expr3")
            tableMapping.ColumnMappings.Add("PAYMENT_DATE", "PAYMENT_DATE")
            tableMapping.ColumnMappings.Add("PAYMENT_NOTE", "PAYMENT_NOTE")
            tableMapping.ColumnMappings.Add("CUST_ID", "CUST_ID")
            tableMapping.ColumnMappings.Add("INVOICE_NO", "INVOICE_NO")
            tableMapping.ColumnMappings.Add("IS_DEL", "IS_DEL")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCR_ID, INVOICE_ID, INVOICE_DATE, CUST_NAME, CUST_PHONE, KHR_AMOUNT, THB_"& _ 
                "AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                " COMPLETED, Expr1, Expr2, Expr3, PAYMENT_DATE, PAYMENT_NOTE, CUST_ID, INVOICE_NO"& _ 
                ", IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACC_RECEIVED_ABLE_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ACCR_ID, ACCR_NOTE, COMPLETED, CUST_ID, CUST_NAME, CUST_PHONE, Expr1, Expr"& _ 
                "2, Expr3, INVOICE_DATE, INVOICE_ID, INVOICE_NO, IS_DEL, KHR_AMOUNT, KHR_PAID, PA"& _ 
                "YMENT_DATE, PAYMENT_NOTE, THB_AMOUNT, THB_PAID, USD_AMOUNT, USD_PAID FROM ACC_RE"& _ 
                "CEIVED_ABLE_VIEW WHERE (INVOICE_DATE BETWEEN @DFrom AND @Dto) AND IS_DEL=@IS_DEL"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dto", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ACCR_ID, ACCR_NOTE, COMPLETED, CUST_ID, CUST_NAME, CUST_PHONE, Expr1, Expr"& _ 
                "2, Expr3, INVOICE_DATE, INVOICE_ID, INVOICE_NO, IS_DEL, KHR_AMOUNT, KHR_PAID, PA"& _ 
                "YMENT_DATE, PAYMENT_NOTE, THB_AMOUNT, THB_PAID, USD_AMOUNT, USD_PAID FROM ACC_RE"& _ 
                "CEIVED_ABLE_VIEW WHERE (INVOICE_DATE BETWEEN @DFrom AND @Dto) AND (COMPLETED = @"& _ 
                "completed) AND IS_DEL=@IS_DEL"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Dto", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@completed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ACCR_ID, ACCR_NOTE, COMPLETED, CUST_ID, CUST_NAME, CUST_PHONE, Expr1, Expr"& _ 
                "2, Expr3, INVOICE_DATE, INVOICE_ID, INVOICE_NO, IS_DEL, KHR_AMOUNT, KHR_PAID, PA"& _ 
                "YMENT_DATE, PAYMENT_NOTE, THB_AMOUNT, THB_PAID, USD_AMOUNT, USD_PAID FROM ACC_RE"& _ 
                "CEIVED_ABLE_VIEW WHERE (INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (CUST_ID = @CU"& _ 
                "ST_ID) AND IS_DEL=@IS_DEL"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ACCR_ID, ACCR_NOTE, COMPLETED, CUST_ID, CUST_NAME, CUST_PHONE, Expr1, Expr"& _ 
                "2, Expr3, INVOICE_DATE, INVOICE_ID, INVOICE_NO, IS_DEL, KHR_AMOUNT, KHR_PAID, PA"& _ 
                "YMENT_DATE, PAYMENT_NOTE, THB_AMOUNT, THB_PAID, USD_AMOUNT, USD_PAID FROM ACC_RE"& _ 
                "CEIVED_ABLE_VIEW WHERE (INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (CUST_ID = @CU"& _ 
                "ST_ID) AND (COMPLETED = @COMPLETED) AND IS_DEL=@IS_DEL"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal Dto As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Dto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Dto.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateAllCustomerAndAllStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal Dto As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Dto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Dto.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal Dto As Global.System.Nullable(Of Date), ByVal completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Dto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Dto.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateAllCustomerWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal Dto As Global.System.Nullable(Of Date), ByVal completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Dto.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Dto.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithCustomerAllStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal COMPLETED As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWithCustomerAndStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal COMPLETED As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACC_RECEIVED_ABLE_VIEW1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACC_RECEIVED_ABLE_VIEW1"
            tableMapping.ColumnMappings.Add("ACCR_ID", "ACCR_ID")
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("CUST_ID", "CUST_ID")
            tableMapping.ColumnMappings.Add("CUST_NAME", "CUST_NAME")
            tableMapping.ColumnMappings.Add("CUST_PHONE", "CUST_PHONE")
            tableMapping.ColumnMappings.Add("completed", "completed")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("PaidKHR", "PaidKHR")
            tableMapping.ColumnMappings.Add("PaidUSD", "PaidUSD")
            tableMapping.ColumnMappings.Add("PaidTHB", "PaidTHB")
            tableMapping.ColumnMappings.Add("REMAIN_KHR", "REMAIN_KHR")
            tableMapping.ColumnMappings.Add("REMAIN_USD", "REMAIN_USD")
            tableMapping.ColumnMappings.Add("REMAIN_THB", "REMAIN_THB")
            tableMapping.ColumnMappings.Add("INVOICE_NO", "INVOICE_NO")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,co"& _ 
                "mpleted,KHR_AMOUNT,USD_AMOUNT,THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(Expr1,0)) as PaidKHR,SUM(i"& _ 
                "snull(Expr2,0)) as PaidUSD,SUM(isnull(Expr3,0)) as PaidTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(KHR_AMOUNT-sum(isn"& _ 
                "ull(Expr1,0))) AS REMAIN_KHR, (USD_AMOUNT-SUM(isnull(Expr2,0))) as REMAIN_USD,(T"& _ 
                "HB_AMOUNT-SUM(isnull(Expr3,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ACC_RECEIVED_ABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROU"& _ 
                "P BY ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,com"& _ 
                "pleted,KHR_AMOUNT,THB_AMOUNT,USD_AMOUNT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,co"& _ 
                "mpleted,KHR_AMOUNT,USD_AMOUNT,THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(Expr1,0)) as PaidKHR,SUM(i"& _ 
                "snull(Expr2,0)) as PaidUSD,SUM(isnull(Expr3,0)) as PaidTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(KHR_AMOUNT-sum(isn"& _ 
                "ull(Expr1,0))) AS REMAIN_KHR, (USD_AMOUNT-SUM(isnull(Expr2,0))) as REMAIN_USD,(T"& _ 
                "HB_AMOUNT-SUM(isnull(Expr3,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ACC_RECEIVED_ABLE_VIEW WHERE"& _ 
                " (PAYMENT_DATE BETWEEN @DFrom AND @DTo) AND IS_DEL=@IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ACCR_ID,INV"& _ 
                "OICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,completed,KHR_AMOUN"& _ 
                "T,THB_AMOUNT,USD_AMOUNT"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "PAYMENT_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "select ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,co"& _ 
                "mpleted,KHR_AMOUNT,USD_AMOUNT,THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(Expr1,0)) as PaidKHR,SUM(i"& _ 
                "snull(Expr2,0)) as PaidUSD,SUM(isnull(Expr3,0)) as PaidTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(KHR_AMOUNT-sum(isn"& _ 
                "ull(Expr1,0))) AS REMAIN_KHR, (USD_AMOUNT-SUM(isnull(Expr2,0))) as REMAIN_USD,(T"& _ 
                "HB_AMOUNT-SUM(isnull(Expr3,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ACC_RECEIVED_ABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (completed=@Completed) AND IS_DEL"& _ 
                "=@IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,"& _ 
                "CUST_PHONE,completed,KHR_AMOUNT,THB_AMOUNT,USD_AMOUNT"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Completed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "select ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,co"& _ 
                "mpleted,KHR_AMOUNT,USD_AMOUNT,THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(Expr1,0)) as PaidKHR,SUM(i"& _ 
                "snull(Expr2,0)) as PaidUSD,SUM(isnull(Expr3,0)) as PaidTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(KHR_AMOUNT-sum(isn"& _ 
                "ull(Expr1,0))) AS REMAIN_KHR, (USD_AMOUNT-SUM(isnull(Expr2,0))) as REMAIN_USD,(T"& _ 
                "HB_AMOUNT-SUM(isnull(Expr3,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ACC_RECEIVED_ABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E (INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (CUST_ID=@CUST_ID) AND IS_DEL=@IS_D"& _ 
                "EL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_P"& _ 
                "HONE,completed,KHR_AMOUNT,THB_AMOUNT,USD_AMOUNT "
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "select ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DATE,CUST_ID,CUST_NAME,CUST_PHONE,co"& _ 
                "mpleted,KHR_AMOUNT,USD_AMOUNT,THB_AMOUNT,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"sum(isnull(Expr1,0)) as PaidKHR,SUM(i"& _ 
                "snull(Expr2,0)) as PaidUSD,SUM(isnull(Expr3,0)) as PaidTHB,"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(KHR_AMOUNT-sum(isn"& _ 
                "ull(Expr1,0))) AS REMAIN_KHR, (USD_AMOUNT-SUM(isnull(Expr2,0))) as REMAIN_USD,(T"& _ 
                "HB_AMOUNT-SUM(isnull(Expr3,0))) as REMAIN_THB"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM ACC_RECEIVED_ABLE_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"(INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (CUST_ID=@CUST_ID) AND completed=@"& _ 
                "completed AND IS_DEL=@IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY ACCR_ID,INVOICE_NO,INVOICE_ID,INVOICE_DAT"& _ 
                "E,CUST_ID,CUST_NAME,CUST_PHONE,completed,KHR_AMOUNT,THB_AMOUNT,USD_AMOUNT"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@completed", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateAllStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy1(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateWhithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy2(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateByCustomerAllStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy3(ByVal dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDateToDateByCustWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal completed As Global.System.Nullable(Of Integer), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (completed.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(completed.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable = New DSAccountReceivable.ACC_RECEIVED_ABLE_VIEW1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ACCOUNT_RECEIVABLE1TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ACCOUNT_RECEIVABLE1"
            tableMapping.ColumnMappings.Add("ACCR_ID", "ACCR_ID")
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("CUST_ID", "CUST_ID")
            tableMapping.ColumnMappings.Add("KHR_AMOUNT", "KHR_AMOUNT")
            tableMapping.ColumnMappings.Add("THB_AMOUNT", "THB_AMOUNT")
            tableMapping.ColumnMappings.Add("USD_AMOUNT", "USD_AMOUNT")
            tableMapping.ColumnMappings.Add("KHR_PAID", "KHR_PAID")
            tableMapping.ColumnMappings.Add("THB_PAID", "THB_PAID")
            tableMapping.ColumnMappings.Add("USD_PAID", "USD_PAID")
            tableMapping.ColumnMappings.Add("ACCR_NOTE", "ACCR_NOTE")
            tableMapping.ColumnMappings.Add("COMPLETED", "COMPLETED")
            tableMapping.ColumnMappings.Add("CREATE_DATE_ACC", "CREATE_DATE_ACC")
            tableMapping.ColumnMappings.Add("IS_DEL", "IS_DEL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ACCOUNT_RECEIVABLE] WHERE (([ACCR_ID] = @Original_ACCR_ID) AND"& _ 
                " ((@IsNull_INVOICE_ID = 1 AND [INVOICE_ID] IS NULL) OR ([INVOICE_ID] = @Original"& _ 
                "_INVOICE_ID)) AND ((@IsNull_CUST_ID = 1 AND [CUST_ID] IS NULL) OR ([CUST_ID] = @"& _ 
                "Original_CUST_ID)) AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([K"& _ 
                "HR_AMOUNT] = @Original_KHR_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [THB_AMOUNT"& _ 
                "] IS NULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_USD_AMOUNT = "& _ 
                "1 AND [USD_AMOUNT] IS NULL) OR ([USD_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsN"& _ 
                "ull_KHR_PAID = 1 AND [KHR_PAID] IS NULL) OR ([KHR_PAID] = @Original_KHR_PAID)) A"& _ 
                "ND ((@IsNull_THB_PAID = 1 AND [THB_PAID] IS NULL) OR ([THB_PAID] = @Original_THB"& _ 
                "_PAID)) AND ((@IsNull_USD_PAID = 1 AND [USD_PAID] IS NULL) OR ([USD_PAID] = @Ori"& _ 
                "ginal_USD_PAID)) AND ((@IsNull_ACCR_NOTE = 1 AND [ACCR_NOTE] IS NULL) OR ([ACCR_"& _ 
                "NOTE] = @Original_ACCR_NOTE)) AND ((@IsNull_COMPLETED = 1 AND [COMPLETED] IS NUL"& _ 
                "L) OR ([COMPLETED] = @Original_COMPLETED)) AND ((@IsNull_CREATE_DATE_ACC = 1 AND"& _ 
                " [CREATE_DATE_ACC] IS NULL) OR ([CREATE_DATE_ACC] = @Original_CREATE_DATE_ACC)) "& _ 
                "AND ((@IsNull_IS_DEL = 1 AND [IS_DEL] IS NULL) OR ([IS_DEL] = @Original_IS_DEL))"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCR_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATE_DATE_ACC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATE_DATE_ACC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ACCOUNT_RECEIVABLE] ([INVOICE_ID], [CUST_ID], [KHR_AMOUNT], [T"& _ 
                "HB_AMOUNT], [USD_AMOUNT], [KHR_PAID], [THB_PAID], [USD_PAID], [ACCR_NOTE], [COMP"& _ 
                "LETED], [CREATE_DATE_ACC], [IS_DEL]) VALUES (@INVOICE_ID, @CUST_ID, @KHR_AMOUNT,"& _ 
                " @THB_AMOUNT, @USD_AMOUNT, @KHR_PAID, @THB_PAID, @USD_PAID, @ACCR_NOTE, @COMPLET"& _ 
                "ED, @CREATE_DATE_ACC, @IS_DEL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ACCR_ID, INVOICE_ID, CUST_ID, KHR_AMOUNT"& _ 
                ", THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CR"& _ 
                "EATE_DATE_ACC, IS_DEL FROM ACCOUNT_RECEIVABLE WHERE (ACCR_ID = SCOPE_IDENTITY())"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE_ACC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ACCOUNT_RECEIVABLE] SET [INVOICE_ID] = @INVOICE_ID, [CUST_ID] = @CU"& _ 
                "ST_ID, [KHR_AMOUNT] = @KHR_AMOUNT, [THB_AMOUNT] = @THB_AMOUNT, [USD_AMOUNT] = @U"& _ 
                "SD_AMOUNT, [KHR_PAID] = @KHR_PAID, [THB_PAID] = @THB_PAID, [USD_PAID] = @USD_PAI"& _ 
                "D, [ACCR_NOTE] = @ACCR_NOTE, [COMPLETED] = @COMPLETED, [CREATE_DATE_ACC] = @CREA"& _ 
                "TE_DATE_ACC, [IS_DEL] = @IS_DEL WHERE (([ACCR_ID] = @Original_ACCR_ID) AND ((@Is"& _ 
                "Null_INVOICE_ID = 1 AND [INVOICE_ID] IS NULL) OR ([INVOICE_ID] = @Original_INVOI"& _ 
                "CE_ID)) AND ((@IsNull_CUST_ID = 1 AND [CUST_ID] IS NULL) OR ([CUST_ID] = @Origin"& _ 
                "al_CUST_ID)) AND ((@IsNull_KHR_AMOUNT = 1 AND [KHR_AMOUNT] IS NULL) OR ([KHR_AMO"& _ 
                "UNT] = @Original_KHR_AMOUNT)) AND ((@IsNull_THB_AMOUNT = 1 AND [THB_AMOUNT] IS N"& _ 
                "ULL) OR ([THB_AMOUNT] = @Original_THB_AMOUNT)) AND ((@IsNull_USD_AMOUNT = 1 AND "& _ 
                "[USD_AMOUNT] IS NULL) OR ([USD_AMOUNT] = @Original_USD_AMOUNT)) AND ((@IsNull_KH"& _ 
                "R_PAID = 1 AND [KHR_PAID] IS NULL) OR ([KHR_PAID] = @Original_KHR_PAID)) AND ((@"& _ 
                "IsNull_THB_PAID = 1 AND [THB_PAID] IS NULL) OR ([THB_PAID] = @Original_THB_PAID)"& _ 
                ") AND ((@IsNull_USD_PAID = 1 AND [USD_PAID] IS NULL) OR ([USD_PAID] = @Original_"& _ 
                "USD_PAID)) AND ((@IsNull_ACCR_NOTE = 1 AND [ACCR_NOTE] IS NULL) OR ([ACCR_NOTE] "& _ 
                "= @Original_ACCR_NOTE)) AND ((@IsNull_COMPLETED = 1 AND [COMPLETED] IS NULL) OR "& _ 
                "([COMPLETED] = @Original_COMPLETED)) AND ((@IsNull_CREATE_DATE_ACC = 1 AND [CREA"& _ 
                "TE_DATE_ACC] IS NULL) OR ([CREATE_DATE_ACC] = @Original_CREATE_DATE_ACC)) AND (("& _ 
                "@IsNull_IS_DEL = 1 AND [IS_DEL] IS NULL) OR ([IS_DEL] = @Original_IS_DEL)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT ACCR_ID, INVOICE_ID, CUST_ID, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID,"& _ 
                " THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, IS_DEL FROM ACCOUNT_"& _ 
                "RECEIVABLE WHERE (ACCR_ID = @ACCR_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THB_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USD_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_PAID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CREATE_DATE_ACC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CUST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CUST_ID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_AMOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_AMOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_AMOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_KHR_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "KHR_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_KHR_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "KHR_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THB_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THB_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THB_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "THB_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USD_PAID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USD_PAID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USD_PAID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "USD_PAID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ACCR_NOTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ACCR_NOTE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_NOTE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CREATE_DATE_ACC", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CREATE_DATE_ACC", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CREATE_DATE_ACC", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DEL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DEL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Asia_Garden_Inventory_Management_System.My.MySettings.Default.INV_Database
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ACCR_ID, INVOICE_ID, CUST_ID, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID"& _ 
                ", THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, IS_DEL FROM dbo.ACC"& _ 
                "OUNT_RECEIVABLE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DFrom AND @DTo)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.ACCR_ID = @ACCR_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ACCR_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ACCR_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DFrom AND @DTo) AND (A.COMPLETED = @COMPL"& _ 
                "ETED)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMPLETED", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.INVOICE_ID = @InvoiceNo)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InvoiceNo", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (I.INVOICE_DATE BETWEEN @DTo AND @DFrom)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.CUST_ID = @CUST_ID) AND (I.INVOICE_DATE BETWEEN @DFrom AND @DTo"& _ 
                ") AND (A.COMPLETED = @Status)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT A.ACCR_ID, A.INVOICE_ID, I.CUST_NAME, I.INVOICE_DATE, A.CUST_ID, A.KHR_AMO"& _ 
                "UNT, A.THB_AMOUNT, A.USD_AMOUNT, A.KHR_PAID, A.THB_PAID, A.USD_PAID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "         A.ACCR_NOTE, A.COMPLETED, I.INVOICE_NO, A.IS_DEL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     ACCOUNT_RECE"& _ 
                "IVABLE AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  INVOICE AS I ON I.INVOICE_ID = A.INVOI"& _ 
                "CE_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (A.CUST_ID = @CUST_ID) AND (I.INVOICE_DATE BETWEEN @DFrom AND @DTo"& _ 
                ")"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CUST_ID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CUST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAllReceivables(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllReceivables() As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectAllStatusDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectAllStatusDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectByAccID(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal ACCR_ID As Long) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACCR_ID,Long)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByAccID(ByVal ACCR_ID As Long) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ACCR_ID,Long)
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectDataToDateWithStatus(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal COMPLETED As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectDataToDateWithStatus(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal COMPLETED As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceByNo(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal InvoiceNo As Global.System.Nullable(Of Long)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (InvoiceNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(InvoiceNo.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceByNo(ByVal InvoiceNo As Global.System.Nullable(Of Long)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (InvoiceNo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(InvoiceNo.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal DTo As Global.System.Nullable(Of Date), ByVal DFrom As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceDateToDate(ByVal DTo As Global.System.Nullable(Of Date), ByVal DFrom As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceWithCustomerAndStatusPaid(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Status As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceWithCustomerAndStatusPaid(ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date), ByVal Status As Global.System.Nullable(Of Integer)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Status.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Status.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelectInvoiceWithCustomerDateToDate(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable, ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceWithCustomerDateToDate(ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable = New DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DSAccountReceivable.ACCOUNT_RECEIVABLE1DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DSAccountReceivable) As Integer
            Return Me.Adapter.Update(dataSet, "ACCOUNT_RECEIVABLE1")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ACCR_ID As Long, ByVal Original_INVOICE_ID As Global.System.Nullable(Of Long), ByVal Original_CUST_ID As Global.System.Nullable(Of Long), ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal Original_KHR_PAID As Global.System.Nullable(Of Decimal), ByVal Original_THB_PAID As Global.System.Nullable(Of Decimal), ByVal Original_USD_PAID As Global.System.Nullable(Of Decimal), ByVal Original_ACCR_NOTE As String, ByVal Original_COMPLETED As Global.System.Nullable(Of Integer), ByVal Original_CREATE_DATE_ACC As Global.System.Nullable(Of Date), ByVal Original_IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ACCR_ID,Long)
            If (Original_INVOICE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_INVOICE_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CUST_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CUST_ID.Value,Long)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_PAID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_KHR_PAID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_PAID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_THB_PAID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_PAID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_USD_PAID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ACCR_NOTE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ACCR_NOTE,String)
            End If
            If (Original_COMPLETED.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_COMPLETED.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATE_DATE_ACC.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_CREATE_DATE_ACC.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DEL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_IS_DEL.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal INVOICE_ID As Global.System.Nullable(Of Long), ByVal CUST_ID As Global.System.Nullable(Of Long), ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal), ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal), ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal), ByVal KHR_PAID As Global.System.Nullable(Of Decimal), ByVal THB_PAID As Global.System.Nullable(Of Decimal), ByVal USD_PAID As Global.System.Nullable(Of Decimal), ByVal ACCR_NOTE As String, ByVal COMPLETED As Global.System.Nullable(Of Integer), ByVal CREATE_DATE_ACC As Global.System.Nullable(Of Date), ByVal IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            If (INVOICE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(INVOICE_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (KHR_PAID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(KHR_PAID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (THB_PAID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(THB_PAID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (USD_PAID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(USD_PAID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ACCR_NOTE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ACCR_NOTE,String)
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE_ACC.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CREATE_DATE_ACC.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal INVOICE_ID As Global.System.Nullable(Of Long),  _
                    ByVal CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal KHR_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal ACCR_NOTE As String,  _
                    ByVal COMPLETED As Global.System.Nullable(Of Integer),  _
                    ByVal CREATE_DATE_ACC As Global.System.Nullable(Of Date),  _
                    ByVal IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ACCR_ID As Long,  _
                    ByVal Original_INVOICE_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_KHR_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ACCR_NOTE As String,  _
                    ByVal Original_COMPLETED As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CREATE_DATE_ACC As Global.System.Nullable(Of Date),  _
                    ByVal Original_IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal ACCR_ID As Long) As Integer
            If (INVOICE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(INVOICE_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CUST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CUST_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (KHR_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(KHR_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (THB_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(THB_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (USD_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(USD_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (ACCR_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ACCR_NOTE,String)
            End If
            If (COMPLETED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(COMPLETED.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CREATE_DATE_ACC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CREATE_DATE_ACC.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IS_DEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IS_DEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_ACCR_ID,Long)
            If (Original_INVOICE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_INVOICE_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CUST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_CUST_ID.Value,Long)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_KHR_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_THB_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_AMOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_USD_AMOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_KHR_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_KHR_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_THB_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_THB_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_USD_PAID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_USD_PAID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_ACCR_NOTE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_ACCR_NOTE,String)
            End If
            If (Original_COMPLETED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_COMPLETED.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_CREATE_DATE_ACC.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_CREATE_DATE_ACC.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DEL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_IS_DEL.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(ACCR_ID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal INVOICE_ID As Global.System.Nullable(Of Long),  _
                    ByVal CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal KHR_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal THB_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal USD_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal ACCR_NOTE As String,  _
                    ByVal COMPLETED As Global.System.Nullable(Of Integer),  _
                    ByVal CREATE_DATE_ACC As Global.System.Nullable(Of Date),  _
                    ByVal IS_DEL As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ACCR_ID As Long,  _
                    ByVal Original_INVOICE_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_CUST_ID As Global.System.Nullable(Of Long),  _
                    ByVal Original_KHR_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_AMOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_KHR_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_THB_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USD_PAID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ACCR_NOTE As String,  _
                    ByVal Original_COMPLETED As Global.System.Nullable(Of Integer),  _
                    ByVal Original_CREATE_DATE_ACC As Global.System.Nullable(Of Date),  _
                    ByVal Original_IS_DEL As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(INVOICE_ID, CUST_ID, KHR_AMOUNT, THB_AMOUNT, USD_AMOUNT, KHR_PAID, THB_PAID, USD_PAID, ACCR_NOTE, COMPLETED, CREATE_DATE_ACC, IS_DEL, Original_ACCR_ID, Original_INVOICE_ID, Original_CUST_ID, Original_KHR_AMOUNT, Original_THB_AMOUNT, Original_USD_AMOUNT, Original_KHR_PAID, Original_THB_PAID, Original_USD_PAID, Original_ACCR_NOTE, Original_COMPLETED, Original_CREATE_DATE_ACC, Original_IS_DEL, Original_ACCR_ID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _iNVOICETableAdapter As INVOICETableAdapter
        
        Private _aCCOUNT_RECEIVABLETableAdapter As ACCOUNT_RECEIVABLETableAdapter
        
        Private _aR_PAYMENTTableAdapter As AR_PAYMENTTableAdapter
        
        Private _iNVOICE_DETAILSTableAdapter As INVOICE_DETAILSTableAdapter
        
        Private _aCCOUNT_RECEIVABLE1TableAdapter As ACCOUNT_RECEIVABLE1TableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property INVOICETableAdapter() As INVOICETableAdapter
            Get
                Return Me._iNVOICETableAdapter
            End Get
            Set
                Me._iNVOICETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACCOUNT_RECEIVABLETableAdapter() As ACCOUNT_RECEIVABLETableAdapter
            Get
                Return Me._aCCOUNT_RECEIVABLETableAdapter
            End Get
            Set
                Me._aCCOUNT_RECEIVABLETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AR_PAYMENTTableAdapter() As AR_PAYMENTTableAdapter
            Get
                Return Me._aR_PAYMENTTableAdapter
            End Get
            Set
                Me._aR_PAYMENTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property INVOICE_DETAILSTableAdapter() As INVOICE_DETAILSTableAdapter
            Get
                Return Me._iNVOICE_DETAILSTableAdapter
            End Get
            Set
                Me._iNVOICE_DETAILSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ACCOUNT_RECEIVABLE1TableAdapter() As ACCOUNT_RECEIVABLE1TableAdapter
            Get
                Return Me._aCCOUNT_RECEIVABLE1TableAdapter
            End Get
            Set
                Me._aCCOUNT_RECEIVABLE1TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._iNVOICETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iNVOICETableAdapter.Connection) Is Nothing)) Then
                    Return Me._iNVOICETableAdapter.Connection
                End If
                If ((Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCCOUNT_RECEIVABLETableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCCOUNT_RECEIVABLETableAdapter.Connection
                End If
                If ((Not (Me._aR_PAYMENTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aR_PAYMENTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aR_PAYMENTTableAdapter.Connection
                End If
                If ((Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._iNVOICE_DETAILSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._iNVOICE_DETAILSTableAdapter.Connection
                End If
                If ((Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection) Is Nothing)) Then
                    Return Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DSAccountReceivable, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLE1TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.INVOICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iNVOICETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AR_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aR_PAYMENTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.INVOICE_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._iNVOICE_DETAILSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DSAccountReceivable, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLE1TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.INVOICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iNVOICETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AR_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aR_PAYMENTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.INVOICE_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._iNVOICE_DETAILSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DSAccountReceivable, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.INVOICE_DETAILS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iNVOICE_DETAILSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AR_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aR_PAYMENTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.INVOICE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._iNVOICETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE1.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLE1TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ACCOUNT_RECEIVABLE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aCCOUNT_RECEIVABLETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DSAccountReceivable) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._iNVOICETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iNVOICETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCCOUNT_RECEIVABLETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aR_PAYMENTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aR_PAYMENTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._iNVOICE_DETAILSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iNVOICETableAdapter, Me._iNVOICETableAdapter.Connection)
                    Me._iNVOICETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iNVOICETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iNVOICETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iNVOICETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iNVOICETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCCOUNT_RECEIVABLETableAdapter, Me._aCCOUNT_RECEIVABLETableAdapter.Connection)
                    Me._aCCOUNT_RECEIVABLETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCCOUNT_RECEIVABLETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCCOUNT_RECEIVABLETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCCOUNT_RECEIVABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCCOUNT_RECEIVABLETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aR_PAYMENTTableAdapter, Me._aR_PAYMENTTableAdapter.Connection)
                    Me._aR_PAYMENTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aR_PAYMENTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aR_PAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aR_PAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aR_PAYMENTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._iNVOICE_DETAILSTableAdapter, Me._iNVOICE_DETAILSTableAdapter.Connection)
                    Me._iNVOICE_DETAILSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._iNVOICE_DETAILSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._iNVOICE_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._iNVOICE_DETAILSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._iNVOICE_DETAILSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aCCOUNT_RECEIVABLE1TableAdapter, Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection)
                    Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aCCOUNT_RECEIVABLE1TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aCCOUNT_RECEIVABLE1TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aCCOUNT_RECEIVABLE1TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aCCOUNT_RECEIVABLE1TableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._iNVOICETableAdapter) Is Nothing) Then
                    Me._iNVOICETableAdapter.Connection = CType(revertConnections(Me._iNVOICETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iNVOICETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aCCOUNT_RECEIVABLETableAdapter) Is Nothing) Then
                    Me._aCCOUNT_RECEIVABLETableAdapter.Connection = CType(revertConnections(Me._aCCOUNT_RECEIVABLETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCCOUNT_RECEIVABLETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aR_PAYMENTTableAdapter) Is Nothing) Then
                    Me._aR_PAYMENTTableAdapter.Connection = CType(revertConnections(Me._aR_PAYMENTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aR_PAYMENTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._iNVOICE_DETAILSTableAdapter) Is Nothing) Then
                    Me._iNVOICE_DETAILSTableAdapter.Connection = CType(revertConnections(Me._iNVOICE_DETAILSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._iNVOICE_DETAILSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aCCOUNT_RECEIVABLE1TableAdapter) Is Nothing) Then
                    Me._aCCOUNT_RECEIVABLE1TableAdapter.Connection = CType(revertConnections(Me._aCCOUNT_RECEIVABLE1TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aCCOUNT_RECEIVABLE1TableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
